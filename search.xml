<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML中的文本</title>
      <link href="/2020/08/27/html3/"/>
      <url>/2020/08/27/html3/</url>
      
        <content type="html"><![CDATA[<div class='tip warning'><p>此篇文章只針對<b>文本</b>部分做教學，若無需求，可不必觀看<p></div><h1 id="結構化元素"><a href="#結構化元素" class="headerlink" title="結構化元素"></a>結構化元素</h1><p>結構化元素就是指 HTML 元素中具有明確含義和作用的元素，例如 <code>p</code> 元素表示段落。</p><p>HTML4.01 版本的結構化元素:</p><table><thead><tr><th align="center">名稱</th><th align="center">代碼</th></tr></thead><tbody><tr><td align="center">標題元素</td><td align="center"><code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code></td></tr><tr><td align="center">段落元素</td><td align="center"><code>&lt;p&gt;</code></td></tr><tr><td align="center">粗體元素</td><td align="center"><code>&lt;b&gt;</code></td></tr><tr><td align="center">斜體元素</td><td align="center"><code>&lt;i&gt;</code></td></tr><tr><td align="center">上標 / 下標元素</td><td align="center"><code>&lt;sup&gt;</code>/<code>&lt;sub&gt;</code></td></tr><tr><td align="center">換行元素</td><td align="center"><code>&lt;br&gt;</code></td></tr><tr><td align="center">水平線元素</td><td align="center"><code>&lt;hr&gt;</code></td></tr></tbody></table><p>相對於 HTML 4.01 版本而言，HTML5 版本新增了一系列結構化元素。<br>HTML5 版本的新增的結構化元素:</p><ul><li><code>&lt;article&gt;</code> 元素</li><li><code>&lt;section&gt;</code> 元素</li><li><code>&lt;nav&gt;</code> 元素</li><li><code>&lt;aside&gt;</code> 元素</li><li><code>&lt;header&gt;</code>元素</li><li><code>&lt;main&gt;</code> 元素</li><li><code>&lt;footer&gt;</code> 元素</li></ul><h2 id="HTML4的元素"><a href="#HTML4的元素" class="headerlink" title="HTML4的元素"></a>HTML4的元素</h2><h3 id="標題元素"><a href="#標題元素" class="headerlink" title="標題元素"></a>標題元素</h3><p>HTML 標題元素具體是指<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code>元素，其呈現了 6 個不同級別的標題，<br><code>&lt;h1&gt;</code> 元素級別最高，<code>&lt;h6&gt;</code> 元素級別最低。每個元素獨占一行。</p><h3 id="段落元素"><a href="#段落元素" class="headerlink" title="段落元素"></a>段落元素</h3><p>HTML <code>&lt;p&gt;</code> 元素表示一個段落，該元素通常呈現出當前段落的文本與其他段落的文本之間會以空白進行隔離。如下示例代碼展示了 <code>&lt;p&gt;</code> 元素的用法：</p><h3 id="粗體元素"><a href="#粗體元素" class="headerlink" title="粗體元素"></a>粗體元素</h3><p>HTML <code>&lt;b&gt;</code> 元素用來定義需要提醒注意的內容。該元素在過去被認為是粗體元素，因為絕大多數瀏覽器解析該元素呈現的是粗體效果。</p><div class="note info icon">            <p>如果不是出於語義目的而使用 <code>&lt;b&gt;</code> 元素，那麼讓文本顯示粗體更好的方式是使用將 CSS 的 font-weight 屬性設置為 bold。</p>          </div><p><code>&lt;b&gt;</code> 元素的應用場景例如摘要中的關鍵字、評論中的產品名稱，或其他典型的應該加粗顯示的文字。</p><p>以前 <code>&lt;b&gt;</code> 元素的含義就是讓文本變成粗體效果。但從 HTML4 版本開始，不讚成標簽表示帶樣式信息，於是 <code>&lt;b&gt;</code> 元素的含義發生了變化。</p><h3 id="斜體元素"><a href="#斜體元素" class="headerlink" title="斜體元素"></a>斜體元素</h3><p>HTML<code>&lt;i&gt;</code> 元素用來定義表現因某些原因需要區分普通文本的一系列文本，例如技術術語、外文短語或是小說中人物的思想活動等。瀏覽器運行解析 <code>&lt;i&gt;</code> 元素一般呈現的效果是斜體。</p><h3 id="上標-下標元素"><a href="#上標-下標元素" class="headerlink" title="上標 / 下標元素"></a>上標 / 下標元素</h3><p>HTML <code>&lt;sup&gt;</code> 元素表示為上標元素，HTML <code>&lt;sub&gt;</code> 元素表示為下標元素。這兩個元素的特點如下：</p><p><code>&lt;sup&gt;</code> 元素定義的文本內容與主體內容相比，顯示更高更小。<br><code>&lt;sub&gt;</code> 元素定義的文本內容與主體內容相比，顯示更低更小。</p><h3 id="換行元素"><a href="#換行元素" class="headerlink" title="換行元素"></a>換行元素</h3><p>HTML <code>&lt;br&gt;</code> 元素會在 HTML 頁面中生成一個換行符。<br>編寫在 <code>&lt;br&gt;</code> 元素後的文本內容會呈現在第二行中。</p><h3 id="水平線元素"><a href="#水平線元素" class="headerlink" title="水平線元素"></a>水平線元素</h3><p>HTML <code>&lt;hr&gt;</code> 元素用來表示段落元素之間的主題轉換。在較早版本的 HTML 中，<code>&lt;hr&gt;</code> 元素表示一個水平線，並且瀏覽器運行解析也是水平線效果。但目前 <code>&lt;hr&gt;</code> 元素被定義為語義上的，而不是表現上。</p><h2 id="HTML5-版本的結構化元素"><a href="#HTML5-版本的結構化元素" class="headerlink" title="HTML5 版本的結構化元素"></a>HTML5 版本的結構化元素</h2><h3 id="lt-article-gt-元素"><a href="#lt-article-gt-元素" class="headerlink" title="&lt;article&gt;元素"></a><code>&lt;article&gt;</code>元素</h3><p>HTML <code>&lt;article&gt;</code> 元素用來定義 HTML 頁面中的可獨立分配或可複用結構，例如論壇的帖子、新聞網站的文章等。</p><h3 id="lt-section-gt-元素"><a href="#lt-section-gt-元素" class="headerlink" title="&lt;section&gt;元素"></a><code>&lt;section&gt;</code>元素</h3><p>HTML <code>&lt;section&gt;</code> 元素用來定義 HTML 頁面中的獨立部分，該獨立部分沒有更具體的的語義元素來描述該元素。<br>關於 <code>&lt;section&gt;</code> 元素在開發中的使用時需要注意如下要點：</p><p>一般通過是否包含一個標題元素（<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>）作為子級元素來識別每一個 <code>&lt;section&gt;</code> 元素。</p><p>如果元素內容可以分為幾個部分的話，應該使用 <code>&lt;article&gt;</code> 元素 而不是 <code>&lt;section&gt;</code> 元素。</p><p>不要將 <code>&lt;section&gt;</code> 元素作為一個普通容器使用，這應該是 <code>&lt;div&gt;</code> 元素的用法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>入社考內容——HTML基本示例</title>
      <link href="/2020/08/26/html2/"/>
      <url>/2020/08/26/html2/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基本範例"><a href="#HTML基本範例" class="headerlink" title="HTML基本範例"></a>HTML基本範例</h1><h2 id="HTML基本常識-amp-amp-注意事項"><a href="#HTML基本常識-amp-amp-注意事項" class="headerlink" title="HTML基本常識 &amp;&amp; 注意事項"></a>HTML基本常識 &amp;&amp; 注意事項</h2><ul><li><p>HTML是一種標籤式的語言，可以在任意貼上或取下</p></li><li><p>(幾乎)每段程式碼的都需要被<code>開始標簽</code>與<code>結束標簽</code>包覆，範例:<br><img src= "/img/loading.gif" data-lazy-src="09.png"></p></li><li><p>如果在編輯的時候，某行出了<strong>Bug</strong>(發生錯誤)的話，瀏覽器會<strong>直接忽略該行</strong>喔~~</p></li><li><p>HTML它可以靠<code>開始標簽</code>與<code>結束標簽</code>跨行，但不必要的跨行會讓之後的編輯更複雜喔!!</p></li><li><p>在開始與結束標籤內可使用大寫，但<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91%E8%81%94%E7%9B%9F">W3C</a>有規範只能用小寫喔~~</p></li><li><p>未來程式碼可能會超多超多…，所以，<strong>縮排</strong>很重要!! <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: red;">如果我堅持不縮排呢?  </button><span class="hide-content">你很有可能會被我盯得緊緊的喔(￢︿̫̿￢☆)</span></span></p></li></ul><h2 id="HTML文件"><a href="#HTML文件" class="headerlink" title="HTML文件"></a>HTML文件</h2><p>所有HTML文檔都必須以文檔類型聲明：開頭<code>&lt;!DOCTYPE html&gt;</code>。</p><ul><li><p>HTML文檔本身以開頭<code>&lt;html&gt;</code>和結尾<code>&lt;/html&gt;</code><br>定義頭部基本信息：標題，關鍵字，作者等。</p></li><li><p>HTML文檔的可見部分在<code>&lt;body&gt;</code>和之間<code>&lt;/body&gt;</code>，<br>表示當前HTML的主體，定義最終在瀏覽器窗口顯示的內容。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="01.png"></p><h2 id="lt-！DOCTYPE-gt-聲明"><a href="#lt-！DOCTYPE-gt-聲明" class="headerlink" title="&lt;！DOCTYPE&gt;聲明"></a><code>&lt;！DOCTYPE&gt;</code>聲明</h2><p>該<code>&lt;!DOCTYPE&gt;</code>聲明代表文檔類型，並有助於瀏覽器正確顯示網頁。</p><ul><li><p>它只能在頁面頂部（在任何HTML標記之前）出現一次。</p></li><li><p>該<code>&lt;!DOCTYPE&gt;</code>聲明不區分大小寫。</p></li></ul><p><code>&lt;!DOCTYPE&gt;HTML5</code> 的聲明為：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML標題"><a href="#HTML標題" class="headerlink" title="HTML標題"></a>HTML標題</h2><p>HTML標題是使用<code>&lt;h1&gt;</code>to <code>&lt;h6&gt;</code>標記定義的。</p><p><code>&lt;h1&gt;</code>定義最重要的標題。<code>&lt;h6&gt;</code>定義最不重要的標題：<br><img src= "/img/loading.gif" data-lazy-src="02.png"></p><div class='snote info'><p>瀏覽器在標題前後自動添加一些空白（邊距）。</p></div><h3 id="標題很重要"><a href="#標題很重要" class="headerlink" title="標題很重要"></a>標題很重要</h3><ul><li><p>對於搜索引擎抓取 HTML 頁面的內容，<code>&lt;h1&gt;</code> 元素僅次於 <code>&lt;title&gt;</code> 元素。</p></li><li><p>為了可以被搜索引擎抓取，建議一個 <code>HTML</code> 頁面只包含一個 <code>&lt;h1&gt;</code> 元素。</p></li><li><p><code>&lt;h1&gt;</code>標題應該用作主要標題，其次是<code>&lt;h2&gt;</code>標題，然後是次要的標題， <code>&lt;h3&gt;</code>依此類推。</p></li></ul><div class='tip warning'><p><strong>Note</strong>：僅將HTML標題用於標題。不要使用標題使文本 <strong>大</strong> 或加 <strong>粗</strong>，它不是修飾文章用的。</p></div><h2 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h2><p>HTML段落使用<code>&lt;p&gt;</code>標記定義：</p><p><img src= "/img/loading.gif" data-lazy-src="03.png"></p><h3 id="HTML顯示"><a href="#HTML顯示" class="headerlink" title="HTML顯示"></a>HTML顯示</h3><p>您無法確定HTML的顯示方式。 大屏幕或小屏幕以及調整大小的窗口都會產生不同的結果。</p><p>使用HTML，您<strong>無法通過在HTML代碼中添加額外的空格或額外的行來更改顯示</strong>。</p><p>顯示頁面時，瀏覽器將自動刪除所有多餘的空格和行：</p><p><img src= "/img/loading.gif" data-lazy-src="04.png"></p><h2 id="HTML連結"><a href="#HTML連結" class="headerlink" title="HTML連結"></a>HTML連結</h2><p>HTML <code>&lt;a&gt;</code>標記定義了超連結。它具有以下語法：<br><img src= "/img/loading.gif" data-lazy-src="07.png"><br> <code>href</code>指示連結的目的地，所以它最重要。 該連結的文本是將讀者可見的部分。</p><p>單擊連結文本，會將讀者發送到指定的URL地址。默認情況下，鏈接將在所有瀏覽器中顯示如下：</p><ul><li>未訪問的連結帶有下劃線並顯示為<strong>藍色</strong></li><li>已訪問的連結帶有下劃線和<strong>紫色</strong></li><li>被點擊的連結帶有下劃線和<strong>紅色</strong></li></ul><div class="note info icon">            <p>連結當然可以使用<strong>CSS</strong>設置樣式，以便獲得另一種外觀！<br><span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: bg;color: color">什麼是CSS?<br>  </button><span class="hide-content">就是另一種<strong>很簡單的</strong>程式語言，專門<strong>給html做裝飾</strong>用的!!</span></span></p>          </div><h2 id="HTML註解"><a href="#HTML註解" class="headerlink" title="HTML註解"></a>HTML註解</h2><p>HTML 使用了<code>&lt;!--  --&gt;</code>當作為註解。</p><p>作為註解的文字會被瀏覽器忽略。</p><p>就跟其他的語言一樣，它的出現就是為了<strong>維護</strong>跟<strong>更容易讀</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="08.png"></p>]]></content>
      
      
      <categories>
          
          <category> 電腦社相關 </category>
          
          <category> 入社考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 電腦社計畫 </tag>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
            <tag> 基本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網管組的學習導覽</title>
      <link href="/2020/08/26/map3/"/>
      <url>/2020/08/26/map3/</url>
      
        <content type="html"><![CDATA[<h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><h2 id="課程類"><a href="#課程類" class="headerlink" title="課程類"></a>課程類</h2><div class='checkbox yellow'><input type="checkbox" />            <p>成功讓所有網管組都有自己的網站</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>所有人都學會html基礎</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>所有人都學會css基礎</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>所有人都學會javascript基礎</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>所有人都有好看的網站</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>所有人都有好的學習歷程</p>            </div><h2 id="電腦社類"><a href="#電腦社類" class="headerlink" title="電腦社類"></a>電腦社類</h2><div class='checkbox blue'><input type="checkbox" />            <p>把嘉中電腦社的社網架好</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>選下一任網管組負責人(教學相長)</p>            </div><h2 id="自我期許類"><a href="#自我期許類" class="headerlink" title="自我期許類"></a>自我期許類</h2><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>增加自己寫筆記的能力</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>增加自己教學能力</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>全程都不要生氣(但允許開玩笑型)</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>教學時間全程不尷尬</p>            </div><h1 id="網管組入社考內容"><a href="#網管組入社考內容" class="headerlink" title="網管組入社考內容"></a>網管組入社考內容</h1><a class="btn-beautify button--animated green right" href="https://zrn-coding.github.io/2020/08/26/html2"   title="HTML基本示例，入社考就考這個"><i class="far fa-hand-point-right fa-fw"></i><span>HTML基本示例，入社考就考這個</span></a><h1 id="課程內容"><a href="#課程內容" class="headerlink" title="課程內容"></a>課程內容</h1><div class="snote link blue"><p>我會盡快補齊</p></div><h2 id="上學期"><a href="#上學期" class="headerlink" title="上學期"></a>上學期</h2><h3 id="網站架設github-page"><a href="#網站架設github-page" class="headerlink" title="網站架設github page"></a>網站架設<code>github page</code></h3><a class="btn-beautify button--animated green right" href="https://zrn-coding.github.io/2020/08/26/html-pre/"   title="網站架設"><i class="far fa-hand-point-right fa-fw"></i><span>網站架設</span></a><h3 id="html-amp-amp-css"><a href="#html-amp-amp-css" class="headerlink" title="html &amp;&amp; css"></a><code>html</code> &amp;&amp; <code>css</code></h3><a class="btn-beautify button--animated green right" href="https://zrn-coding.github.io/2020/08/26/html2"   title="HTML基本示例"><i class="far fa-hand-point-right fa-fw"></i><span>HTML基本示例</span></a> <a class="btn-beautify button--animated green right" href="https://zrn-coding.github.io/2020/08/25/html1/"   title="基礎認識"><i class="far fa-hand-point-right fa-fw"></i><span>基礎認識</span></a><h2 id="下學期"><a href="#下學期" class="headerlink" title="下學期"></a>下學期</h2><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a><code>javascript</code></h3><h3 id="特殊活動"><a href="#特殊活動" class="headerlink" title="特殊活動"></a>特殊活動</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 電腦社計畫 </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從Github page開始吧</title>
      <link href="/2020/08/26/html-pre/"/>
      <url>/2020/08/26/html-pre/</url>
      
        <content type="html"><![CDATA[<h1 id="了解-Github-page"><a href="#了解-Github-page" class="headerlink" title="了解 Github page"></a>了解 Github page</h1><p>寫好了專案我們通常會需要一台 Server 上傳我們的網站。有很多付費的，也有免費的，但如果只是很單純的 html、js、css，那麼你可以使用 <code>Github Pages</code> 。通常，如果租用了主機，通常還會需要買一個域名（你不會想給用戶看到 ip 吧），很幸運地 <code>Github Pages</code> 還提供了一個免費的域名給我們。</p><h1 id="建立一個-Repository"><a href="#建立一個-Repository" class="headerlink" title="建立一個 Repository"></a>建立一個 Repository</h1><p>登入 <code>Github</code>，然後右上角的 <code>+</code> 然後點 <code>New repository</code></p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="001.png"></p>              </div>            </details><p>接著這邊要注意，<code>Repository name</code> 這邊一定要填 <code>[你的github帳號].github.io</code><br>像我的帳號是 <code>zrnteacher</code>，所以我就要輸入 <code>zrnteacher.github.io</code> ，然後按 <code>[Create Repository]</code> 。</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="002.png"></p>              </div>            </details><h1 id="建立網站啦"><a href="#建立網站啦" class="headerlink" title="建立網站啦"></a>建立網站啦</h1><p>當專案建立完畢後，再點上方的<code>Settings</code>頁籤。</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="003.png"></p>              </div>            </details><p>將頁面往下拉，找到 <code>GitHub Pages</code>的選項後，點下方的<code>Choose a theme</code>鈕。</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="004.png"></p>              </div>            </details><p>接著隨便選一個佈景主題，因為我們完全不會用到</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="005.png"></p>              </div>            </details><p>當建立好後，上方面就會顯示<code>GitHub Pages</code>外部連結，這就是你現在網站的名稱，不妨點進去看看。</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="006.png"></p>              </div>            </details><p>如果能看到這個畫面，代表你已經完成了喔~~</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="007.png"></p>              </div>            </details><h1 id="GitHub-Desktop桌面程式"><a href="#GitHub-Desktop桌面程式" class="headerlink" title="GitHub Desktop桌面程式"></a>GitHub Desktop桌面程式</h1><h2 id="拉資料下來"><a href="#拉資料下來" class="headerlink" title="拉資料下來"></a>拉資料下來</h2><p>接著打開到GitHub Desktop桌面程式，點到option設定中。</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="008.png"></p>              </div>            </details><p>按<code>Sign In</code>登入</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="009.png"></p>              </div>            </details><p>接著就登入你的<code>github帳號</code>就好了</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="010.png"></p>              </div>            </details><p>選擇你放網站的倉庫</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="011.png"></p>              </div>            </details><p>將檔案clone下來，為了方便處理，就直接把路徑導到桌面就好</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="012.png"></p>              </div>            </details><p>完成後，成果會長這樣喔~~</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="013.png"></p>              </div>            </details><h2 id="推資料上去"><a href="#推資料上去" class="headerlink" title="推資料上去"></a>推資料上去</h2><p>將<a href="https://drive.google.com/file/d/17fxLLifpJUgqRMka76z5QBp67ikxYOcU/view?usp=sharing">這個檔案</a>下載下來後，把它移到剛建好連結的資料夾內。<br>並 <strong>刪除掉原本的兩個檔案</strong>。</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="017.png"></p>              </div>            </details><p>移動好後，<code>GitHub Desktop</code>會像此圖<br>之後，在<code>summary</code>中填上任意有關修改的字句，像我就填上了<code>前置任務</code><br>再來點擊下方的<code>commit to master</code></p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="014.png"></p>              </div>            </details><p>點擊右上方的<code>Push origin</code>，將檔案推上去</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="015.png"></p>              </div>            </details><p>等待一陣子後，<code>github</code>上的檔案就會改變了</p><details green><summary> <p>範例引導圖</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="016.png"></p>              </div>            </details><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>把上述動作完成後，再打開你的<code>github page</code>看看吧，應該就會有改變了(o゜▽゜)o☆   </p><a class="btn-beautify button--animated orange larger right" href="https://zrn-coding.github.io/2020/08/25/html1/"   title="前往第一篇正式教學囉"><i class="far fa-hand-point-right fa-fw"></i><span>前往第一篇正式教學囉</span></a>]]></content>
      
      
      <categories>
          
          <category> 大前端計畫 </category>
          
          <category> 教學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 電腦社計畫 </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基礎認識html、css</title>
      <link href="/2020/08/25/html1/"/>
      <url>/2020/08/25/html1/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-概述"><a href="#HTML-概述" class="headerlink" title="HTML 概述"></a>HTML 概述</h1><h2 id="第一個-HTML-頁面"><a href="#第一個-HTML-頁面" class="headerlink" title="第一個 HTML 頁面"></a>第一個 HTML 頁面</h2><h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><ol><li><p>!doctype 聲明<br><code>&lt;!DOCTYPE html&gt;</code> 告訴瀏覽器當前 html 頁面的版本</p></li><li><p>html 基本結構</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="comment">&lt;!-- 根元素，包含其他所有HTML元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="comment">&lt;!-- 定義頭部基本信息：標題，關鍵字，作者等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="comment">&lt;!-- 表示當前HTML的主體，定義最終在瀏覽器窗口顯示的內容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="HTML-標簽"><a href="#HTML-標簽" class="headerlink" title="HTML 標簽"></a>HTML 標簽</h2><ul><li>元素（Element）：是用來包含文字、圖片或者音視頻的內容，一般是由標簽和內容組成。</li><li>標簽（Tag）：是元素的組成部分，一般分為開始標簽和結束標簽。</li></ul><div class="note info">            <p>html 標簽對大小寫不敏感，但 W3C 組織強制<strong>元素名使用小寫</strong></p>          </div><h3 id="開始標簽與結束標簽"><a href="#開始標簽與結束標簽" class="headerlink" title="開始標簽與結束標簽"></a>開始標簽與結束標簽</h3><p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/832afe33ly1gai5s9gc9wj21gy0hdjt9.jpg"><br><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/832afe33ly1gai5s9g4zxj21jh0fztaq.jpg"></p><h3 id="元素的屬性"><a href="#元素的屬性" class="headerlink" title="元素的屬性"></a>元素的屬性</h3><p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/832afe33ly1gai5tvvdgcj21jj0hjac3.jpg"></p><ul><li>屬性名（attribute name）：其數量和作用都是 HTML 給定的。</li><li>屬性值（attribute value）：屬性對應的值，建議使用一對雙引號進行包裹。<br>同一元素允許多個不同屬性。</li></ul><h3 id="HTML-頭部"><a href="#HTML-頭部" class="headerlink" title="HTML 頭部"></a>HTML 頭部</h3><details green><summary> <p>head 元素</p> </summary>              <div class='content'>              <ul><li><p>定義頁面標題<br>  <code>&lt;title&gt;Document&lt;/title&gt;</code></p></li><li><p>定義所有相對 URL 的根 URL<br>一個 HTML 頁面只能定義一個 base 元素，如果定義一個，則只有第一個生效<br><code>&lt;base target=&quot;_blank&quot; href=&quot;http://www.example.com/&quot;&gt;</code></p></li><li><p>定義 HTML 頁面引入外部資源<br><code>&lt;link href=&quot;link-element-example.css&quot; rel=&quot;stylesheet&quot;&gt;</code><br>引入外部圖標文件<br><code>&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;&gt;</code></p></li><li><p>定義元數據信息<br><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p></li><li><p>css 樣式，一般稱為內嵌樣式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>可執行腳本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打印一個測試信息.&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><details green><summary> <p>meta</p> </summary>              <div class='content'>              <ul><li><p>為搜索引擎定義關鍵詞：<br><code>&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML, XHTML, JavaScript&quot;&gt;</code></p></li><li><p>為網頁定義描述內容：<br><code>&lt;meta name=&quot;description&quot; content=&quot;Free Web tutorials on HTML and CSS&quot;&gt;</code></p></li><li><p>定義網頁作者：<br><code>&lt;meta name=&quot;author&quot; content=&quot;KingJ&quot;&gt;</code></p></li><li><p>每 30 秒中刷新當前頁：<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;</code></p></li><li><p>HTML5 版本定義編碼格式：<br><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p></li><li><p>定義 HTML 頁面的視口：<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p></li></ul>              </div>            </details><h2 id="注釋"><a href="#注釋" class="headerlink" title="注釋"></a>注釋</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--我就是註解--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-概述"><a href="#CSS-概述" class="headerlink" title="CSS 概述"></a>CSS 概述</h1><p>CSS 是個縮寫形式，其全稱為 Cascading Style Sheets，翻譯成中文的含義為層疊樣式表。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="內聯樣式-我超討厭"><a href="#內聯樣式-我超討厭" class="headerlink" title="內聯樣式(我超討厭)"></a>內聯樣式(我超討厭)</h3><p><code>&lt;div style=&quot;color: lightcoral;&quot;&gt;這是測試內容.&lt;/div&gt;</code><br><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/832afe33ly1gai65evyayj21jj0fu75z.jpg"></p><table><thead><tr><th align="center">優點</th><th align="center">缺點</th></tr></thead><tbody><tr><td align="center">簡單、直接</td><td align="center">強耦合，不能實現網頁的內容和樣式的有效分離</td></tr><tr><td align="center"></td><td align="center">不同元素設置相同 css，導致冗餘代碼</td></tr></tbody></table><h3 id="內嵌樣式表-不推薦"><a href="#內嵌樣式表-不推薦" class="headerlink" title="內嵌樣式表(不推薦)"></a>內嵌樣式表(不推薦)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">    p &#123;</span><br><span class="line">        color: lightcoral;</span><br><span class="line">        font-size: 24px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">優點</th><th align="center">缺點</th></tr></thead><tbody><tr><td align="center">使網頁的內容和樣式有效的分離</td><td align="center">如果存在大量樣式，導致 HTML 文件很大</td></tr><tr><td align="center">為不同元素設置相同樣式，只需要定義一次代碼</td><td align="center"></td></tr></tbody></table><h3 id="外聯樣式表-推到爆"><a href="#外聯樣式表-推到爆" class="headerlink" title="外聯樣式表 (推到爆!!)"></a>外聯樣式表 (推到爆!!)</h3><p>引入外部 css 文件</p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style/demo.css&quot;&gt;</code></p><ul><li>rel 屬性：用來定義引入文件與當前 HTML 頁面的關系，該屬性值必須是<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types">鏈接類型值</a>。</li><li>href 屬性：用來定義引入文件的 URL。<br>一個 HTML 頁面允許引入多個 CSS 文件，多個 CSS 文件的加載順序按照 HTML 頁面引入的順序進行加載。</li></ul><p>加載過程</p><ol><li>加載 HTML 並解析</li><li>析到 <code>&lt;link&gt;</code> 元素引入的 CSS 文件，並通過 href 屬性讀取到 CSS 文件的路徑。</li><li>根據讀取的路徑，開始加載 CSS 文件並進行解析。</li></ol><h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/832afe33ly1gai6bk48yij21lx0v9n0e.jpg"></p><h2 id="注釋-1"><a href="#注釋-1" class="headerlink" title="注釋"></a>注釋</h2><p><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/832afe33ly1gai6d7bmy9j21jj0ikgnk.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 大前端計畫 </category>
          
          <category> 教學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 電腦社計畫 </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成樹</title>
      <link href="/2020/08/25/MST/"/>
      <url>/2020/08/25/MST/</url>
      
        <content type="html"><![CDATA[<h1 id="最小生成樹"><a href="#最小生成樹" class="headerlink" title="最小生成樹"></a>最小生成樹</h1><h2 id="生成樹"><a href="#生成樹" class="headerlink" title="生成樹"></a>生成樹</h2><p>生成樹條件:</p><ol><li>一棵包含圖上所有點的樹，稱作該圖的生成樹</li><li>一張圖的生成樹可能會有很多種</li><li>完全連通圖才有生成樹 (不連通時，則稱為生成森林)</li><li>生成樹的權重為樹上每條邊的權重總和</li></ol><p>至於<strong>最小生成樹</strong>就是權重和最小的生成樹<br>概念上就是這樣:<br><img src= "/img/loading.gif" data-lazy-src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Minimum_spanning_tree.svg/1024px-Minimum_spanning_tree.svg.png"></p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><ol><li>圖上每一個點，各自是一棵最小生成子樹MSS。</li><li>圖上所有邊，依照權重大小，由小到大排序。</li><li>嘗試圖上所有邊，作為最小生成樹（森林）的邊：<ol><li>兩端點分別位於兩棵MSS，也就是產生了橋：<ol><li>用這條邊連結兩棵MSS，合併成一棵MSS。</li><li>這條邊是最小生成樹（森林）上的邊。</li></ol></li><li>兩端點皆位於同一棵MSS，也就是產生了環：<ol><li>捨棄這條邊。</li></ol></li></ol></li></ol><p>-&gt;所以需要使用到<strong>並查集</strong>喔~~</p><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="c125-00534-Frogger"><a href="#c125-00534-Frogger" class="headerlink" title="c125: 00534 - Frogger"></a>c125: 00534 - Frogger</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給定一個無向圖，求最小生成樹</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>這是一題最小生成樹的模板題，刻個幾次就熟了</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s,e,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Tree a)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w&gt;w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[a] == a) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p[a] = Find(p[a]);</span><br><span class="line">        <span class="keyword">return</span> p[a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    Tree dot[m];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) p[i]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;dot[i].s&gt;&gt;dot[i].e&gt;&gt;dot[i].w;</span><br><span class="line">    sort(dot,dot+m);</span><br><span class="line">    ll ans=<span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,x,y;i&lt;m;i++) &#123;</span><br><span class="line">        x = Find(dot[i].e);</span><br><span class="line">        y = Find(dot[i].s);</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p[y] = x;</span><br><span class="line">            ans +=dot[i].w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt;n&gt;&gt;m)</span><br><span class="line">        Kruskal(n,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="b181-2-網路設計"><a href="#b181-2-網路設計" class="headerlink" title="b181: 2. 網路設計"></a>b181: 2. 網路設計</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>給你一個字串形式的端點及路徑長，求出其的最小生成樹<br>第一行輸出需要以字串形式輸出連結的狀況<br>第二行輸出權重</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>難的部分就是如何處理其為字串的問題，一開始就將輸入的端點用兩個map對應:字串對數字，數字對字串，每加入一個邊時就兩個端點加入map中，再開一個陣列紀錄圖形，最後再用使用map跟陣列做轉換就好了</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> A,B,w,num;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(str a)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w&gt;w|| (a.w==w &amp;&amp; a.num&gt;num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; Map ;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; reMap ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">100</span>] ;</span><br><span class="line">str E[<span class="number">100</span>] ;</span><br><span class="line"><span class="keyword">int</span> Ans[<span class="number">100</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x)<span class="keyword">return</span> x ;</span><br><span class="line">    <span class="keyword">return</span> root(fa[x]) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> E[a].A&lt;E[b].A || (E[a].A==E[b].A &amp;&amp; E[a].B&lt;E[b].B) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N ,M ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N ,&amp;M ))&#123;</span><br><span class="line">        Map.clear() ;</span><br><span class="line">        reMap.clear() ;</span><br><span class="line">        <span class="comment">//input -------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> A[<span class="number">30</span>],B[<span class="number">30</span>] ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;M ;i++ )&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>,&amp;A ,&amp;B ,&amp;E[i].w ) ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Map[ (<span class="built_in">string</span>)A ]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> c ;<span class="keyword">int</span> in ;</span><br><span class="line">                <span class="built_in">sscanf</span>(A,<span class="string">&quot;%c%d&quot;</span>,&amp;c ,&amp;in ) ;</span><br><span class="line">                Map[(<span class="built_in">string</span>)A]=in ;</span><br><span class="line">                reMap[in]=(<span class="built_in">string</span>)A ;</span><br><span class="line">            &#125;</span><br><span class="line">            E[i].A=Map[(<span class="built_in">string</span>)A] ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Map[ (<span class="built_in">string</span>)B ]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> c ;<span class="keyword">int</span> in ;</span><br><span class="line">                <span class="built_in">sscanf</span>(B,<span class="string">&quot;%c%d&quot;</span>,&amp;c ,&amp;in) ;</span><br><span class="line">                Map[(<span class="built_in">string</span>)B]=in ;</span><br><span class="line">                reMap[in]=(<span class="built_in">string</span>)B ;</span><br><span class="line">            &#125;</span><br><span class="line">            E[i].B=Map[(<span class="built_in">string</span>)B] ;</span><br><span class="line">            E[i].num=i ;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(E,E+M) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MST ---------------</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span> ;i&lt;=N ;i++ )fa[i]=i ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Ansl=<span class="number">0</span> ,count=<span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;M ;i++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> a=root( E[i].A ) ;</span><br><span class="line">            <span class="keyword">int</span> b=root( E[i].B ) ;</span><br><span class="line">            <span class="keyword">if</span> (a==b)<span class="keyword">continue</span> ;</span><br><span class="line"></span><br><span class="line">            fa[b]=a ;</span><br><span class="line">            Ans[Ansl++]=i ;</span><br><span class="line">            count+=E[i].w ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//output ------------</span></span><br><span class="line">        sort(Ans,Ans+Ansl,cmp) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;Ansl ;i++ )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; reMap[ E[ Ans[i] ].A ] &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; reMap[ E[ Ans[i] ].B ] &lt;&lt;<span class="string">&quot;) &quot;</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d\n&quot;</span>,count) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路徑-基礎</title>
      <link href="/2020/08/25/shortest-path/"/>
      <url>/2020/08/25/shortest-path/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路徑"><a href="#最短路徑" class="headerlink" title="最短路徑"></a>最短路徑</h1><p>BFS可以求得短的路徑長，只不過呢，他只能就權值一樣的最短路，也就是說，每條路都一樣長的狀況才能用。<br>現在，給你一張地圖，且這張圖有了每條邊的長度不盡相同，不能再用BFS的話，就要嘗試接下來的演算法囉</p><h1 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h1><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>Floyd-Warshall是尋找最短路徑的一種方式，算是超簡單有好用的一種，主要是處理<strong>全圖</strong>的最短(最長)路徑。<br>換句話說，用這個方法處理過一次就可以輕鬆取得任意兩點的距離了，甚至還可以處理負邊。<br>只不過…，他超慢就是了QQ</p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><p>作法也很簡單就是，<strong>抄捷徑</strong>而已，每次窮舉兩個點只要中間有一個點可以更符合題意的路徑，就更新為那個路徑。<br>如果是尋找最短路徑，式子大概長這樣 $dis[i][j] = min(dis[i][j],dis[i][k]+dis[k][j])$<br>相對的如果是尋找最長路徑的話，就會是$dis[i][j] = max(dis[i][j],dis[i][k]+dis[k][j]$<br>三層for迴圈就能輕鬆做到囉</p><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li><li class="tab"><button type="button" data-href="#例題-3">例題 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="d908-4-最佳路徑"><a href="#d908-4-最佳路徑" class="headerlink" title="d908: 4. 最佳路徑"></a>d908: 4. 最佳路徑</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你一個有向圖，輸出擁有最大權重總和的路徑之權重總和值。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>就是一題超基本的floyd-warshall而已</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> c;<span class="keyword">int</span> i, j;</span><br><span class="line">   <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;n)&#123;</span><br><span class="line">      <span class="keyword">int</span> w,m=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">char</span> a ,b;</span><br><span class="line">      <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class="line">            <span class="keyword">if</span>(w &gt; d[a-<span class="string">&#x27;A&#x27;</span>][b-<span class="string">&#x27;A&#x27;</span>]) d[a-<span class="string">&#x27;A&#x27;</span>][b-<span class="string">&#x27;A&#x27;</span>]=w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    <span class="keyword">if</span> ((d[i][k] * d[k][j] != <span class="number">0</span>) &amp;&amp; (i != j))</span><br><span class="line">                            d[i][j] = max(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)  m=max(m,d[c-<span class="string">&#x27;A&#x27;</span>][j]);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="a674-10048-Audiophobia"><a href="#a674-10048-Audiophobia" class="headerlink" title="a674: 10048 - Audiophobia"></a>a674: 10048 - Audiophobia</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>就是要你求A到B點途中的最小值</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一樣是窮舉兩點，找中間那點，只不過式子會變成這樣<br>$d[i][j] = d[j][i] = min(d[i][j],max(d[i][k],d[k][j]))$</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> c,s,q,idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;s&gt;&gt;q&amp;&amp;(c||s||q)&amp;&amp;++idx)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">26</span>;i++)d[i][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>,t;i&lt;s;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;t; d[x][y] = d[y][x] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k&lt;=<span class="number">100</span>;k++)<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)</span><br><span class="line">            d[i][j] = d[j][i] = min(d[i][j],max(d[i][k],d[k][j]));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case #&quot;</span>&lt;&lt;idx&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="keyword">if</span>(d[x][y]&gt;<span class="number">400000</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no path\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;d[x][y]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-3"><h2 id="c128-Heavy-Cargo"><a href="#c128-Heavy-Cargo" class="headerlink" title="c128: Heavy Cargo"></a>c128: Heavy Cargo</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>求A到B途中的最大值</p><h3 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h3><p>一樣是窮舉兩點，找中間那點，只不過式子會變成這樣<br>$d[i][j] = d[j][i] = max(d[i][j],min(d[i][k],d[k][j]))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> idx, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mp.count(str)) <span class="keyword">return</span> mp[str];</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        mp[str] = idx; idx++;</span><br><span class="line">        <span class="keyword">return</span> mp[str];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r&amp;&amp;++cnt)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        idx = <span class="number">0</span>; mp.clear();</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">-1</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">string</span> s1, s2;</span><br><span class="line">        <span class="keyword">int</span> temp, n1, n2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; temp;</span><br><span class="line">            n1 = getid(s1),n2 = getid(s2);</span><br><span class="line">            a[n1][n2] = a[n2][n1] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">        n1 = getid(s1); n2 = getid(s2);</span><br><span class="line">        <span class="comment">//Floyd-Warshall</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n<span class="number">-1</span>; j++)<span class="keyword">for</span> (<span class="keyword">int</span> k = j+<span class="number">1</span>; k &lt; n; k++)</span><br><span class="line">            a[j][k] = a[k][j] = max(a[j][k], min(a[j][i], a[i][k]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\n%d tons\n&quot;</span>, cnt, a[n1][n2]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><h2 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h2><p>是解決單源最短路問題(SSSP)問題的常用方式，<br>從一個指定的點開始向外拓張，連結的下一個點權重即為自己當前的權重加上路徑長<br>如果下一個點已經有標記權重了，就更新為比較小的那一個值，直到都跑完為止<br>其演示在此:<br><img src= "/img/loading.gif" data-lazy-src="https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif"></p><h2 id="作法-1"><a href="#作法-1" class="headerlink" title="作法"></a>作法</h2><ol><li>n-1次循環</li><li>找到偽標記的d最小點</li><li>標記，並鬆弛(更新)他的邊</li></ol><h2 id="heap優化"><a href="#heap優化" class="headerlink" title="heap優化"></a>heap優化</h2><p>用STL中的優先隊列(priority_queue)實現：</p><p>while(優先隊列非空){<br>  提出隊頭，鬆弛他的邊<br>  鬆弛了的&lt;新距離,點&gt;入隊<br>}</p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;PII,<span class="built_in">vector</span>&lt;PII&gt;,greater&lt;PII&gt; &gt; q;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;  </span><br><span class="line">    <span class="keyword">int</span> w=q.top().first, u=q.top().second;</span><br><span class="line">    q.pop();   </span><br><span class="line">    <span class="keyword">if</span>(b[u])<span class="keyword">continue</span>; b[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123; </span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[u]+e[i].w&lt;d[v])&#123;</span><br><span class="line">            d[v]=d[u]+e[i].w;</span><br><span class="line">            q.push(PII(d[v],v));  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例題-1"><a href="#例題-1" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="d793-acm-929-NumberMaze"><a href="#d793-acm-929-NumberMaze" class="headerlink" title="d793-acm-929-NumberMaze"></a>d793-acm-929-NumberMaze</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>數字迷宮為一個二維的數字 (0-9) 陣列。你可以用直角方向 (東、西、南、北) 在迷宮中尋訪。假設每一格的數字代表造訪該格的成本，那麼求出從入口走到出口所需的最小成本不見得很容易哦。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把這個二為陣列想像成一個無項圖，每個格子與四個方格連接。然後在實作Dijkstra就好了</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Map[MAX][MAX],dp[MAX][MAX],v[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> mv[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> x,y,dis;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; mynode) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mynode.dis &lt; dis);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ncase,n,m;</span><br><span class="line">    <span class="built_in">priority_queue</span> &lt;Node&gt; pq;</span><br><span class="line">    Node mynode;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ncase;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;ncase;m++)&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)  dp[i][j]=<span class="number">199999999</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)  <span class="built_in">cin</span> &gt;&gt; Map[i][j];</span><br><span class="line">        mynode.x=<span class="number">0</span>,mynode.y=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=mynode.dis=Map[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        pq.push(mynode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            mynode=pq.top(); pq.pop();</span><br><span class="line">            v[mynode.y][mynode.x]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                Node tmp;</span><br><span class="line">                <span class="keyword">int</span> nowx = mynode.x+mv[i][<span class="number">0</span>],nowy = mynode.y+mv[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ((nowx&lt;<span class="number">0</span>)||(nowx&gt;=m)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> ((nowy&lt;<span class="number">0</span>)||(nowy&gt;=n)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (v[nowy][nowx]==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[nowy][nowx]&gt;(dp[nowy][nowx]+Map[nowy][nowx])) &#123;</span><br><span class="line">                        dp[nowy][nowx]=dp[mynode.y][mynode.x]+Map[nowy][nowx];</span><br><span class="line">                        tmp.x=nowx,tmp.y=nowy;</span><br><span class="line">                        tmp.dis=dp[nowy][nowx];</span><br><span class="line">                        pq.push(tmp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; dp[n<span class="number">-1</span>][m<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><h3 id="想法-2"><a href="#想法-2" class="headerlink" title="想法"></a>想法</h3><p>一樣是求單源最短路問題(SSSP)的方法，是Bellman-Ford的優化，Bellman-Ford:每次對所有的邊鬆弛。可以計算出有負邊無負環的最短路，並且可以判斷是否存在負環。</p><h3 id="作法-2"><a href="#作法-2" class="headerlink" title="作法"></a>作法</h3><p>起點push到queue裡面</p><p>while(優先隊列非空){<br>  提出隊頭，鬆弛他的邊<br>  把所有被更新到的點都push到queue裡面<br>}</p><h3 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">    <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">    b[u]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[u]+e[i].w&lt;d[v])&#123;</span><br><span class="line">            d[v]=d[u]+e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(!b[v])b[v]=<span class="literal">true</span>,q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例題-2"><a href="#例題-2" class="headerlink" title="例題"></a>例題</h3><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="c125-00534-Frogger"><a href="#c125-00534-Frogger" class="headerlink" title="c125: 00534 - Frogger"></a>c125: 00534 - Frogger</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你Freddy所在的石頭、Fiona所在的石頭，以及湖中所有其他石頭的座標，你的任務是算出介於Freddy和Fiona所在石頭間的蛙跳距離。</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>明顯是一個基本的SSSP問題，所以直接運用SPFA的方式解決吧!<br>從起點到終點的每條路都有一個石頭間最大距離，<br>在每條路的石頭間最大距離中，找最小值。<br>(也可以使用 Dijkstra解決喔~~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 201</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Coord</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getDistance</span><span class="params">(Coord&amp; a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - a.x)*(x - a.x) + (y - a.y)*(y - a.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;stone[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, Case = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="comment">//第 0 和 1 分別為起點和終點</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;stone[i].x, &amp;stone[i].y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\nFrog Distance = %.3f\n\n&quot;</span>, Case++, SPFA(n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> d[N] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">bool</span> inQ[<span class="number">101</span>] = &#123;&#125;;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)  d[i] = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line">    Q.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = Q.front(), Q.pop();</span><br><span class="line">        inQ[idx] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> max = max(d[idx], stone[idx].getDistance(stone[i]));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (max &lt; d[i]) &#123;</span><br><span class="line">                d[i] = max;</span><br><span class="line">                <span class="keyword">if</span> (!inQ[i]) Q.push(i), inQ[i] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="附註"><a href="#附註" class="headerlink" title="附註"></a>附註</h3><p>如果是稠密圖，Dijkstra+heap比SPFA快。<br>稀疏圖則SPFA更快。 SPFA可以有SLF和LLL兩種優化，SLF就是d比隊頭小就插入隊頭，否則插入隊尾。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演算法 </tag>
            
            <tag> 圖論基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS</title>
      <link href="/2020/08/25/BFS/"/>
      <url>/2020/08/25/BFS/</url>
      
        <content type="html"><![CDATA[<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>BFS<strong>廣度</strong>優先走訪，顧名思義，在我們尋找解答時，就像是在RPG上解任務一樣，將每個<strong>相同等級 層數</strong>的任務做完，並將其開通的<strong>子任務 子節點</strong>都記錄下來，等做完同等級的之後，在往下把下一個等級的任務解掉，直到所有任務都做完。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>運用迴圈的方式，從第一個點開始將鄰近的點加入佇列內部，等到點都加入完後，就往下推找佇列中的下個點，直到佇列的每個點都被探詢過。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>用於尋找<strong>兩個節點之間的最短路徑</strong>、查找各點之間<strong>所有相鄰的點</strong>，以及測試圖是<strong>否為二分圖</strong>等。</p><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="a982-迷宮問題-1"><a href="#a982-迷宮問題-1" class="headerlink" title="a982: 迷宮問題#1"></a>a982: 迷宮問題#1</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你一個NXN格的迷宮, 迷宮中以#代表障礙物, 以.代表路, 求包括起點和終點, 最少路徑的長度。</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Maze[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//紀錄最少步數</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point k,next;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N) &#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;point&gt; qu;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;N&amp;&amp;getchar();y++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;N;x++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;Maze[y][x]);</span><br><span class="line">                Maze[y][x]=(Maze[y][x]==<span class="string">&#x27;.&#x27;</span>?<span class="number">-1</span>:<span class="number">-2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        k.x=<span class="number">1</span>,k.y=<span class="number">1</span>;</span><br><span class="line">        qu.push(k);</span><br><span class="line">        Maze[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty()) &#123;</span><br><span class="line">            k = qu.front();qu.pop();</span><br><span class="line">            next.x=k.x<span class="number">-1</span>,next.y=k.y;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">            next.x=k.x+<span class="number">1</span>,next.y=k.y;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">            next.x=k.x,next.y=k.y<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">            next.x=k.x,next.y=k.y+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Maze[N<span class="number">-2</span>][N<span class="number">-2</span>]&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Maze[N<span class="number">-2</span>][N<span class="number">-2</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No solution!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="d663-d663-11730-Number-Transformation"><a href="#d663-d663-11730-Number-Transformation" class="headerlink" title="d663: d663: 11730 - Number Transformation"></a>d663: d663: 11730 - Number Transformation</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你一個數字S，你可以將A轉換成B藉由加上一個X，X是一個A的質因數(1跟A不考慮進去)，現在你的工作就是找出最少需要轉換次數把S轉換成T</p><h3 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h3><p>使用BFS將所有S+X的狀況都加到佇列內部，並記錄下次數，直到找到T為止，記得，如果有記錄過S+X狀況的話，就不需要再紀錄一次!!</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> primes[<span class="number">1050</span>], pointer, S, T, minn, cases, buffer1, buffer2;</span><br><span class="line"><span class="keyword">bool</span> notprime[<span class="number">1050</span>] = &#123; <span class="literal">true</span>, <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">1050</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!notprime[i])</span><br><span class="line">primes[pointer++] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i * primes[j] &lt; <span class="number">1050</span> &amp;&amp; j &lt; pointer; j++)</span><br><span class="line">notprime[i * primes[j]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>); Initialize();</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; BFS, times;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; S &gt;&gt; T, S || T) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; ++cases &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (S == T) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">bool</span> have[<span class="number">1001</span>] = &#123;&#125;;</span><br><span class="line">BFS.push(S), times.push(<span class="number">1</span>), have[S] = <span class="literal">true</span>, minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">while</span> (!BFS.empty()) &#123;</span><br><span class="line">buffer1 = BFS.front(), buffer2 = <span class="built_in">sqrt</span>(buffer1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; primes[i] &lt; buffer1; i++)</span><br><span class="line"><span class="keyword">if</span> (!(buffer1 % primes[i])) &#123;</span><br><span class="line">buffer2 = buffer1 + primes[i];</span><br><span class="line"><span class="keyword">if</span> (buffer2 &lt; T &amp;&amp; !have[buffer2])</span><br><span class="line">BFS.push(buffer2), times.push(times.front() + <span class="number">1</span>), have[buffer2] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buffer2 == T &amp;&amp; times.front() &lt; minn)</span><br><span class="line">minn = times.front();</span><br><span class="line">&#125;</span><br><span class="line">BFS.pop(), times.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minn == <span class="number">2147483647</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">cout</span> &lt;&lt; minn &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><a class="btn-beautify button--animated blue larger center" href="https://zrn-code.github.io/tags/BFS/"   title="其他題目"><i class="far fa-hand-point-right fa-fw"></i><span>其他題目</span></a>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基礎圖論 </tag>
            
            <tag> 筆記 </tag>
            
            <tag> 演算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常見STL演算法大集合</title>
      <link href="/2020/08/23/algorithm/"/>
      <url>/2020/08/23/algorithm/</url>
      
        <content type="html"><![CDATA[<div class="note success">            <p>以下呈現的<code>序列(Sequence)</code>主要以<code>vector</code>和<code>array</code><br>當然也可以用在<code>list</code>、<code>deque</code>跟<code>forward list</code>喔~~</p>          </div><details green><summary> <p>範例程式碼中的print()函式</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;tmp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : tmp)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>亦可用代替</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;tmp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;tmp.size();i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; tmp[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="STL演算法"><a href="#STL演算法" class="headerlink" title="STL演算法"></a>STL演算法</h1><p>STL內部定義了一組專門設計給元素範圍的函式</p><h2 id="標頭檔"><a href="#標頭檔" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="非修改序列演算法-判斷-尋找"><a href="#非修改序列演算法-判斷-尋找" class="headerlink" title="非修改序列演算法(判斷/尋找)"></a>非修改序列演算法(判斷/尋找)</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h2><p>用來尋找<strong>指定範圍</strong>內，<strong>某值的位置</strong>。<br>假設return的值是<strong>範圍的後一格代表沒有找到</strong>其值</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line">    p = find (myints, myints+<span class="number">4</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != myints+<span class="number">4</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Element found in myints: &quot;</span> &lt;&lt; *p &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Element not found in myints\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(myints,myints+<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    it = find (myvector.begin(), myvector.end(), <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != myvector.end())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Element found in myvector: &quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Element not found in myvector\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element found is myints: 30</span><br><span class="line">Element found in mycector: 30</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a><code>find_if</code></h2><p>跟<code>find</code>很像，但是其為<strong>尋找符合條件值的位置</strong></p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;       </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsOdd</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (i % <span class="number">2</span> == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">    myvector.push_back(<span class="number">10</span>);</span><br><span class="line">    myvector.push_back(<span class="number">25</span>);</span><br><span class="line">    myvector.push_back(<span class="number">40</span>);</span><br><span class="line">    myvector.push_back(<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find_if (myvector.begin(), myvector.end(), IsOdd);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The first odd value is &quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The first odd value is 25</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="count"><a href="#count" class="headerlink" title="count"></a><code>count</code></h2><p>用於計算範圍內某值出現的次數</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;       </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;:</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;   <span class="comment">// 8 elements</span></span><br><span class="line">    <span class="keyword">int</span> mycount = count (myints, myints+<span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;10 appears &quot;</span> &lt;&lt; mycount &lt;&lt; <span class="string">&quot; times.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(myints, myints+<span class="number">8</span>)</span></span>;</span><br><span class="line">    mycount = count (myvector.begin(), myvector.end(), <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;20 appears &quot;</span> &lt;&lt; mycount  &lt;&lt; <span class="string">&quot; times.\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 appears 3 times.</span><br><span class="line">20 appears 3 times.</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a><code>count_if</code></h2><p>用於計算範圍內符合條件的元素數量</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsOdd</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> ((i%<span class="number">2</span>)==<span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) myvector.push_back(i); </span><br><span class="line">    <span class="comment">// myvector: 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">    <span class="keyword">int</span> mycount = count_if (myvector.begin(), myvector.end(), IsOdd);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myvector contains &quot;</span> &lt;&lt; mycount  &lt;&lt; <span class="string">&quot; odd values.\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains <span class="number">5</span> odd values.</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="search"><a href="#search" class="headerlink" title="search"></a><code>search</code></h2><p>用於尋找<strong>兩個指定序列完全相同的位置</strong>(首部位置)。</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mypredicate</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;<span class="keyword">return</span> (i==j);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="comment">// set some values:      myvector: 10 20 30 40 50 60 70 80 90</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) myvector.push_back(i*<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> needle1[] = &#123;<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    it = search (myvector.begin(), myvector.end(), needle1, needle1+<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it!=myvector.end())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;the first &#123;40 , 50 , 60 , 70&#125; found at position &quot;</span> &lt;&lt; (it-myvector.begin()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#123;40 , 50 , 60 , 70&#125; not found\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用自訂的函式</span></span><br><span class="line">    <span class="keyword">int</span> needle2[] = &#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">50</span>&#125;;</span><br><span class="line">    it = search (myvector.begin(), myvector.end(), needle2, needle2+<span class="number">3</span>, mypredicate);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it!=myvector.end())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;the first &#123;20 , 30 , 50&#125; found at position &quot;</span> &lt;&lt; (it-myvector.begin()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#123;20 , 30 , 50&#125; not found\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">the first &#123;40 , 50 , 60 , 70&#125; found at position 3</span><br><span class="line">&#123;20 , 30 , 50&#125; not found</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="search-n"><a href="#search-n" class="headerlink" title="search_n"></a><code>search_n</code></h2><p>尋找連續出現n個指定值的那段序列的首位置</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mypredicate</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> (i==j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(myints,myints+<span class="number">8</span>)</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    it = search_n (myvector.begin(), myvector.end(), <span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span> (it!=myvector.end())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#123;30,30&#125; found at position &quot;</span> &lt;&lt; (it-myvector.begin()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;match not found\n&quot;</span>;</span><br><span class="line">    <span class="comment">//自訂比較函式</span></span><br><span class="line">    it = search_n (myvector.begin(), myvector.end(), <span class="number">2</span>, <span class="number">10</span>, mypredicate);</span><br><span class="line">    <span class="keyword">if</span> (it!=myvector.end())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#123;10,10&#125; found at position &quot;</span> &lt;&lt; <span class="keyword">int</span>(it-myvector.begin()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;match not found\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;30,30&#125; found at position 2</span><br><span class="line">&#123;10,10&#125; found at position 5</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="修改序列演算法"><a href="#修改序列演算法" class="headerlink" title="修改序列演算法"></a>修改序列演算法</h1><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a><code>copy</code></h2><p>就是把A複製到B上面去</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    copy ( myints, myints+<span class="number">7</span>, myvector.begin() );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myvector contains:&quot;</span>;</span><br><span class="line">    print(myvector);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 10 20 30 40 50 60 70</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a><code>swap</code></h2><p>就是交換兩個數值或序列用的</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;   </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">10</span>, y=<span class="number">20</span>;                      <span class="comment">// x:10 y:20</span></span><br><span class="line">    swap(x,y);                           <span class="comment">// x:20 y:10</span></span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; foo (4,x), bar (6,y);    // foo:4x20 bar:6x10</span><br><span class="line">    swap(foo,bar);                       <span class="comment">// foo:6x10 bar:4x20</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;foo contains:&quot;</span>;</span><br><span class="line">    print(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo contains: 10 10 10 10 10 10</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a><code>transform</code></h2><p>讓A序列做上一定的變化後到B序列上，<strong>A序列不變</strong></p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;   // std::plus</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">op_increase</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> ++i; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; foo;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++)foo.push_back (i*<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// foo: 10 20 30 40 50</span></span><br><span class="line">    bar.resize(foo.size());           <span class="comment">// 使bar.size()一致</span></span><br><span class="line"></span><br><span class="line">    transform (foo.begin(), foo.end(), bar.begin(), op_increase);</span><br><span class="line">    <span class="comment">//foo: 10 20 30 40 50              // bar: 11 21 31 41 51</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// plus功能 能使兩個序列加到另一個上去</span></span><br><span class="line">    transform (foo.begin(), foo.end(), bar.begin(), foo.begin(), plus&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="comment">// foo: 21 41 61 81 101           // bar: 11 21 31 41 51</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;foo contains:&quot;</span>;</span><br><span class="line">    print(foo);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;bar contains:&quot;</span>;</span><br><span class="line">    print(bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo contains: 21 41 61 81 101</span><br><span class="line">bar contains: 11 21 31 41 51</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a><code>replace</code></h2><p>取代範圍中的A全部轉為B</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span> &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(myints, myints+<span class="number">8</span>)</span></span>; </span><br><span class="line">    <span class="comment">// 10 20 30 30 20 10 10 20</span></span><br><span class="line"></span><br><span class="line">    replace (myvector.begin(), myvector.end(), <span class="number">20</span>, <span class="number">99</span>); </span><br><span class="line">    <span class="comment">// 10 99 30 30 99 10 10 99</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myvector contains:&quot;</span>;</span><br><span class="line">    print(myvector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 10 99 30 30 99 10 10 99</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a><code>fill</code></h2><p>將指定範圍的所有值都填充為其他值</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;      </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(<span class="number">8</span>)</span></span>;                       <span class="comment">// myvector: 0 0 0 0 0 0 0 0</span></span><br><span class="line"></span><br><span class="line">    fill (myvector.begin(),myvector.begin()+<span class="number">4</span>,<span class="number">5</span>);   <span class="comment">// myvector: 5 5 5 5 0 0 0 0</span></span><br><span class="line">    fill (myvector.begin()+<span class="number">3</span>,myvector.end()<span class="number">-2</span>,<span class="number">8</span>);   <span class="comment">// myvector: 5 5 5 8 8 8 0 0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myvector contains:&quot;</span>;</span><br><span class="line">    print(myvector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 5 5 5 8 8 8 0 0</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a><code>remove</code></h2><p>跟<code>erase()</code>有一點不同，<code>remove()</code>只會移除值，並回傳新的<code>end指標</code>，其會停在移除完後序列的後一格位置，移除後的序列大小不變，所以後面會隨機填充。</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">20</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;myvector(myints,myints+<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">     <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator vbegin = myvector.begin();</span><br><span class="line">     <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator vend = myvector.end();</span><br><span class="line"></span><br><span class="line">    vend = remove (vbegin, vend, <span class="number">20</span>);    <span class="comment">// 10 30 10 ? ?</span></span><br><span class="line">                                         <span class="comment">// ^        ^</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;range contains:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(;vbegin!=vend;vbegin++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*vbegin;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range contains: 10 30 10</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="remove-if"><a href="#remove-if" class="headerlink" title="remove_if"></a><code>remove_if</code></h2><p>跟remove一樣，只是條件版本</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsOdd</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> ((i%<span class="number">2</span>)==<span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;            <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* pbegin = myints; </span><br><span class="line">    <span class="keyword">int</span>* pend = myints + <span class="keyword">sizeof</span>(myints)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">    pend = remove_if (pbegin, pend, IsOdd);   <span class="comment">// 2 4 6 8 ? ? ? ? ?</span></span><br><span class="line">                                              <span class="comment">// ^       ^</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;the range contains:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>* p=pbegin; p!=pend; ++p)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *p;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the range contains: 2 4 6 8</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a><code>reverse</code></h2><p>將序列由大到小排列</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;   </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; ++i) myvector.push_back(i);   <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">    reverse(myvector.begin(),myvector.end());    <span class="comment">// 9 8 7 6 5 4 3 2 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// print out content:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myvector contains:&quot;</span>;</span><br><span class="line">    print(myvector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 9 8 7 6 5 4 3 2 1</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a><code>rotate</code></h2><p>將序列的前段移動到後段的後面去</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;    </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some values:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; ++i) myvector.push_back(i); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">  rotate(myvector.begin(),myvector.begin()+<span class="number">3</span>,myvector.end());</span><br><span class="line">                                                  <span class="comment">// 4 5 6 7 8 9 1 2 3</span></span><br><span class="line">  <span class="comment">// print out content:</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myvector contains:&quot;</span>;</span><br><span class="line">  print(myvector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 4 5 6 7 8 9 1 2 3</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="排序演算法"><a href="#排序演算法" class="headerlink" title="排序演算法"></a>排序演算法</h1><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a><code>sort</code></h2><p>就是一個很常用的排序功能</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myfunction</span> <span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> (i&lt;j); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myclass</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> (i&lt;j);&#125;</span><br><span class="line">&#125; myobject;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">32</span>,<span class="number">71</span>,<span class="number">12</span>,<span class="number">45</span>,<span class="number">26</span>,<span class="number">80</span>,<span class="number">53</span>,<span class="number">33</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myvector</span> <span class="params">(myints, myints+<span class="number">8</span>)</span></span>;               <span class="comment">// 32 71 12 45 26 80 53 33</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  使用預設比較函式 (operator &lt;):</span></span><br><span class="line">    sort (myvector.begin(), myvector.begin()+<span class="number">4</span>);           <span class="comment">//(12 32 45 71)26 80 53 33</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用自訂函式排序</span></span><br><span class="line">    sort (myvector.begin()+<span class="number">4</span>, myvector.end(), myfunction); <span class="comment">// 12 32 45 71(26 33 53 80)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用物件operator()排序</span></span><br><span class="line">    sort (myvector.begin(), myvector.end(), myobject);     <span class="comment">//(12 26 32 33 45 53 71 80)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// print out content:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myvector contains:&quot;</span>;</span><br><span class="line">    print(myvector);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 12 26 32 33 45 53 71 80</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="二分搜演算法"><a href="#二分搜演算法" class="headerlink" title="二分搜演算法"></a>二分搜演算法</h1><h2 id="lower-bound-amp-amp-upper-bound"><a href="#lower-bound-amp-amp-upper-bound" class="headerlink" title="lower_bound &amp;&amp; upper_bound"></a><code>lower_bound</code> &amp;&amp; <code>upper_bound</code></h2><p>找出第一個<strong>等於</strong>或<strong>大於</strong>特定值的位置<br>找出第一個<strong>大於</strong>特定值的位置</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">8</span>)</span></span>;           <span class="comment">// 10 20 30 30 20 10 10 20</span></span><br><span class="line"></span><br><span class="line">    sort (v.begin(), v.end());                <span class="comment">// 10 10 10 20 20 20 30 30</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator low,up;</span><br><span class="line">    low= lower_bound (v.begin(), v.end(), <span class="number">20</span>); <span class="comment">//          ^</span></span><br><span class="line">    up=  upper_bound (v.begin(), v.end(), <span class="number">20</span>); <span class="comment">//                   ^</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;lower_bound at position &quot;</span> &lt;&lt; (low- v.begin()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;upper_bound at position &quot;</span> &lt;&lt; (up - v.begin()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lower_bound at position 3</span><br><span class="line">upper_bound at position 6</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a><code>binary_search</code></h2><p>使用二分搜的方法，可以尋找一個值是否出現過，記得需要先排序過</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myfunction</span> <span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> (i&lt;j); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">9</span>)</span></span>;                         <span class="comment">// 1 2 3 4 5 4 3 2 1</span></span><br><span class="line"></span><br><span class="line">    sort (v.begin(), v.end());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;looking for a 3... &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (binary_search (v.begin(), v.end(), <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;found!\n&quot;</span>; <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not found.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    sort (v.begin(), v.end(), myfunction);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;looking for a 6... &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (binary_search (v.begin(), v.end(), <span class="number">6</span>, myfunction))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;found!\n&quot;</span>; <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not found.\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">looking for a 3... found!</span><br><span class="line">looking for a 6... not found.</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="合併演算法"><a href="#合併演算法" class="headerlink" title="合併演算法"></a>合併演算法</h1><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a><code>merge</code></h2><p>將A跟B序列結合在C序列上</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;     </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first[] = &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> second[] = &#123;<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    sort (first,first+<span class="number">5</span>);</span><br><span class="line">    sort (second,second+<span class="number">5</span>);</span><br><span class="line">    merge (first,first+<span class="number">5</span>,second,second+<span class="number">5</span>,v.begin());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The resulting vector contains:&quot;</span>;</span><br><span class="line">    print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The resulting vector contains: 5 10 10 15 20 20 25 30 40 50</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="集合-set-演算法"><a href="#集合-set-演算法" class="headerlink" title="集合(set)演算法"></a>集合(set)演算法</h1><p>總共有四種關係: <strong>聯集</strong>、<strong>交集</strong>、<strong>差集</strong>以及<strong>對稱差</strong></p><details ><summary> <p>查看關係圖片</p> </summary>              <div class='content'>              <div class="gallery ">              <p><img src= "/img/loading.gif" data-lazy-src="https://www.learnbyexample.org/wp-content/uploads/python/Python-Set-Operatioons.png" alt="set關係"></p>            </div>              </div>            </details><h2 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a><code>set_union</code></h2><p>將A和B兩個集合的<strong>聯集</strong>複製到C序列上</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first[] = &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> second[] = &#123;<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;                <span class="comment">// 0  0  0  0  0  0  0  0  0  0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    sort (first,first+<span class="number">5</span>);             <span class="comment">//  5 10 15 20 25</span></span><br><span class="line">    sort (second,second+<span class="number">5</span>);           <span class="comment">// 10 20 30 40 50</span></span><br><span class="line"></span><br><span class="line">    it=set_union (first, first+<span class="number">5</span>, second, second+<span class="number">5</span>, v.begin());</span><br><span class="line">                                        <span class="comment">// 5 10 15 20 25 30 40 50  0  0</span></span><br><span class="line">    v.resize(it-v.begin());           <span class="comment">// 5 10 15 20 25 30 40 50</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The union has &quot;</span> &lt;&lt; (v.size()) &lt;&lt; <span class="string">&quot; elements:\n&quot;</span>;</span><br><span class="line">    print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The union has 8 elements:</span><br><span class="line"> 5 10 15 20 25 30 40 50</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a><code>set_intersection</code></h2><p>將A和B兩個集合的<strong>交集</strong>複製到C序列上</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first[] = &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> second[] = &#123;<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;                <span class="comment">// 0  0  0  0  0  0  0  0  0  0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    sort (first,first+<span class="number">5</span>);             <span class="comment">//  5 10 15 20 25</span></span><br><span class="line">    sort (second,second+<span class="number">5</span>);           <span class="comment">// 10 20 30 40 50</span></span><br><span class="line"></span><br><span class="line">    it=set_intersection (first, first+<span class="number">5</span>, second, second+<span class="number">5</span>, v.begin());</span><br><span class="line">                                        <span class="comment">// 5 10 15 20 25 30 40 50  0  0</span></span><br><span class="line">    v.resize(it-v.begin());           <span class="comment">// 5 10 15 20 25 30 40 50</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The intersection has &quot;</span> &lt;&lt; (v.size()) &lt;&lt; <span class="string">&quot; elements:\n&quot;</span>;</span><br><span class="line">    print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The intersection has 2 elements:</span><br><span class="line"> 10 20</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a><code>set_difference</code></h2><p>將A和B兩個集合的<strong>差集</strong>複製到C序列上</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first[] = &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> second[] = &#123;<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;                <span class="comment">// 0  0  0  0  0  0  0  0  0  0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    sort (first,first+<span class="number">5</span>);             <span class="comment">//  5 10 15 20 25</span></span><br><span class="line">    sort (second,second+<span class="number">5</span>);           <span class="comment">// 10 20 30 40 50</span></span><br><span class="line"></span><br><span class="line">    it=set_difference (first, first+<span class="number">5</span>, second, second+<span class="number">5</span>, v.begin());</span><br><span class="line">                                        <span class="comment">// 5 10 15 20 25 30 40 50  0  0</span></span><br><span class="line">    v.resize(it-v.begin());           <span class="comment">// 5 10 15 20 25 30 40 50</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The difference has &quot;</span> &lt;&lt; (v.size()) &lt;&lt; <span class="string">&quot; elements:\n&quot;</span>;</span><br><span class="line">    print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The difference has 3 elements:</span><br><span class="line"> 5 15 25</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="set-symmetric-difference"><a href="#set-symmetric-difference" class="headerlink" title="set_symmetric_difference"></a><code>set_symmetric_difference</code></h2><p>將A和B兩個集合的<strong>對稱差</strong>複製到C序列上</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first[] = &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> second[] = &#123;<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;                <span class="comment">// 0  0  0  0  0  0  0  0  0  0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    sort (first,first+<span class="number">5</span>);             <span class="comment">//  5 10 15 20 25</span></span><br><span class="line">    sort (second,second+<span class="number">5</span>);           <span class="comment">// 10 20 30 40 50</span></span><br><span class="line"></span><br><span class="line">    it=set_symmetric_difference (first, first+<span class="number">5</span>, second, second+<span class="number">5</span>, v.begin());</span><br><span class="line">                                        <span class="comment">// 5 10 15 20 25 30 40 50  0  0</span></span><br><span class="line">    v.resize(it-v.begin());           <span class="comment">// 5 10 15 20 25 30 40 50</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The symmetric difference has &quot;</span> &lt;&lt; (v.size()) &lt;&lt; <span class="string">&quot; elements:\n&quot;</span>;</span><br><span class="line">    print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The symmetric difference has 6 elements:</span><br><span class="line"> 5 15 25 30 40 50</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="堆演算法"><a href="#堆演算法" class="headerlink" title="堆演算法"></a>堆演算法</h1><h2 id="make-heap"><a href="#make-heap" class="headerlink" title="make_heap"></a><code>make_heap</code></h2><p>使用<code>make_heap</code>，可以使序列的最大值排在最前面</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">5</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    make_heap (v.begin(),v.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;initial max heap   : &quot;</span> &lt;&lt; v.front() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;vector now contains:&quot;</span>;  print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">initial max heap  : 30</span><br><span class="line">vector now contains: 30 20 10 5 15</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="pop-heap"><a href="#pop-heap" class="headerlink" title="pop_heap"></a><code>pop_heap</code></h2><p>將<strong>最大值移動到序列的最尾部</strong>，可以再用pop_back()刪掉</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">5</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    make_heap (v.begin(),v.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;initial max heap   : &quot;</span> &lt;&lt; v.front() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    pop_heap (v.begin(),v.end()); v.pop_back();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max heap after pop : &quot;</span> &lt;&lt; v.front() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;vector now contains:&quot;</span>;  print(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">initial max heap   : 30</span><br><span class="line">max heap after pop : 20</span><br><span class="line">vector now contains: 20 15 10 5</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="push-heap"><a href="#push-heap" class="headerlink" title="push_heap"></a><code>push_heap</code></h2><p>將最大值排回到最前面</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">20</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    make_heap (v.begin(),v.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;initial max heap   : &quot;</span> &lt;&lt; v.front() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    v.push_back(<span class="number">99</span>); push_heap (v.begin(),v.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max heap after push: &quot;</span> &lt;&lt; v.front() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;vector now contains:&quot;</span>;    print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">initial max heap   : 20</span><br><span class="line">max heap after push: 99</span><br><span class="line">vector now contains: 99 20 10 5 15</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="sort-heap"><a href="#sort-heap" class="headerlink" title="sort_heap"></a><code>sort_heap</code></h2><p>就是運用建構好的<code>heap</code>排序</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">99</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    make_heap (v.begin(),v.end());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;before sorted range : &quot;</span>;print(v);</span><br><span class="line"></span><br><span class="line">    sort_heap(v.begin(),v.end());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;final  sorted range : &quot;</span>;   print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before sorted range :  99 20 10 5 15</span><br><span class="line">final  sorted range :  5 10 15 20 99</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="最大-小值"><a href="#最大-小值" class="headerlink" title="最大/小值"></a>最大/小值</h1><h2 id="min-amp-amp-max"><a href="#min-amp-amp-max" class="headerlink" title="min &amp;&amp; max"></a><code>min</code> &amp;&amp; <code>max</code></h2><p>就是求比較小或比較小時用的函式</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;min(1,2)==&quot;</span> &lt;&lt; min(<span class="number">1</span>,<span class="number">2</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max(2,1)==&quot;</span> &lt;&lt; max(<span class="number">2</span>,<span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;min(&#x27;a&#x27;,&#x27;z&#x27;)==&quot;</span> &lt;&lt; min(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max(3.14,2.72)==&quot;</span> &lt;&lt; max(<span class="number">3.14</span>,<span class="number">2.72</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">min(1,2)&#x3D;&#x3D;1</span><br><span class="line">max(2,1)&#x3D;&#x3D;2</span><br><span class="line">min(&#39;a&#39;,&#39;z&#39;)&#x3D;&#x3D;a</span><br><span class="line">max(3.14,2.72)&#x3D;&#x3D;3.14</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="min-element-amp-amp-max-element"><a href="#min-element-amp-amp-max-element" class="headerlink" title="min_element &amp;&amp; max_element"></a><code>min_element</code> &amp;&amp; <code>max_element</code></h2><p>求指定序列的最大值或最小值</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myfn</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i&lt;j; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myclass</span> &#123;</span></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i&lt;j; &#125;</span><br><span class="line">&#125; myobj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用預設比較函式:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The smallest element is &quot;</span> &lt;&lt; *min_element(myints,myints+<span class="number">7</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The largest element is &quot;</span>  &lt;&lt; *max_element(myints,myints+<span class="number">7</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用自訂函式:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The smallest element is &quot;</span> &lt;&lt; *min_element(myints,myints+<span class="number">7</span>,myfn) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The largest element is &quot;</span>  &lt;&lt; *max_element(myints,myints+<span class="number">7</span>,myfn) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用operator比較:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The smallest element is &quot;</span> &lt;&lt; *min_element(myints,myints+<span class="number">7</span>,myobj) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The largest element is &quot;</span>  &lt;&lt; *max_element(myints,myints+<span class="number">7</span>,myobj) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The smallest element is 2</span><br><span class="line">The largest element is 9</span><br><span class="line">The smallest element is 2</span><br><span class="line">The largest element is 9</span><br><span class="line">The smallest element is 2</span><br><span class="line">The largest element is 9</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a><code>next_permutation</code></h2><p>求當前排列的下一個排列</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    sort (myints,myints+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The 3! possible permutations with 3 elements:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; myints[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( next_permutation(myints,myints+<span class="number">3</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;After loop: &quot;</span> &lt;&lt; myints[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The 3! possible permutations with 3 elements:</span><br><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br><span class="line">After loop: 1 2 3</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="prev-permutation"><a href="#prev-permutation" class="headerlink" title="prev_permutation"></a><code>prev_permutation</code></h2><p>求當前序列的上一個排列</p><details green><summary> <p>查看範例程式碼</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> myints[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">  sort (myints,myints+<span class="number">3</span>);</span><br><span class="line">  reverse (myints,myints+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The 3! possible permutations with 3 elements:\n&quot;</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; myints[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( prev_permutation(myints,myints+<span class="number">3</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;After loop: &quot;</span> &lt;&lt; myints[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; myints[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The 3! possible permutations with 3 elements:</span><br><span class="line">3 2 1</span><br><span class="line">3 1 2</span><br><span class="line">2 3 1</span><br><span class="line">2 1 3</span><br><span class="line">1 3 2</span><br><span class="line">1 2 3</span><br><span class="line">After loop: 3 2 1</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map的使用(新)</title>
      <link href="/2020/08/21/map2/"/>
      <url>/2020/08/21/map2/</url>
      
        <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>就是一個對應表的概念，一對一的形式，跨越型態的限制</p><h2 id="標頭檔"><a href="#標頭檔" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="構造器-amp-amp-初始化"><a href="#構造器-amp-amp-初始化" class="headerlink" title="構造器 &amp;&amp; 初始化"></a>構造器 &amp;&amp; 初始化</h2><ol><li>默認構造器： empty container constructor</li><li>範圍構造器： range constructor</li><li>複製構造器： copy constructor</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">classcomp</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">char</span>&amp; rhs)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; first; <span class="comment">//默認構造器</span></span><br><span class="line"></span><br><span class="line">    first[<span class="string">&#x27;a&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">    first[<span class="string">&#x27;b&#x27;</span>]=<span class="number">30</span>;</span><br><span class="line">    first[<span class="string">&#x27;c&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">    first[<span class="string">&#x27;d&#x27;</span>]=<span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">    map&lt;char,int&gt; second (first.begin(),first.end()); //範圍構造器</span><br><span class="line">    map&lt;char,int&gt; third (second);   //複製構造器</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>,classcomp&gt; fourth; <span class="comment">//有自訂比較函式的構造器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下標操作"><a href="#下標操作" class="headerlink" title="下標操作"></a>下標操作</h2><p><code>map</code>最常使用的方法就只是直接使用mp[<code>A</code>] = <code>B</code>的方式互相對應</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">    mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="string">&quot;an element&quot;</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="string">&quot;another element&quot;</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;c&#x27;</span>]=mymap[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap[&#x27;a&#x27;] is &quot;</span> &lt;&lt; mymap[<span class="string">&#x27;a&#x27;</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap[&#x27;b&#x27;] is &quot;</span> &lt;&lt; mymap[<span class="string">&#x27;b&#x27;</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap[&#x27;c&#x27;] is &quot;</span> &lt;&lt; mymap[<span class="string">&#x27;c&#x27;</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap[&#x27;d&#x27;] is &quot;</span> &lt;&lt; mymap[<span class="string">&#x27;d&#x27;</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap now contains &quot;</span> &lt;&lt; mymap.size() &lt;&lt; <span class="string">&quot; elements.\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a><code>insert</code></h2><table><thead><tr><th align="center">重載函數</th><th align="center">形参</th></tr></thead><tbody><tr><td align="center">插入單個值</td><td align="center">pair&lt;iterator,bool&gt; insert (const value_type&amp; val);</td></tr><tr><td align="center">有位置提示</td><td align="center">iterator insert (const_iterator position, const value_type&amp; val);</td></tr><tr><td align="center">範圍</td><td align="center">template <class InputIterator> void insert (InputIterator first, InputIterator last);</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;tmp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : tmp)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 單個值插入</span></span><br><span class="line">    mymap.insert ( <span class="built_in">pair</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;a&#x27;</span>,<span class="number">100</span>) );</span><br><span class="line">    mymap.insert ( <span class="built_in">pair</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;z&#x27;</span>,<span class="number">200</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator,<span class="keyword">bool</span>&gt; ret;</span><br><span class="line">    ret = mymap.insert ( <span class="built_in">pair</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;z&#x27;</span>,<span class="number">500</span>) );</span><br><span class="line">    <span class="keyword">if</span> (ret.second==<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;元素 &#x27;z&#x27; 已經存在了&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 他的值為: &quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有位置提示的插入</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it = mymap.begin();</span><br><span class="line">    mymap.insert (it, <span class="built_in">pair</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;b&#x27;</span>,<span class="number">300</span>));  <span class="comment">// 最有效率的插入</span></span><br><span class="line">    mymap.insert (it, <span class="built_in">pair</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;c&#x27;</span>,<span class="number">400</span>));  <span class="comment">// 比較沒有效率的插入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 範圍型插入</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; anothermap;</span><br><span class="line">    anothermap.insert(mymap.begin(),mymap.find(<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顯示內容物</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap contains:\n&quot;</span>;</span><br><span class="line">    print(mymap);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;anothermap contains:\n&quot;</span>;</span><br><span class="line">    print(anothermap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">元素 &#39;z&#39; 已經存在了，他的值為: 200</span><br><span class="line">mymap contains:</span><br><span class="line">a &#x3D;&gt; 100</span><br><span class="line">b &#x3D;&gt; 300</span><br><span class="line">c &#x3D;&gt; 400</span><br><span class="line">z &#x3D;&gt; 200</span><br><span class="line">anothermap contains:</span><br><span class="line">a &#x3D;&gt; 100</span><br><span class="line">b &#x3D;&gt; 300</span><br></pre></td></tr></table></figure><h2 id="erase"><a href="#erase" class="headerlink" title="erase"></a><code>erase</code></h2><p><code>map</code>刪除已存元素的方式，常見共有三種。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">20</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">30</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;d&#x27;</span>]=<span class="number">40</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;e&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;f&#x27;</span>]=<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    it=mymap.find(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    mymap.erase (it);                   <span class="comment">// 用指標清除</span></span><br><span class="line"></span><br><span class="line">    mymap.erase (<span class="string">&#x27;c&#x27;</span>);                  <span class="comment">// 用key值清除</span></span><br><span class="line"></span><br><span class="line">    it=mymap.find (<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    mymap.erase ( it, mymap.end() );    <span class="comment">// 範圍型清除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示</span></span><br><span class="line">    print(mymap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D;&gt; 10</span><br><span class="line">d &#x3D;&gt; 40</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h2><p>尋找<code>map</code>中某一個key值的<strong>位置</strong>，如果找到的位置為<code>mp.end()</code>代表尚未找到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">150</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;d&#x27;</span>]=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    it = mymap.find(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != mymap.end())</span><br><span class="line">        mymap.erase (it);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;elements in mymap:&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a =&gt; &quot;</span> &lt;&lt; mymap.find(<span class="string">&#x27;a&#x27;</span>)-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c =&gt; &quot;</span> &lt;&lt; mymap.find(<span class="string">&#x27;c&#x27;</span>)-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;d =&gt; &quot;</span> &lt;&lt; mymap.find(<span class="string">&#x27;d&#x27;</span>)-&gt;second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">elements in mymap:</span><br><span class="line">a &#x3D;&gt; 50</span><br><span class="line">c &#x3D;&gt; 150</span><br><span class="line">d &#x3D;&gt; 200</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a><code>count</code></h2><p>判斷<code>map</code>中，key值是否已出現</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  mymap [<span class="string">&#x27;a&#x27;</span>]=<span class="number">101</span>;</span><br><span class="line">  mymap [<span class="string">&#x27;c&#x27;</span>]=<span class="number">202</span>;</span><br><span class="line">  mymap [<span class="string">&#x27;f&#x27;</span>]=<span class="number">303</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (c=<span class="string">&#x27;a&#x27;</span>; c&lt;=<span class="string">&#x27;g&#x27;</span>; c++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">    <span class="keyword">if</span> (mymap.count(c))</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; is an element of mymap.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; is not an element of mymap.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a is an element of mymap.</span><br><span class="line">b is not an element of mymap.</span><br><span class="line">c is an element of mymap.</span><br><span class="line">d is not an element of mymap.</span><br><span class="line">e is not an element of mymap.</span><br><span class="line">f is an element of mymap.</span><br><span class="line">g is not an element of mymap.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a><code>clear</code></h2><p>清除整個<code>map</code>的工具</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">    mymap[<span class="string">&#x27;x&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;y&#x27;</span>]=<span class="number">200</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;z&#x27;</span>]=<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap contains:\n&quot;</span>;</span><br><span class="line">    print(mymap);</span><br><span class="line"></span><br><span class="line">    mymap.clear();</span><br><span class="line">    mymap[<span class="string">&#x27;a&#x27;</span>]=<span class="number">1101</span>;</span><br><span class="line">    mymap[<span class="string">&#x27;b&#x27;</span>]=<span class="number">2202</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mymap contains:\n&quot;</span>;</span><br><span class="line">    print(mymap);`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mymap contains:</span><br><span class="line">x &#x3D;&gt; 100</span><br><span class="line">y &#x3D;&gt; 200</span><br><span class="line">z &#x3D;&gt; 300</span><br><span class="line">mymap contains:</span><br><span class="line">a &#x3D;&gt; 1101</span><br><span class="line">b &#x3D;&gt; 2202</span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a><code>empty</code></h2><p>如果 <code>map</code> 為空，<code>empty</code> 返回 <code>true</code>;</p><h2 id="size"><a href="#size" class="headerlink" title="size"></a><code>size</code></h2><p>返回 <code>map</code> 容器元素個數</p><h1 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h1><p>就是一個對應表的概念，<strong>一對多</strong>的形式，跨越型態的限制</p><h2 id="標頭檔-1"><a href="#標頭檔-1" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>跟<code>map</code>的操作大部分相同，但<strong>不能使用<code>下標[]</code>功能</strong>，插入值僅能用<code>insert</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">multimap</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;tmp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : tmp)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; it.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mapStudent;</span><br><span class="line"></span><br><span class="line">    mapStudent.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">101</span>, <span class="string">&quot;林小明&quot;</span>));</span><br><span class="line">    mapStudent.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">101</span>, <span class="string">&quot;王大明&quot;</span>));<span class="comment">///一對多</span></span><br><span class="line">    mapStudent.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">102</span>, <span class="string">&quot;張大同&quot;</span>));</span><br><span class="line">    mapStudent.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">102</span>, <span class="string">&quot;葉哈囉&quot;</span>));</span><br><span class="line">    mapStudent.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">103</span>, <span class="string">&quot;李小龍&quot;</span>));</span><br><span class="line">    mapStudent.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">103</span>, <span class="string">&quot;陳小山&quot;</span>));</span><br><span class="line">    mapStudent.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">103</span>, <span class="string">&quot;黃中間&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mapStudent.size() is &quot;</span> &lt;&lt; mapStudent.size() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    print(mapStudent);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mapStudent.size() is 7</span><br><span class="line"></span><br><span class="line">101 &#x3D;&gt; 林小明</span><br><span class="line">101 &#x3D;&gt; 王大明</span><br><span class="line">102 &#x3D;&gt; 張大同</span><br><span class="line">102 &#x3D;&gt; 葉哈囉</span><br><span class="line">103 &#x3D;&gt; 李小龍</span><br><span class="line">103 &#x3D;&gt; 陳小山</span><br><span class="line">103 &#x3D;&gt; 黃中間</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated blue larger" href="https://zrn-coding.github.io/tags/STL/"   title="其他的STL介紹連結"><i class="far fa-hand-point-right fa-fw"></i><span>其他的STL介紹連結</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">STL的演算法  </button><span class="hide-content">正在編寫中喔~~</span></span>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 資料結構 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set的使用(新)</title>
      <link href="/2020/08/21/set/"/>
      <url>/2020/08/21/set/</url>
      
        <content type="html"><![CDATA[<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>一個紀錄是否有出現過的集合</p><h2 id="標頭檔"><a href="#標頭檔" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="構造器-amp-amp-初始化"><a href="#構造器-amp-amp-初始化" class="headerlink" title="構造器 &amp;&amp; 初始化"></a>構造器 &amp;&amp; 初始化</h2><ol><li>默認構造器： empty container constructor</li><li>範圍構造器： range constructor</li><li>複製構造器： copy constructor</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">classcomp</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">int</span>&amp; rhs)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; first;                           <span class="comment">// 默認構造器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myints[]= &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">  <span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">second</span> <span class="params">(myints,myints+<span class="number">5</span>)</span></span>;        <span class="comment">// 範圍構造器</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">third</span> <span class="params">(second)</span></span>;                  <span class="comment">// 複製構造器</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">fourth</span> <span class="params">(second.begin(), second.end())</span></span>;  <span class="comment">// 範圍(指標)構造器</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="keyword">int</span>,classcomp&gt; fifth;                 <span class="comment">//有自訂比較函式的構造器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a><code>insert</code></h2><table><thead><tr><th align="center">重載函數</th><th align="center">形参</th></tr></thead><tbody><tr><td align="center">插入單個值</td><td align="center">pair&lt;iterator,bool&gt; insert (const value_type&amp; val);</td></tr><tr><td align="center">有位置提示</td><td align="center">iterator insert (const_iterator position, const value_type&amp; val);</td></tr><tr><td align="center">範圍</td><td align="center">template <class InputIterator> void insert (InputIterator first, InputIterator last);</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;tmp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:tmp)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;it;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; myset;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="keyword">bool</span>&gt; ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; ++i) myset.insert(i*<span class="number">10</span>);    <span class="comment">// set: 10 20 30 40 50</span></span><br><span class="line"></span><br><span class="line">    ret = myset.insert(<span class="number">20</span>);               <span class="comment">// 沒有插入新值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret.second==<span class="literal">false</span>) it=ret.first;  <span class="comment">// &quot;it&quot; 現在是指 20 的位置</span></span><br><span class="line"></span><br><span class="line">    myset.insert (it,<span class="number">25</span>);                 <span class="comment">// 最有效率插入</span></span><br><span class="line">    myset.insert (it,<span class="number">24</span>);                 <span class="comment">// 最有效率插入</span></span><br><span class="line">    myset.insert (it,<span class="number">26</span>);                 <span class="comment">// 不是最有效率插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> myints[]= &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>&#125;;              <span class="comment">// 10 已經有了，所以不再插入</span></span><br><span class="line">    myset.insert (myints,myints+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myset contains:&quot;</span>;</span><br><span class="line">    print(myset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myset contains: 5 10 15 20 24 25 26 30 40 50</span><br></pre></td></tr></table></figure><h2 id="erase"><a href="#erase" class="headerlink" title="erase"></a><code>erase</code></h2><p><code>set</code>刪除已存元素的方式，常見共有三種。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; myset;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert some values:</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) myset.insert(i*<span class="number">10</span>);  <span class="comment">// 10 20 30 40 50 60 70 80 90</span></span><br><span class="line"></span><br><span class="line">    it = myset.begin();</span><br><span class="line">    ++it;                                         <span class="comment">// &quot;it&quot; 指向 20 的位置</span></span><br><span class="line"></span><br><span class="line">    myset.erase (it);                             <span class="comment">//指標清除</span></span><br><span class="line"></span><br><span class="line">    myset.erase (<span class="number">40</span>);                             <span class="comment">//值的清除</span></span><br><span class="line"></span><br><span class="line">    it = myset.find (<span class="number">60</span>);</span><br><span class="line">    myset.erase (it, myset.end());                <span class="comment">//範圍型清除</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myset contains:&quot;</span>;</span><br><span class="line">    print(myset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myset contains: 10 30 50</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h2><p>尋找<code>set</code>中某一個值的<strong>位置</strong>，如果找到的位置為<code>st.end()</code>代表尚未找到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; myset;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) myset.insert(i*<span class="number">10</span>);    <span class="comment">// set: 10 20 30 40 50</span></span><br><span class="line"></span><br><span class="line">    it=myset.find(<span class="number">20</span>);</span><br><span class="line">    myset.erase (it);</span><br><span class="line">    myset.erase (myset.find(<span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myset contains:&quot;</span>;</span><br><span class="line">    print(myset);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myset contain: 10 30</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a><code>count</code></h2><p>判斷<code>set</code>中，某值是否已出現</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; myset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">5</span>; ++i) myset.insert(i*<span class="number">3</span>);    <span class="comment">// set: 3 6 9 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">        <span class="keyword">if</span> (myset.count(i))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; is an element of myset.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; is not an element of myset.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0 is not an element of myset.</span><br><span class="line">1 is not an element of myset.</span><br><span class="line">2 is not an element of myset.</span><br><span class="line">3 is an element of myset.</span><br><span class="line">4 is not an element of myset.</span><br><span class="line">5 is not an element of myset.</span><br><span class="line">6 is an element of myset.</span><br><span class="line">7 is not an element of myset.</span><br><span class="line">8 is not an element of myset.</span><br><span class="line">9 is an element of myset.</span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a><code>clear</code></h2><p>清除整個<code>set</code>的工具</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; myset;</span><br><span class="line"></span><br><span class="line">    myset.insert(<span class="number">100</span>);</span><br><span class="line">    myset.insert(<span class="number">200</span>);</span><br><span class="line">    myset.insert(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myset contains:&quot;</span>;</span><br><span class="line">    print(myset);</span><br><span class="line"></span><br><span class="line">    mymap.clear();</span><br><span class="line">    myset.insert(<span class="number">1101</span>);</span><br><span class="line">    myset.insert(<span class="number">2202</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;myset contains:&quot;</span>;</span><br><span class="line">    print(mymap);`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myset contains: 100 200 300</span><br><span class="line">myset contains: 1101 2202</span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a><code>empty</code></h2><p>如果 <code>set</code> 為空，<code>empty</code> 返回 <code>true</code>;</p><h2 id="size"><a href="#size" class="headerlink" title="size"></a><code>size</code></h2><p>返回 <code>set</code> 容器元素個數</p><h1 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h1><p>可以記錄出現次數的set</p><h2 id="標頭檔-1"><a href="#標頭檔-1" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>跟<code>set</code>的使用幾乎一模一樣，差別<strong>在<code>count</code>的回傳值不會再只是bool</strong>，而是<strong>出現的次數</strong>(int)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myints[]=&#123;<span class="number">10</span>,<span class="number">73</span>,<span class="number">12</span>,<span class="number">22</span>,<span class="number">73</span>,<span class="number">73</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mymultiset</span> <span class="params">(myints,myints+<span class="number">7</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;73 appears &quot;</span> &lt;&lt; mymultiset.count(<span class="number">73</span>) &lt;&lt; <span class="string">&quot; times in mymultiset.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延伸比較"><a href="#延伸比較" class="headerlink" title="延伸比較"></a>延伸比較</h2><p>與<code>priority_queue</code>(優先佇列)相比，<code>multiset</code>取出任意一個元素要<strong>O(log n)**，但<code>priority_queue</code>要</strong>O(n)**。（這就是它叫做queue的原因）</p><a class="btn-beautify button--animated blue larger" href="https://zrn-coding.github.io/tags/STL/"   title="其他的STL介紹連結"><i class="far fa-hand-point-right fa-fw"></i><span>其他的STL介紹連結</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">STL的演算法  </button><span class="hide-content">正在編寫中喔~~</span></span>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 資料結構 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>list的使用</title>
      <link href="/2020/08/21/list/"/>
      <url>/2020/08/21/list/</url>
      
        <content type="html"><![CDATA[<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>用於處理頻繁刪除、插入導致<code>TLE</code>的題目<br>簡單的想就是更快速的vector</p><h2 id="標頭檔"><a href="#標頭檔" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="構造器-amp-amp-初始化"><a href="#構造器-amp-amp-初始化" class="headerlink" title="構造器 &amp;&amp; 初始化"></a>構造器 &amp;&amp; 初始化</h2><ol><li>默認構造器：empty container constructor</li><li>批量構造器：fill constructor</li><li>複製構造器：copy constructor</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x: temp)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; list1; <span class="comment">// 默認構造器</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; list2&#123;<span class="number">1</span>,<span class="number">2</span>&#125;; <span class="comment">// 默認構造器</span></span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">list3</span><span class="params">(<span class="number">6</span>,<span class="number">10</span>)</span></span>; <span class="comment">//批量構造器</span></span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">list4</span><span class="params">(list2)</span></span>; <span class="comment">//複製構造器</span></span><br><span class="line"></span><br><span class="line">    print(list2);</span><br><span class="line">    print(list3);</span><br><span class="line">    print(list4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 2 </span><br><span class="line">10 10 10 10 10 10  //六個10</span><br><span class="line">10 10 10 10 10</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h2 id="push-back-amp-amp-pop-back"><a href="#push-back-amp-amp-pop-back" class="headerlink" title="push_back &amp;&amp; pop_back"></a><code>push_back</code> &amp;&amp; <code>pop_back</code></h2><p><code>list</code> 最常用的成員函數，在尾部插入和刪除</p><h2 id="push-front-amp-amp-pop-front"><a href="#push-front-amp-amp-pop-front" class="headerlink" title="push_front &amp;&amp; pop_front"></a><code>push_front</code> &amp;&amp; <code>pop_front</code></h2><p><code>list</code> 常用的成員函數，在首部插入和刪除</p><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">    test.assign(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//批量構造，構造兩個值為 3 的 element</span></span><br><span class="line">    print(test);</span><br><span class="line">    test.assign(<span class="number">2</span>,<span class="number">8</span>); <span class="comment">//會覆蓋原有值</span></span><br><span class="line">    print(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">8 8</span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a><code>insert</code></h2><p>在指定位置插入一個或多個值</p><table><thead><tr><th align="center">重載函數</th><th align="center">形参</th></tr></thead><tbody><tr><td align="center">插入單個值 [1]</td><td align="center">iterator insert (const_iterator position, const value_type&amp; val);</td></tr><tr><td align="center">多個重複值 [2]</td><td align="center">iterator insert (const_iterator position, size_type n, const value_type&amp; val)</td></tr><tr><td align="center">range (3)</td><td align="center">iterator insert (const_iterator position, InputIterator first, InputIterator last)</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">test</span><span class="params">(<span class="number">2</span>,<span class="number">8</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">test1</span><span class="params">(test)</span></span>;</span><br><span class="line">    test.insert(test.begin(),<span class="number">3</span>); <span class="comment">//[1]</span></span><br><span class="line">    print(test);</span><br><span class="line">    <span class="keyword">auto</span> ite =test.insert(test.begin(),test1.begin(),test1.end());<span class="comment">//[3]</span></span><br><span class="line">    print(test);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*ite&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//insert 返回指針地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 8 8 </span><br><span class="line">8 8 3 8 8 </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="erase"><a href="#erase" class="headerlink" title="erase"></a><code>erase</code></h2><p>刪除指定位置的值</p><table><thead><tr><th align="center">重載函數</th><th align="center">形參</th></tr></thead><tbody><tr><td align="center">single</td><td align="center">iterator erase (const_iterator position)</td></tr><tr><td align="center">range</td><td align="center">iterator erase (const_iterator first, const_iterator last)</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">    test.assign(<span class="number">4</span>,<span class="number">3</span>); <span class="comment">//批量構造，構造兩個值為 3 的 element</span></span><br><span class="line">    test.push_back(<span class="number">66</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;initial element\n&quot;</span>; </span><br><span class="line">    print(test);</span><br><span class="line">    test.erase(test.end()<span class="number">-1</span>); <span class="comment">//刪除尾部元素，注意不要越界</span></span><br><span class="line">    print(test);</span><br><span class="line">    test.erase(test.begin(),test.end()<span class="number">-2</span>);<span class="comment">//刪除操作依舊複雜度高，容易TLE</span></span><br><span class="line">    print(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">initial element</span><br><span class="line">3 3 3 3 66 </span><br><span class="line">3 3 3 3 </span><br><span class="line">3 3 </span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a><code>empty</code></h2><p>如果 <code>list</code> 為空，<code>empty</code> 返回 <code>true</code>;</p><h2 id="size"><a href="#size" class="headerlink" title="size"></a><code>size</code></h2><p>返回 <code>list</code> 容器元素個數</p><h2 id="emplace-amp-amp-emplace-back-amp-amp-emplace-front"><a href="#emplace-amp-amp-emplace-back-amp-amp-emplace-front" class="headerlink" title="emplace &amp;&amp; emplace_back &amp;&amp; emplace_front"></a><code>emplace</code> &amp;&amp; <code>emplace_back</code> &amp;&amp; <code>emplace_front</code></h2><p>C++11 的新特性，在幾乎所有的容器中都插入了這一函數，這一函數功能類似於 <code>insert</code>, 但是開銷遠小於 <code>insert</code>, 它<strong>不產生臨時變數</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;&gt; lis;<span class="comment">//vector 中嵌套 pair</span></span><br><span class="line">    <span class="comment">//back</span></span><br><span class="line">    lis.push_back(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1.0</span>));<span class="comment">//常用的構造方式</span></span><br><span class="line">    lis.emplace(lis.end(),<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace 的構造方式 </span></span><br><span class="line">    <span class="comment">//front</span></span><br><span class="line">    lis.push_front(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1.0</span>));<span class="comment">//常用的構造方式</span></span><br><span class="line">    lis.emplace(lis.begin(),<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace 的構造方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方便是方便，但簡單的尾部插入還要寫地址 , 豈不繁瑣，當然不是 ,C++11 也提供了<code> emplace_back</code> 這一函數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lis.emplace_back(<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace_back 的構造方式 ,不需寫尾部位址</span></span><br><span class="line">lis.emplace_front(<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace_back 的構造方式 ,不需寫首部位址</span></span><br></pre></td></tr></table></figure><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a><code>resize</code></h2><p>更改 <code>list</code> 中 <code>element</code> 個數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span> &lt;<span class="keyword">int</span>&gt; lis;</span><br><span class="line"> <span class="comment">// set some initial content:</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) lis.push_back(i);</span><br><span class="line"></span><br><span class="line">    lis.resize(<span class="number">5</span>);<span class="comment">//縮小容量到5,尾部多餘的`element`被刪除</span></span><br><span class="line">    print(lis);</span><br><span class="line">    lis.resize(<span class="number">8</span>,<span class="number">100</span>);<span class="comment">//擴容到8,用100填值</span></span><br><span class="line">    print(lis);</span><br><span class="line">    lis.resize(<span class="number">12</span>);<span class="comment">//使用0填值</span></span><br><span class="line">    print(lis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5</span><br><span class="line">1 2 3 4 5 100 100 100</span><br><span class="line">1 2 3 4 5 100 100 100 0 0 0 0</span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a><code>clear</code></h2><p>刪除 <code>list</code> 中的所有元素，如果有析構函式呼叫各自的析構函數 , 但是 clear不刪除 <code>list</code> 的容量 ,<br><code>list</code> 的容量是自身佔用的記憶體值，不是其中包含的 element 的具體大小，為了效率考慮，<code>list</code> 分配的記憶體值都是大於或等於已使用的記憶體值<br>例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;&gt; lis;<span class="comment">//list 中嵌套 pair</span></span><br><span class="line">    lis.push_back(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1.0</span>));<span class="comment">//常用的構造方式</span></span><br><span class="line">    lis.emplace_back(<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace_back 的構造方式 </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;lis.capacity()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;lis.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    lis.clear();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;lis.capacity()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;lis.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">2 0&#x2F;&#x2F;容量是不變的</span><br></pre></td></tr></table></figure><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a><code>remove</code></h2><p>刪除<code>list</code>裡<strong>所有指定的值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lis&#123;<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>&#125;; <span class="comment">// 默認構造器</span></span><br><span class="line">    lis.remove(<span class="number">20</span>);</span><br><span class="line">    print(lis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 10 30 30</span><br></pre></td></tr></table></figure><h2 id="remove-if"><a href="#remove-if" class="headerlink" title="remove_if"></a><code>remove_if</code></h2><p>刪除<code>list</code>中符合條件的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_odd</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lis&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;; <span class="comment">// 默認構造器</span></span><br><span class="line"></span><br><span class="line">    lis.remove_if(is_odd);</span><br><span class="line">    print(lis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4 6</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated blue larger" href="https://zrn-coding.github.io/tags/STL/"   title="其他的STL介紹連結"><i class="far fa-hand-point-right fa-fw"></i><span>其他的STL介紹連結</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">STL的演算法  </button><span class="hide-content">正在編寫中喔~~</span></span>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 資料結構 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack的使用(新)</title>
      <link href="/2020/08/21/stack/"/>
      <url>/2020/08/21/stack/</url>
      
        <content type="html"><![CDATA[<h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><h2 id="標頭檔"><a href="#標頭檔" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>默認構造器：empty container constructor</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;type&gt; sk; <span class="comment">// 默認構造器</span></span><br></pre></td></tr></table></figure><h2 id="push-amp-amp-pop"><a href="#push-amp-amp-pop" class="headerlink" title="push &amp;&amp; pop"></a><code>push</code> &amp;&amp; <code>pop</code></h2><p><code>stack</code> 最常用的成員函數，push在<strong>最尾處</strong>插入值，及<strong>最尾部</strong>刪除值<br>–&gt; FILO (First In Last Out)，<strong>先入後出</strong>的概念</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;sk;</span><br><span class="line">    sk.push(<span class="number">10</span>); <span class="comment">//&#123;10&#125;</span></span><br><span class="line">    sk.push(<span class="number">20</span>); <span class="comment">//&#123;10,20&#125;</span></span><br><span class="line">    sk.push(<span class="number">30</span>); <span class="comment">//&#123;10,20,30&#125;</span></span><br><span class="line">    sk.pop();    <span class="comment">//&#123;10,20&#125;</span></span><br><span class="line">    sk.pop();    <span class="comment">//&#123;10&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h2><p><code>stack</code>取出最前面值的方法，<strong>記得top只能知道最前面的值</strong>，<strong>不包括刪除工作</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;sk;</span><br><span class="line">    sk.push(<span class="number">10</span>);</span><br><span class="line">    sk.push(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    sk.top()-=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;sk.top() is now &quot;</span>&lt;&lt;sk.top()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sk.top() is now 15</span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a><code>empty</code></h2><p>如果 <code>queue</code> 為空，<code>empty</code> 返回 <code>true</code>;</p><h2 id="size"><a href="#size" class="headerlink" title="size"></a><code>size</code></h2><p>返回 <code>queue</code> 容器元素個數</p><h2 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a><code>emplace</code></h2><p>C++11 的新特性，在幾乎所有的容器中都插入了這一函數，這一函數功能類似於 <code>push</code>, 但是開銷遠小於 <code>push</code>, 它<strong>不產生臨時變數</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;    </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; sk;</span><br><span class="line"></span><br><span class="line">    sk.emplace (<span class="string">&quot;First sentence&quot;</span>);</span><br><span class="line">    sk.emplace (<span class="string">&quot;Second sentence&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mystack contains:\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!sk.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sk.top() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        sk.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystack contains:</span><br><span class="line">Second sentence</span><br><span class="line">First sentence</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated blue larger" href="https://zrn-coding.github.io/tags/STL/"   title="其他的STL介紹連結"><i class="far fa-hand-point-right fa-fw"></i><span>其他的STL介紹連結</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">STL的演算法  </button><span class="hide-content">正在編寫中喔~~</span></span>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 資料結構 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>queue的使用(新)</title>
      <link href="/2020/08/21/queue/"/>
      <url>/2020/08/21/queue/</url>
      
        <content type="html"><![CDATA[<h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><h2 id="標頭檔"><a href="#標頭檔" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>默認構造器：empty container constructor</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;type&gt; q; <span class="comment">// 默認構造器</span></span><br></pre></td></tr></table></figure><h2 id="push-back-amp-amp-pop-back"><a href="#push-back-amp-amp-pop-back" class="headerlink" title="push_back &amp;&amp; pop_back"></a><code>push_back</code> &amp;&amp; <code>pop_back</code></h2><p><code>queue</code> 最常用的成員函數，push在<strong>最尾處</strong>插入值，及<strong>最頭部</strong>刪除值<br>–&gt; FIFO (First In First Out)，<strong>先入先出</strong>的概念</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    q.push(<span class="number">10</span>); <span class="comment">//&#123;10&#125;</span></span><br><span class="line">    q.push(<span class="number">20</span>); <span class="comment">//&#123;10,20&#125;</span></span><br><span class="line">    q.push(<span class="number">30</span>); <span class="comment">//&#123;10,20,30&#125;</span></span><br><span class="line">    q.pop();    <span class="comment">//&#123;20,30&#125;</span></span><br><span class="line">    q.pop();    <span class="comment">//&#123;30&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="front"><a href="#front" class="headerlink" title="front"></a><code>front</code></h2><p><code>queue</code>取出最前面值的方法，<strong>記得front只能知道最前面的值</strong>，<strong>不包括刪除工作</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">        q.push(i*<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//q &#123;10,20,30,40,50&#125;</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;q.front()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 20 30 40 50</span><br></pre></td></tr></table></figure><h2 id="back"><a href="#back" class="headerlink" title="back"></a><code>back</code></h2><p>‘queue’取出最後面值的方法，<strong>記得back只能知道最後面的值</strong>，<strong>不包括刪除工作</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">12</span>); <span class="comment">//q&#123;12&#125;</span></span><br><span class="line">    q.push(<span class="number">75</span>); <span class="comment">//q&#123;12,75&#125;</span></span><br><span class="line"></span><br><span class="line">    q.back()-=q.front();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;q.back() is now &quot;</span>&lt;&lt;q.back()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.back() is now 63</span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a><code>empty</code></h2><p>如果 <code>queue</code> 為空，<code>empty</code> 返回 <code>true</code>;</p><h2 id="size"><a href="#size" class="headerlink" title="size"></a><code>size</code></h2><p>返回 <code>queue</code> 容器元素個數</p><h2 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a><code>emplace</code></h2><p>C++11 的新特性，在幾乎所有的容器中都插入了這一函數，這一函數功能類似於 <code>push</code>, 但是開銷遠小於 <code>push</code>, 它<strong>不產生臨時變數</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;&gt; q;<span class="comment">//queue 中嵌套 pair</span></span><br><span class="line">q.emplace(<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace 的構造方式 </span></span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated blue larger" href="https://zrn-coding.github.io/tags/STL/"   title="其他的STL介紹連結"><i class="far fa-hand-point-right fa-fw"></i><span>其他的STL介紹連結</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">STL的演算法  </button><span class="hide-content">正在編寫中喔~~</span></span>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS</title>
      <link href="/2020/08/19/DFS/"/>
      <url>/2020/08/19/DFS/</url>
      
        <content type="html"><![CDATA[<h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p><strong>深度優先搜尋法</strong>（Depth-First Search）是一種樹（Tree）或圖（Graph）資料結構的<strong>搜索演算法</strong>，從圖的某一節點(vertex, node) 開始走訪，盡可能最<strong>深入到分支深處</strong>再<strong>回溯其他節點</strong>。可應用於有向圖與無向圖的搜尋。</p><h2 id="動圖演示"><a href="#動圖演示" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://seanlhlee.gitbooks.io/acosa/content/gitBook/pics/AnimatedExample.gif"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>運用遞迴的方式，<strong>不斷的</strong>往合理的狀況<strong>往下探索</strong>，直到無法在往下探索後<strong>返回</strong>，直到把所有狀況都跑過一遍，有時需要用到stack去幫忙輔助。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>用於<strong>拓撲排序</strong>，解決需要<strong>圖形回溯</strong>的問題，檢測<strong>圖形中的循環</strong>，查找<strong>兩個節點之間的所有路徑</strong>等。當然，還有很多喔~~</p><h2 id="基本例題"><a href="#基本例題" class="headerlink" title="基本例題"></a>基本例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="c129-00572-Oil-Deposits"><a href="#c129-00572-Oil-Deposits" class="headerlink" title="c129: 00572 - Oil Deposits"></a>c129: 00572 - Oil Deposits</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>找出這塊地包含幾個不同的oil deposit。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>開兩個二維陣列，一個紀錄圖形，另一個紀錄是否有走過，如果有油且未走過總是就加一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=r||j&lt;<span class="number">0</span>||j&gt;=c||visited[i][j]==<span class="number">1</span>||mp[i][j]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visited[i][j]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    dfs(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line">    dfs(i<span class="number">-1</span>,j);</span><br><span class="line">    dfs(i<span class="number">-1</span>,j+<span class="number">1</span>);</span><br><span class="line">    dfs(i,j<span class="number">-1</span>);</span><br><span class="line">    dfs(i,j+<span class="number">1</span>);</span><br><span class="line">    dfs(i+<span class="number">1</span>,j<span class="number">-1</span>);</span><br><span class="line">    dfs(i+<span class="number">1</span>,j);</span><br><span class="line">    dfs(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &amp;&amp; r&gt;<span class="number">0</span> &amp;&amp; c&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">                visited[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;@&#x27;</span>&amp;&amp;visited[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="a229-括號匹配問題"><a href="#a229-括號匹配問題" class="headerlink" title="a229: 括號匹配問題"></a>a229: 括號匹配問題</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>請寫一個程式把所有合法括號匹配方式列出來!<br>合法匹配的括號，從答案列的開頭到答案列某一點，左括弧次數永遠大於等於右括弧!</p><h3 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h3><p>使用DFS，如果途中( &gt; )則直接return，直到放置數達到n*2為止</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s; <span class="keyword">int</span> a, b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.size() == n * <span class="number">2</span>) &#123; <span class="keyword">if</span>(a == b) <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        s.push_back(<span class="string">&#x27;(&#x27;</span>); a ++; dfs(n); s.pop_back(); a--;</span><br><span class="line">        s.push_back(<span class="string">&#x27;)&#x27;</span>); b ++; dfs(n); s.pop_back(); b--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) dfs(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><a class="btn-beautify button--animated blue larger center" href="https://zrn-code.github.io/tags/%E5%9C%96%E8%AB%96/"   title="其他題目"><i class="far fa-hand-point-right fa-fw"></i><span>其他題目</span></a>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基礎圖論 </tag>
            
            <tag> 筆記 </tag>
            
            <tag> 演算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector的使用(新)</title>
      <link href="/2020/08/19/vector/"/>
      <url>/2020/08/19/vector/</url>
      
        <content type="html"><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="標頭檔"><a href="#標頭檔" class="headerlink" title="標頭檔"></a>標頭檔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="構造器-amp-amp-初始化"><a href="#構造器-amp-amp-初始化" class="headerlink" title="構造器 &amp;&amp; 初始化"></a>構造器 &amp;&amp; 初始化</h2><ol><li>默認構造器：empty container constructor</li><li>批量構造器：fill constructor</li><li>範圍構造器：range constructor</li><li>複製構造器：copy constructor</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x: temp)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1; <span class="comment">// 默認構造器</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>&#125;; <span class="comment">// 默認構造器</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">6</span>,<span class="number">10</span>)</span></span>; <span class="comment">//批量構造器</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(v2.begin(),v2.begin()+<span class="number">5</span>)</span></span>; <span class="comment">//範圍構造器</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v4</span><span class="params">(v)</span></span>; <span class="comment">//複製構造器</span></span><br><span class="line"></span><br><span class="line">    print(v);</span><br><span class="line">    print(v2);</span><br><span class="line">    print(v3);</span><br><span class="line">    print(v4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 2 </span><br><span class="line">10 10 10 10 10 10  //六個10</span><br><span class="line">10 10 10 10 10</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h2 id="push-back-amp-amp-pop-back"><a href="#push-back-amp-amp-pop-back" class="headerlink" title="push_back &amp;&amp; pop_back"></a><code>push_back</code> &amp;&amp; <code>pop_back</code></h2><p>vector 最常用的成員函數，在尾部插入和刪除</p><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">    test.assign(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//批量構造，構造兩個值為 3 的 element</span></span><br><span class="line">    print(test);</span><br><span class="line">    test.assign(<span class="number">2</span>,<span class="number">8</span>); <span class="comment">//會覆蓋原有值</span></span><br><span class="line">    print(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">8 8</span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a><code>insert</code></h2><p>在指定位置插入一個或多個值，(位置的類型是反覆運算器), 但若是插入操作過多，使用 vector 時間複雜度會非常高<br>vector 中插入值時，會將插入值後的所有值依次後移</p><table><thead><tr><th align="center">重載函數</th><th align="center">形参</th></tr></thead><tbody><tr><td align="center">插入單個值 [1]</td><td align="center">iterator insert (const_iterator position, const value_type&amp; val);</td></tr><tr><td align="center">多個重複值 [2]</td><td align="center">iterator insert (const_iterator position, size_type n, const value_type&amp; val)</td></tr><tr><td align="center">range [3]</td><td align="center">iterator insert (const_iterator position, InputIterator first, InputIterator last)</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">test1</span><span class="params">(test)</span></span>;</span><br><span class="line">    test.insert(test.begin(),<span class="number">3</span>); <span class="comment">//[1]</span></span><br><span class="line">    print(test);</span><br><span class="line">    <span class="keyword">auto</span> ite =test.insert(test.begin(),test1.begin(),test1.end());<span class="comment">//[3]</span></span><br><span class="line">    print(test);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*ite&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//insert 返回指針地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 8 8 </span><br><span class="line">8 8 3 8 8 </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="erase"><a href="#erase" class="headerlink" title="erase"></a><code>erase</code></h2><p>刪除指定位置的值</p><table><thead><tr><th align="center">重載函數</th><th align="center">形參</th></tr></thead><tbody><tr><td align="center">single</td><td align="center">iterator erase (const_iterator position)</td></tr><tr><td align="center">range</td><td align="center">iterator erase (const_iterator first, const_iterator last)</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">    test.assign(<span class="number">4</span>,<span class="number">3</span>); <span class="comment">//批量構造，構造兩個值為 3 的 element</span></span><br><span class="line">    test.push_back(<span class="number">66</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;initial element\n&quot;</span>; </span><br><span class="line">    print(test);</span><br><span class="line">    test.erase(test.end()<span class="number">-1</span>); <span class="comment">//刪除尾部元素，注意不要越界</span></span><br><span class="line">    print(test);</span><br><span class="line">    test.erase(test.begin(),test.end()<span class="number">-2</span>);<span class="comment">//刪除操作依舊複雜度高，容易TLE</span></span><br><span class="line">    print(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">initial element</span><br><span class="line">3 3 3 3 66 </span><br><span class="line">3 3 3 3 </span><br><span class="line">3 3 </span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a><code>empty</code></h2><p>如果 <code>vector</code> 為空，<code>empty</code> 返回 <code>true</code>;</p><h2 id="size"><a href="#size" class="headerlink" title="size"></a><code>size</code></h2><p>返回 <code>vector</code> 容器元素個數</p><h2 id="emplace-amp-amp-emplace-back"><a href="#emplace-amp-amp-emplace-back" class="headerlink" title="emplace &amp;&amp; emplace_back"></a><code>emplace</code> &amp;&amp; <code>emplace_back</code></h2><p>C++11 的新特性，在幾乎所有的容器中都插入了這一函數，這一函數功能類似於 <code>insert</code>, 但是開銷遠小於 <code>insert</code>, 它<strong>不產生臨時變數</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;&gt; vec;<span class="comment">//vector 中嵌套 pair</span></span><br><span class="line">vec.push_back(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1.0</span>));<span class="comment">//常用的構造方式</span></span><br><span class="line">vec.emplace(vec.end(),<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace 的構造方式 </span></span><br></pre></td></tr></table></figure><p>方便是方便，但簡單的尾部插入還要寫地址 , 豈不繁瑣，當然不是 ,C++11 也提供了<code> emplace_back</code> 這一函數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vec.emplace_back(<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace_back 的構造方式 ,不需寫尾部位址</span></span><br></pre></td></tr></table></figure><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a><code>resize</code></h2><p>更改 <code>vector</code> 中 <code>element</code> 個數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) v.push_back(i);</span><br><span class="line"></span><br><span class="line">    v.resize(<span class="number">5</span>);<span class="comment">//縮小容量到5,尾部多餘的`element`被刪除</span></span><br><span class="line">    print(v);</span><br><span class="line">    v.resize(<span class="number">8</span>,<span class="number">100</span>);<span class="comment">//擴容到8,用100填值</span></span><br><span class="line">    print(v);</span><br><span class="line">    v.resize(<span class="number">12</span>);<span class="comment">//使用0填值</span></span><br><span class="line">    print(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5</span><br><span class="line">1 2 3 4 5 100 100 100</span><br><span class="line">1 2 3 4 5 100 100 100 0 0 0 0</span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a><code>clear</code></h2><p>刪除 <code>vector</code> 中的所有元素，如果有析構函式呼叫各自的析構函數 , 但是 clear不刪除 <code>vector</code> 的容量 ,<br><code>vector</code> 的容量是自身佔用的記憶體值，不是其中包含的 element 的具體大小，為了效率考慮，<code>vector</code> 分配的記憶體值都是大於或等於已使用的記憶體值<br>例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;&gt; vec;<span class="comment">//vector 中嵌套 pair</span></span><br><span class="line">    vec.push_back(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1.0</span>));<span class="comment">//常用的構造方式</span></span><br><span class="line">    vec.emplace_back(<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace_back 的構造方式 </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vec.capacity()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;vec.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    vec.clear();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vec.capacity()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;vec.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">2 0&#x2F;&#x2F;容量是不變的</span><br></pre></td></tr></table></figure><p>對於即將再次被使用的容器，這樣做效率無疑更高，但對於即將丟棄的 <code>vector</code>, 有沒有可以徹底善後的方法</p><h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a><code>swap</code></h2><p>該函數用於交換兩個 <code>vector</code> 容器的內容，那麼假如交換一個空<code>vector</code> 呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> pa =<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pa&gt; vec;<span class="comment">//vector 中嵌套 pair</span></span><br><span class="line">    vec.push_back(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1.0</span>));<span class="comment">//常用的構造方式</span></span><br><span class="line">    vec.emplace_back(<span class="number">1</span>,<span class="number">2.0</span>);<span class="comment">//emplace_back 的構造方式 </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vec.capacity()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;vec.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    vec.clear();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vec.capacity()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;vec.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pa&gt; (vec).swap(vec); <span class="comment">// 交換一個空容器</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vec.capacity()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;vec.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2 &#x2F;&#x2F;初始容量</span><br><span class="line">2 0 &#x2F;&#x2F;調用clear後</span><br><span class="line">0 0 &#x2F;&#x2F;交換空容器後,整個vector 全部清空了</span><br></pre></td></tr></table></figure><p>幾乎很少會在演算法題中使用，貿然使用可能會弄巧成拙</p><a class="btn-beautify button--animated blue larger" href="https://zrn-coding.github.io/tags/STL/"   title="其他的STL介紹連結"><i class="far fa-hand-point-right fa-fw"></i><span>其他的STL介紹連結</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">STL的演算法  </button><span class="hide-content">正在編寫中喔~~</span></span>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 資料結構 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>風格轉移</title>
      <link href="/2020/07/15/AI-10/"/>
      <url>/2020/07/15/AI-10/</url>
      
        <content type="html"><![CDATA[<h1 id="神經的風格轉移"><a href="#神經的風格轉移" class="headerlink" title="神經的風格轉移"></a>神經的風格轉移</h1><p>深度學習以另一幅圖像的風格來構成一幅圖像（是否希望您能像畢加索或梵高一樣繪畫？）。這被稱為“神經風格轉換”，該技術在《藝術風格的神經算法》（Gatys等人）中有所概述。<br>神經樣式轉移是一種優化技術，用於拍攝兩個圖像（<em>內容</em>圖像和<em>樣式參考</em>圖像（例如著名畫家的藝術品））並將它們融合在一起，以便輸出圖像看起來像內容圖像，但以樣式參考圖片的樣式“繪製”。<br>這是通過優化輸出圖像以使其與內容圖像的內容統計信息和样式參考圖像的樣式統計信息相匹配來實現的。這些統計數據是使用卷積網絡從圖像中提取的。</p><h2 id="資料預處理"><a href="#資料預處理" class="headerlink" title="資料預處理"></a>資料預處理</h2><h3 id="載入所需模組"><a href="#載入所需模組" class="headerlink" title="載入所需模組"></a>載入所需模組</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> IPython.display <span class="keyword">as</span> display</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">12</span>,<span class="number">12</span>)</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.grid&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> PIL.Image</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tensor_to_image</span>(<span class="params">tensor</span>):</span></span><br><span class="line">  tensor = tensor*<span class="number">255</span></span><br><span class="line">  tensor = np.array(tensor, dtype=np.uint8)</span><br><span class="line">  <span class="keyword">if</span> np.ndim(tensor)&gt;<span class="number">3</span>:</span><br><span class="line">    <span class="keyword">assert</span> tensor.shape[<span class="number">0</span>] == <span class="number">1</span></span><br><span class="line">    tensor = tensor[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">return</span> PIL.Image.fromarray(tensor)</span><br></pre></td></tr></table></figure><p>載入圖片以及風格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#載入圖片</span></span><br><span class="line">content_path = tf.keras.utils.get_file(<span class="string">&#x27;YellowLabradorLooking_new.jpg&#x27;</span>, <span class="string">&#x27;https://i.imgur.com/BJsEk2R.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 載入風格</span></span><br><span class="line">style_path = tf.keras.utils.get_file(<span class="string">&#x27;kandinsky5.jpg&#x27;</span>,<span class="string">&#x27;https://storage.googleapis.com/download.tensorflow.org/example_images/Vassily_Kandinsky%2C_1913_-_Composition_7.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="可視化的輸入"><a href="#可視化的輸入" class="headerlink" title="可視化的輸入"></a>可視化的輸入</h2><p>將圖片轉為512像素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_img</span>(<span class="params">path_to_img</span>):</span></span><br><span class="line">  max_dim = <span class="number">512</span></span><br><span class="line">  img = tf.io.read_file(path_to_img)</span><br><span class="line">  img = tf.image.decode_image(img, channels=<span class="number">3</span>)</span><br><span class="line">  img = tf.image.convert_image_dtype(img, tf.float32)</span><br><span class="line"></span><br><span class="line">  shape = tf.cast(tf.shape(img)[:<span class="number">-1</span>], tf.float32)</span><br><span class="line">  long_dim = max(shape)</span><br><span class="line">  scale = max_dim / long_dim</span><br><span class="line"></span><br><span class="line">  new_shape = tf.cast(shape * scale, tf.int32)</span><br><span class="line"></span><br><span class="line">  img = tf.image.resize(img, new_shape)</span><br><span class="line">  img = img[tf.newaxis, :]</span><br><span class="line">  <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><p>簡單的檢視圖片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imshow</span>(<span class="params">image, title=None</span>):</span></span><br><span class="line">  <span class="keyword">if</span> len(image.shape) &gt; <span class="number">3</span>:</span><br><span class="line">    image = tf.squeeze(image, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  plt.imshow(image)</span><br><span class="line">  <span class="keyword">if</span> title:</span><br><span class="line">    plt.title(title)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">content_image = load_img(content_path)</span><br><span class="line">style_image = load_img(style_path)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">imshow(content_image, <span class="string">&#x27;Content Image&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">imshow(style_image, <span class="string">&#x27;Style Image&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow_hub <span class="keyword">as</span> hub</span><br><span class="line">hub_module = hub.load(<span class="string">&#x27;https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/1&#x27;</span>)</span><br><span class="line">stylized_image = hub_module(tf.constant(content_image), tf.constant(style_image))[<span class="number">0</span>]</span><br><span class="line">tensor_to_image(stylized_image)</span><br></pre></td></tr></table></figure><h2 id="定義圖片及風格"><a href="#定義圖片及風格" class="headerlink" title="定義圖片及風格"></a>定義圖片及風格</h2><p>使用模型的中間層來獲取圖像的內容和樣式表示。從網絡的輸入層開始，前幾層的激活表示諸如邊緣和紋理之類的低級特徵。當您遍歷網絡時，最後幾層代表更高級別的功能-諸如輪子或眼睛之類的對象部分。在這種情況下，您使用的是VGG19網絡體系結構，即預訓練的圖像分類網絡。這些中間層對於定義圖像中內容和样式的表示是必不可少的。對於輸入圖像，請嘗試在這些中間層匹配相應的樣式和內容目標表示。</p><p>加載一個VGG19並在我們的映像上對其進行測試以確保其正確使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = tf.keras.applications.vgg19.preprocess_input(content_image*<span class="number">255</span>)</span><br><span class="line">x = tf.image.resize(x, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">vgg = tf.keras.applications.VGG19(include_top=<span class="literal">True</span>, weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line">prediction_probabilities = vgg(x)</span><br><span class="line">prediction_probabilities.shape</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">predicted_top_5 = tf.keras.applications.vgg19.decode_predictions(prediction_probabilities.numpy())[<span class="number">0</span>]</span><br><span class="line">[(class_name, prob) <span class="keyword">for</span> (number, class_name, prob) <span class="keyword">in</span> predicted_top_5]</span><br></pre></td></tr></table></figure><p>現在加載沒有分類頭的<code>VGG19</code>，並列出層名稱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vgg = tf.keras.applications.VGG19(include_top=<span class="literal">False</span>, weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> vgg.layers:</span><br><span class="line">  print(layer.name)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">content_layers = [<span class="string">&#x27;block5_conv2&#x27;</span>] </span><br><span class="line"></span><br><span class="line">style_layers = [<span class="string">&#x27;block1_conv1&#x27;</span>,<span class="string">&#x27;block2_conv1&#x27;</span>, <span class="string">&#x27;block3_conv1&#x27;</span>, </span><br><span class="line">                          <span class="string">&#x27;block4_conv1&#x27;</span>,  <span class="string">&#x27;block5_conv1&#x27;</span>]</span><br><span class="line">num_content_layers = len(content_layers)</span><br><span class="line">num_style_layers = len(style_layers)</span><br></pre></td></tr></table></figure><h4 id="圖片與風格的中間層"><a href="#圖片與風格的中間層" class="headerlink" title="圖片與風格的中間層"></a>圖片與風格的中間層</h4><p>那麼，為什麼在我們的預訓練圖像分類網絡中這些中間輸出可以讓我們定義樣式和內容表示形式？</p><p>在較高級別上，為了使網絡執行圖像分類（已訓練該網絡進行此操作），它必須了解圖像。 這就要求將原始圖像作為輸入像素，並建立一個內部表示形式，以將原始圖像像素轉換為對圖像中存在的特徵的複雜理解。</p><p>這也是卷積神經網絡能夠很好地泛化的原因：它們能夠捕獲不變性並在類別（例如貓與狗）中定義與背景噪聲和其他煩擾無關的特徵。 因此，在原始圖像被饋送到模型和輸出分類標籤之間的某處，模型充當了複雜的特徵提取器。 通過訪問模型的中間層，您可以描述輸入圖像的內容和樣式。</p><h2 id="建造模型"><a href="#建造模型" class="headerlink" title="建造模型"></a>建造模型</h2><p>tf.keras.applications中的網絡經過設計，因此您可以使用Keras功能API輕鬆提取中間層值。<br>要使用功能性API定義模型，請指定輸入和輸出：<br>模型=模型（輸入，輸出）<br>下面的函數構建一個VGG19模型，該模型返回中間層輸出的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vgg_layers</span>(<span class="params">layer_names</span>):</span></span><br><span class="line">  vgg = tf.keras.applications.VGG19(include_top=<span class="literal">False</span>, weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line">  vgg.trainable = <span class="literal">False</span></span><br><span class="line">  outputs = [vgg.get_layer(name).output <span class="keyword">for</span> name <span class="keyword">in</span> layer_names]</span><br><span class="line">  model = tf.keras.Model([vgg.input], outputs)</span><br><span class="line">  <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h2 id="進行風格計算"><a href="#進行風格計算" class="headerlink" title="進行風格計算"></a>進行風格計算</h2><p>圖像的內容由中間特徵圖的值表示。</p><p>事實證明，圖像的樣式可以通過不同特徵圖中的均值和相關性來描述。 通過在每個位置取特徵向量與其自身的外積，並對所有位置的該外積求平均值，計算出包含此信息的Gram矩陣。 可以針對特定層計算此Gram矩陣，如下所示：<br>$$G^l_{cd} = \frac{\sum_{ij} F^l_{ijc}(x)F^l_{ijd}(x)}{IJ}$$</p><p>這可以使用<code>tf.linalg.einsum</code>函數簡潔地實現：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用tf.linalg.einsum函數</span><br><span class="line">def gram_matrix(input_tensor):</span><br><span class="line">  result &#x3D; tf.linalg.einsum(&#39;bijc,bijd-&gt;bcd&#39;, input_tensor, input_tensor)</span><br><span class="line">  input_shape &#x3D; tf.shape(input_tensor)</span><br><span class="line">  num_locations &#x3D; tf.cast(input_shape[1]*input_shape[2], tf.float32)</span><br><span class="line">  return result&#x2F;(num_locations)</span><br></pre></td></tr></table></figure><h2 id="提取圖片及風格"><a href="#提取圖片及風格" class="headerlink" title="提取圖片及風格"></a>提取圖片及風格</h2><p>建立一個返回風格和圖片張量的模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StyleContentModel</span>(<span class="params">tf.keras.models.Model</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, style_layers, content_layers</span>):</span></span><br><span class="line">    super(StyleContentModel, self).__init__()</span><br><span class="line">    self.vgg =  vgg_layers(style_layers + content_layers)</span><br><span class="line">    self.style_layers = style_layers</span><br><span class="line">    self.content_layers = content_layers</span><br><span class="line">    self.num_style_layers = len(style_layers)</span><br><span class="line">    self.vgg.trainable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">    <span class="string">&quot;Expects float input in [0,1]&quot;</span></span><br><span class="line">    inputs = inputs*<span class="number">255.0</span></span><br><span class="line">    preprocessed_input = tf.keras.applications.vgg19.preprocess_input(inputs)</span><br><span class="line">    outputs = self.vgg(preprocessed_input)</span><br><span class="line">    style_outputs, content_outputs = (outputs[:self.num_style_layers], </span><br><span class="line">                                      outputs[self.num_style_layers:])</span><br><span class="line"></span><br><span class="line">    style_outputs = [gram_matrix(style_output)</span><br><span class="line">                     <span class="keyword">for</span> style_output <span class="keyword">in</span> style_outputs]</span><br><span class="line"></span><br><span class="line">    content_dict = &#123;content_name:value </span><br><span class="line">                    <span class="keyword">for</span> content_name, value </span><br><span class="line">                    <span class="keyword">in</span> zip(self.content_layers, content_outputs)&#125;</span><br><span class="line"></span><br><span class="line">    style_dict = &#123;style_name:value</span><br><span class="line">                  <span class="keyword">for</span> style_name, value</span><br><span class="line">                  <span class="keyword">in</span> zip(self.style_layers, style_outputs)&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;content&#x27;</span>:content_dict, <span class="string">&#x27;style&#x27;</span>:style_dict&#125;</span><br></pre></td></tr></table></figure><p>當在圖像上調用該模型時，該模型返回<code>style_layers</code>的語法矩陣（風格）和<code>content_layers</code>的內容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">extractor = StyleContentModel(style_layers, content_layers)</span><br><span class="line"></span><br><span class="line">results = extractor(tf.constant(content_image))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Styles:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> name, output <span class="keyword">in</span> sorted(results[<span class="string">&#x27;style&#x27;</span>].items()):</span><br><span class="line">  print(<span class="string">&quot;  &quot;</span>, name)</span><br><span class="line">  print(<span class="string">&quot;    shape: &quot;</span>, output.numpy().shape)</span><br><span class="line">  print(<span class="string">&quot;    min: &quot;</span>, output.numpy().min())</span><br><span class="line">  print(<span class="string">&quot;    max: &quot;</span>, output.numpy().max())</span><br><span class="line">  print(<span class="string">&quot;    mean: &quot;</span>, output.numpy().mean())</span><br><span class="line">  print()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Contents:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, output <span class="keyword">in</span> sorted(results[<span class="string">&#x27;content&#x27;</span>].items()):</span><br><span class="line">  print(<span class="string">&quot;  &quot;</span>, name)</span><br><span class="line">  print(<span class="string">&quot;    shape: &quot;</span>, output.numpy().shape)</span><br><span class="line">  print(<span class="string">&quot;    min: &quot;</span>, output.numpy().min())</span><br><span class="line">  print(<span class="string">&quot;    max: &quot;</span>, output.numpy().max())</span><br><span class="line">  print(<span class="string">&quot;    mean: &quot;</span>, output.numpy().mean())</span><br></pre></td></tr></table></figure><h2 id="運行梯度下降"><a href="#運行梯度下降" class="headerlink" title="運行梯度下降"></a>運行梯度下降</h2><p>使用此樣式和內容提取器，您現在可以實現樣式傳輸算法。 為此，請計算圖像輸出相對於每個目標的均方誤差，然後取這些損失的加權總和。</p><p>設置樣式和內容目標值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">style_targets = extractor(style_image)[<span class="string">&#x27;style&#x27;</span>]</span><br><span class="line">content_targets = extractor(content_image)[<span class="string">&#x27;content&#x27;</span>]</span><br></pre></td></tr></table></figure><p>定義一個 <code>tf.Variable</code>以包含要優化的圖像。 為了快速實現，請使用內容圖像對其進行初始化（<code>tf.Variable</code>必須與內容圖像具有相同的形狀）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用 tf.Variable 定義圖像</span></span><br><span class="line">image = tf.Variable(content_image)</span><br></pre></td></tr></table></figure><p>由於這是浮動圖像，因此定義一個函數以將像素值保持在0到1之間：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定義一個函數以將像素值保持在0到1之間</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip_0_1</span>(<span class="params">image</span>):</span></span><br><span class="line">  <span class="keyword">return</span> tf.clip_by_value(image, clip_value_min=<span class="number">0.0</span>, clip_value_max=<span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p>在此處使用adam做優化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用adam做優化</span></span><br><span class="line">opt = tf.optimizers.Adam(learning_rate=<span class="number">0.02</span>, beta_1=<span class="number">0.99</span>, epsilon=<span class="number">1e-1</span>)</span><br></pre></td></tr></table></figure><p>要對此進行優化，請使用兩個損失的加權組合來獲得總損失：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用兩個損失的加權組合來獲得總損失：</span></span><br><span class="line">style_weight=<span class="number">1e-2</span></span><br><span class="line">content_weight=<span class="number">1e4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">style_content_loss</span>(<span class="params">outputs</span>):</span></span><br><span class="line">    style_outputs = outputs[<span class="string">&#x27;style&#x27;</span>]</span><br><span class="line">    content_outputs = outputs[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    style_loss = tf.add_n([tf.reduce_mean((style_outputs[name]-style_targets[name])**<span class="number">2</span>) </span><br><span class="line">                           <span class="keyword">for</span> name <span class="keyword">in</span> style_outputs.keys()])</span><br><span class="line">    style_loss *= style_weight / num_style_layers</span><br><span class="line"></span><br><span class="line">    content_loss = tf.add_n([tf.reduce_mean((content_outputs[name]-content_targets[name])**<span class="number">2</span>) </span><br><span class="line">                             <span class="keyword">for</span> name <span class="keyword">in</span> content_outputs.keys()])</span><br><span class="line">    content_loss *= content_weight / num_content_layers</span><br><span class="line">    loss = style_loss + content_loss</span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><p>使用<code>tf.GradientTape</code>更新圖像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用tf.GradientTape更新圖像</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span>(<span class="params">image</span>):</span></span><br><span class="line">  <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    outputs = extractor(image)</span><br><span class="line">    loss = style_content_loss(outputs)</span><br><span class="line"></span><br><span class="line">  grad = tape.gradient(loss, image)</span><br><span class="line">  opt.apply_gradients([(grad, image)])</span><br><span class="line">  image.assign(clip_0_1(image))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start = time.time()</span><br><span class="line">epochs = <span class="number">10</span></span><br><span class="line">steps_per_epoch = <span class="number">100</span></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(epochs):</span><br><span class="line">  <span class="keyword">for</span> m <span class="keyword">in</span> range(steps_per_epoch):</span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line">    train_step(image)</span><br><span class="line">    print(<span class="string">&quot;.&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  display.clear_output(wait=<span class="literal">True</span>)</span><br><span class="line">  display.display(tensor_to_image(image))</span><br><span class="line">  print(<span class="string">&quot;Train step: &#123;&#125;&quot;</span>.format(step))</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">&quot;Total time: &#123;:.1f&#125;&quot;</span>.format(end-start))</span><br></pre></td></tr></table></figure><h2 id="合計變動的loss"><a href="#合計變動的loss" class="headerlink" title="合計變動的loss"></a>合計變動的loss</h2><p>這種基本實現的一個缺點是，它會產生許多高頻偽像。在圖像的高頻分量上使用顯式正則項來減少這些誤差。在樣式轉換中，這通常稱為<strong>總變化損失</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_pass_x_y</span>(<span class="params">image</span>):</span></span><br><span class="line">  x_var = image[:,:,<span class="number">1</span>:,:] - image[:,:,:<span class="number">-1</span>,:]</span><br><span class="line">  y_var = image[:,<span class="number">1</span>:,:,:] - image[:,:<span class="number">-1</span>,:,:]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x_var, y_var</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x_deltas, y_deltas = high_pass_x_y(content_image)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">10</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">imshow(clip_0_1(<span class="number">2</span>*y_deltas+<span class="number">0.5</span>), <span class="string">&quot;Horizontal Deltas: Original&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">imshow(clip_0_1(<span class="number">2</span>*x_deltas+<span class="number">0.5</span>), <span class="string">&quot;Vertical Deltas: Original&quot;</span>)</span><br><span class="line"></span><br><span class="line">x_deltas, y_deltas = high_pass_x_y(image)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">imshow(clip_0_1(<span class="number">2</span>*y_deltas+<span class="number">0.5</span>), <span class="string">&quot;Horizontal Deltas: Styled&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">imshow(clip_0_1(<span class="number">2</span>*x_deltas+<span class="number">0.5</span>), <span class="string">&quot;Vertical Deltas: Styled&quot;</span>)</span><br></pre></td></tr></table></figure><p>這顯示了高頻分量如何增加。</p><p>而且，該高頻分量基本上是邊緣檢測器。您可以從Sobel邊緣檢測器獲得類似的輸出，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize&#x3D;(14,10))</span><br><span class="line"></span><br><span class="line">sobel &#x3D; tf.image.sobel_edges(content_image)</span><br><span class="line">plt.subplot(1,2,1)</span><br><span class="line">imshow(clip_0_1(sobel[...,0]&#x2F;4+0.5), &quot;Horizontal Sobel-edges&quot;)</span><br><span class="line">plt.subplot(1,2,2)</span><br><span class="line">imshow(clip_0_1(sobel[...,1]&#x2F;4+0.5), &quot;Vertical Sobel-edges&quot;)</span><br></pre></td></tr></table></figure><p>與此相關的正則化損失是值的平方和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def total_variation_loss(image):</span><br><span class="line">  x_deltas, y_deltas &#x3D; high_pass_x_y(image)</span><br><span class="line">  return tf.reduce_sum(tf.abs(x_deltas)) + tf.reduce_sum(tf.abs(y_deltas))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_variation_loss(image).numpy()</span><br></pre></td></tr></table></figure><p>那證明了它的作用。 但是無需自己實現，TensorFlow包含一個標準實現：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.image.total_variation(image).numpy()</span><br></pre></td></tr></table></figure><h2 id="再次使用最優化方式"><a href="#再次使用最優化方式" class="headerlink" title="再次使用最優化方式"></a>再次使用最優化方式</h2><p>為<code>total_variation_loss</code>選擇一個權重:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total_variation_weight&#x3D;30</span><br></pre></td></tr></table></figure><p>將<code>train_step</code> 引入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@tf.function()</span><br><span class="line">def train_step(image):</span><br><span class="line">  with tf.GradientTape() as tape:</span><br><span class="line">    outputs &#x3D; extractor(image)</span><br><span class="line">    loss &#x3D; style_content_loss(outputs)</span><br><span class="line">    loss +&#x3D; total_variation_weight*tf.image.total_variation(image)</span><br><span class="line"></span><br><span class="line">  grad &#x3D; tape.gradient(loss, image)</span><br><span class="line">  opt.apply_gradients([(grad, image)])</span><br><span class="line">  image.assign(clip_0_1(image))</span><br></pre></td></tr></table></figure><p>重新初始化優化變量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image &#x3D; tf.Variable(content_image)</span><br></pre></td></tr></table></figure><p>並運行優化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">start &#x3D; time.time()</span><br><span class="line"></span><br><span class="line">epochs &#x3D; 10</span><br><span class="line">steps_per_epoch &#x3D; 100</span><br><span class="line"></span><br><span class="line">step &#x3D; 0</span><br><span class="line">for n in range(epochs):</span><br><span class="line">  for m in range(steps_per_epoch):</span><br><span class="line">    step +&#x3D; 1</span><br><span class="line">    train_step(image)</span><br><span class="line">    print(&quot;.&quot;, end&#x3D;&#39;&#39;)</span><br><span class="line">  display.clear_output(wait&#x3D;True)</span><br><span class="line">  display.display(tensor_to_image(image))</span><br><span class="line">  print(&quot;Train step: &#123;&#125;&quot;.format(step))</span><br><span class="line"></span><br><span class="line">end &#x3D; time.time()</span><br><span class="line">print(&quot;Total time: &#123;:.1f&#125;&quot;.format(end-start))</span><br></pre></td></tr></table></figure><p>最後，儲存訓練結果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">file_name &#x3D; &#39;stylized-image.png&#39;</span><br><span class="line">tensor_to_image(image).save(file_name)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">  from google.colab import files</span><br><span class="line">except ImportError:</span><br><span class="line">   pass</span><br><span class="line">else:</span><br><span class="line">  files.download(file_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> tensorflow </tag>
            
            <tag> 實作AI </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字串處理</title>
      <link href="/2020/07/12/string/"/>
      <url>/2020/07/12/string/</url>
      
        <content type="html"><![CDATA[<h1 id="字串"><a href="#字串" class="headerlink" title="字串"></a>字串</h1><h2 id="基礎用法"><a href="#基礎用法" class="headerlink" title="基礎用法"></a>基礎用法</h2><p>字串實例可以使用 [] 指定索引來存取相對應位置的字元，就有如字元陣列的操作一般</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str1;                 <span class="comment">// 內容為空字串</span></span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;sololearn&quot;</span>;   <span class="comment">// 內容為指定的字串常量</span></span><br></pre></td></tr></table></figure><p>可使用 str.length() 或 str.size()得知字串大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s=<span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s長度為&lt;&lt;s.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">輸出--&gt;s長度為<span class="number">11</span></span><br><span class="line">    --&gt;Hello World</span><br></pre></td></tr></table></figure><div class="note warning">            <p>從字串上的<strong>數字</strong>，僅是<strong>字元</strong>。若直接進行運算，計算的依據將為<a href="%5Bhttps%5D(https://zh.wikipedia.org/wiki/ASCII)"><strong>ASCII碼</strong></a>，結果會錯誤<br>若需要進行運算，則必須<strong>先減去’0’才行</strong></p>          </div><h2 id="倍數判斷"><a href="#倍數判斷" class="headerlink" title="倍數判斷"></a>倍數判斷</h2><p>倍數判斷是運用字串的最基本運用，從1到13的判別法是很基本的喔!!</p><div class="tabs" id="倍數判斷"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#倍數判斷-1">倍數判斷 1</button></li><li class="tab"><button type="button" data-href="#倍數判斷-2">倍數判斷 2</button></li><li class="tab"><button type="button" data-href="#倍數判斷-3">倍數判斷 3</button></li><li class="tab"><button type="button" data-href="#倍數判斷-4">倍數判斷 4</button></li><li class="tab"><button type="button" data-href="#倍數判斷-5">倍數判斷 5</button></li><li class="tab"><button type="button" data-href="#倍數判斷-6">倍數判斷 6</button></li><li class="tab"><button type="button" data-href="#倍數判斷-7">倍數判斷 7</button></li><li class="tab"><button type="button" data-href="#倍數判斷-8">倍數判斷 8</button></li><li class="tab"><button type="button" data-href="#倍數判斷-9">倍數判斷 9</button></li><li class="tab"><button type="button" data-href="#倍數判斷-10">倍數判斷 10</button></li><li class="tab"><button type="button" data-href="#倍數判斷-11">倍數判斷 11</button></li><li class="tab"><button type="button" data-href="#倍數判斷-12">倍數判斷 12</button></li><li class="tab"><button type="button" data-href="#倍數判斷-13">倍數判斷 13</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="倍數判斷-1"><h2 id="1的倍數"><a href="#1的倍數" class="headerlink" title="1的倍數"></a>1的倍數</h2><p>所有的數字(除了0)都是1的倍數喔~</p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-2"><h2 id="2的倍數"><a href="#2的倍數" class="headerlink" title="2的倍數"></a>2的倍數</h2><p>個位數字為偶數(含0)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">if</span>((s[length<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是2的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是2的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-3"><h2 id="3的倍數"><a href="#3的倍數" class="headerlink" title="3的倍數"></a>3的倍數</h2><p>各個數字和為3的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            tmp += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是3的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是3的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-4"><h2 id="4的倍數"><a href="#4的倍數" class="headerlink" title="4的倍數"></a>4的倍數</h2><p>末二位數為4的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> last_two = (s[length<span class="number">-2</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span>+s[length<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(last_two%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是4的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是4的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-5"><h2 id="5的倍數"><a href="#5的倍數" class="headerlink" title="5的倍數"></a>5的倍數</h2><p>個位數字為0或5</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">if</span>(s[length<span class="number">-1</span>]==<span class="string">&#x27;0&#x27;</span>||s[length<span class="number">-1</span>]==<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是5的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是5的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-6"><h2 id="6的倍數"><a href="#6的倍數" class="headerlink" title="6的倍數"></a>6的倍數</h2><p>同時是2和3的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">bool</span> is_two = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>((s[length<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            is_two = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            tmp += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> is_three = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(tmp%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">            is_three = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line">        <span class="keyword">if</span>(is_two&amp;&amp;is_three)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是6的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是6的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-7"><h2 id="7的倍數"><a href="#7的倍數" class="headerlink" title="7的倍數"></a>7的倍數</h2><p>由個數起每三位數字一節，各奇數節的和與偶數節的和相減，其差是7的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> tmp_A = <span class="number">0</span>,tmp_B = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i+=<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">3</span>;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;=length)&#123;</span><br><span class="line">                    tmp = tmp * <span class="number">10</span> + s[length-i-j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp_A +=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tmp_A&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;length;i+=<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">3</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;=length)&#123;</span><br><span class="line">                    tmp = tmp * <span class="number">10</span> + s[length-i-j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp_B +=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tmp_B&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="built_in">abs</span>(tmp_A-tmp_B);</span><br><span class="line">        <span class="keyword">if</span>(gap%<span class="number">7</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是7的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是7的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-8"><h2 id="8的倍數"><a href="#8的倍數" class="headerlink" title="8的倍數"></a>8的倍數</h2><p>末三位數為8的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> last_three = (s[length<span class="number">-3</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">100</span>+(s[length<span class="number">-2</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span>+s[length<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(last_three%<span class="number">8</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是8的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是8的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-9"><h2 id="9的倍數"><a href="#9的倍數" class="headerlink" title="9的倍數"></a>9的倍數</h2><p>各個數字和為9的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            tmp += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp%<span class="number">9</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是9的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是9的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-10"><h2 id="10的倍數"><a href="#10的倍數" class="headerlink" title="10的倍數"></a>10的倍數</h2><p>個位數字為0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">if</span>(s[length<span class="number">-1</span>]==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是10的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是10的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-11"><h2 id="11的倍數"><a href="#11的倍數" class="headerlink" title="11的倍數"></a>11的倍數</h2><p>奇數位數字和與偶數位數字和相差為11的倍數。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> tmp_A = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            tmp_A +=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tmp_B = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;length;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            tmp_B +=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="built_in">abs</span>(tmp_A-tmp_B);</span><br><span class="line">        <span class="keyword">if</span>(gap%<span class="number">11</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是11的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是11的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一種寫法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> tmp_A = <span class="number">0</span>,tmp_B = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                tmp_A +=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tmp_B +=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="built_in">abs</span>(tmp_A-tmp_B);</span><br><span class="line">        <span class="keyword">if</span>(gap%<span class="number">11</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是11的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是11的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-12"><h2 id="12的倍數"><a href="#12的倍數" class="headerlink" title="12的倍數"></a>12的倍數</h2><p>同時是3和4的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            tmp += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> is_three = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(tmp%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">            is_three = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line">       <span class="keyword">int</span> last_two = (s[length<span class="number">-2</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span>+s[length<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">       <span class="keyword">bool</span> is_four = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(last_two%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">            is_four = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(is_three&amp;&amp;is_four)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是12的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是12的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="倍數判斷-13"><h2 id="13的倍數"><a href="#13的倍數" class="headerlink" title="13的倍數"></a>13的倍數</h2><p>由個數起每三位數字一節，各奇數節的和與偶數節的和相減，其差是13的倍數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.size();</span><br><span class="line">        <span class="keyword">int</span> tmp_A = <span class="number">0</span>,tmp_B = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i+=<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">3</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;=length)&#123;</span><br><span class="line">                    tmp = tmp * <span class="number">10</span> + s[length-i-j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp_A +=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tmp_A&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;length;i+=<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">3</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;=length)&#123;</span><br><span class="line">                    tmp = tmp * <span class="number">10</span> + s[length-i-j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp_B +=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;tmp_B&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="built_in">abs</span>(tmp_A-tmp_B);</span><br><span class="line">        <span class="keyword">if</span>(gap%<span class="number">13</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是13的倍數\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是13的倍數\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h1><p>stringstream是一個C++底下的類別，專門拿來讀取字串並且處理，很多時候拿來做字串的切割，或者是int跟string類別之間的轉換。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>標頭檔: <sstream><br>此時的stringstream就像個橋樑，可以負責當中間轉換的部分。<br>stringstream提供了&gt;&gt;與&lt;&lt;運算子來讀取或寫入:<br>_ &gt;&gt;代表寫入stringstream中，&lt;&lt;代表從stringstream拿出</p><h2 id="int轉成string"><a href="#int轉成string" class="headerlink" title="int轉成string"></a>int轉成string</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> s1;</span><br><span class="line">    <span class="keyword">int</span> number =<span class="number">1234</span>;</span><br><span class="line">    <span class="built_in">string</span> output;<span class="comment">//要把number轉成字串型態的容器</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;number=&quot;</span>&lt;&lt;number&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//顯示number=1234;</span></span><br><span class="line">    </span><br><span class="line">    s1&lt;&lt;number; <span class="comment">//將以int宣告的number放入我們的stringstream中</span></span><br><span class="line">    s1&gt;&gt;output;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;output=&quot;</span>&lt;&lt;output&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//顯示output=1234;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是我們兩行顯示都是1234但是他的資料型態卻已經不一樣了，第一個是int的型態，第二行則是string的型態。</p><h2 id="string轉成int"><a href="#string轉成int" class="headerlink" title="string轉成int"></a>string轉成int</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> string_to_int;</span><br><span class="line">    <span class="built_in">string</span> s1=<span class="string">&quot;12345&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> n1;</span><br><span class="line"></span><br><span class="line">    string_to_int&lt;&lt;s1;</span><br><span class="line">    <span class="comment">//也可以使用string_to_int.str(s1);</span></span><br><span class="line">    <span class="comment">//或者 s1=string_to_int.str();</span></span><br><span class="line">    </span><br><span class="line">    string_to_int&gt;&gt;n1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;s1=&quot;</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//s1=12345</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;n1=&quot;</span>&lt;&lt;n1&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//n1=12345</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分割字串"><a href="#分割字串" class="headerlink" title="分割字串"></a>分割字串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> s1;</span><br><span class="line">    <span class="keyword">int</span> i1;<span class="comment">//用來存放string轉成int的資料</span></span><br><span class="line">    <span class="built_in">string</span> line;<span class="comment">//讀入每行的資料</span></span><br><span class="line">    getline(<span class="built_in">cin</span>,line);<span class="comment">//讀入整行的資料</span></span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//計算總和</span></span><br><span class="line">    s1.clear();<span class="comment">//清除緩存</span></span><br><span class="line">    s1&lt;&lt;line; <span class="comment">//也可以使用s1.str(line);</span></span><br><span class="line">    <span class="comment">//還可以寫成line=s1.str();</span></span><br><span class="line">    <span class="keyword">while</span>(s1&gt;&gt;i1)</span><br><span class="line">        sum+=i1;<span class="comment">//把每個轉換成int的數字都丟入sum累加</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 超基礎之道 </tag>
            
            <tag> 語法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圖論-基礎</title>
      <link href="/2020/06/16/graph/"/>
      <url>/2020/06/16/graph/</url>
      
        <content type="html"><![CDATA[<h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>DFS<strong>深度</strong>優先走訪，顧名思義，在我們尋找解答時，我們必須將一種狀況<strong>探究到底</strong>，然後再去尋找下一個狀態。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>運用遞迴的方式，<strong>不斷的</strong>往合理的狀況<strong>往下探索</strong>，直到無法在往下探索後<strong>返回</strong>，直到把所有狀況都跑過一遍，有時需要用到stack去幫忙輔助。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>用於<strong>拓撲排序</strong>，解決需要<strong>圖形回溯</strong>的問題，檢測<strong>圖形中的循環</strong>，查找<strong>兩個節點之間的所有路徑</strong>等。</p><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="c129-00572-Oil-Deposits"><a href="#c129-00572-Oil-Deposits" class="headerlink" title="c129: 00572 - Oil Deposits"></a>c129: 00572 - Oil Deposits</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>找出這塊地包含幾個不同的oil deposit。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>開兩個二維陣列，一個紀錄圖形，另一個紀錄是否有走過，如果有油且未走過總是就加一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=r||j&lt;<span class="number">0</span>||j&gt;=c||visited[i][j]==<span class="number">1</span>||mp[i][j]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visited[i][j]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    dfs(i<span class="number">-1</span>,j<span class="number">-1</span>);</span><br><span class="line">    dfs(i<span class="number">-1</span>,j);</span><br><span class="line">    dfs(i<span class="number">-1</span>,j+<span class="number">1</span>);</span><br><span class="line">    dfs(i,j<span class="number">-1</span>);</span><br><span class="line">    dfs(i,j+<span class="number">1</span>);</span><br><span class="line">    dfs(i+<span class="number">1</span>,j<span class="number">-1</span>);</span><br><span class="line">    dfs(i+<span class="number">1</span>,j);</span><br><span class="line">    dfs(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &amp;&amp; r&gt;<span class="number">0</span> &amp;&amp; c&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">                visited[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;@&#x27;</span>&amp;&amp;visited[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="a229-括號匹配問題"><a href="#a229-括號匹配問題" class="headerlink" title="a229: 括號匹配問題"></a>a229: 括號匹配問題</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>請寫一個程式把所有合法括號匹配方式列出來!<br>合法匹配的括號，從答案列的開頭到答案列某一點，左括弧次數永遠大於等於右括弧!</p><h3 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h3><p>使用DFS，如果途中( &gt; )則直接return，直到放置數達到n*2為止</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s; <span class="keyword">int</span> a, b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.size() == n * <span class="number">2</span>) &#123; <span class="keyword">if</span>(a == b) <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        s.push_back(<span class="string">&#x27;(&#x27;</span>); a ++; dfs(n); s.pop_back(); a--;</span><br><span class="line">        s.push_back(<span class="string">&#x27;)&#x27;</span>); b ++; dfs(n); s.pop_back(); b--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) dfs(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><h2 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h2><p>BFS<strong>廣度</strong>優先走訪，顧名思義，在我們尋找解答時，就像是在RPG上解任務一樣，將每個<strong>相同等級 層數</strong>的任務做完，並將其開通的<strong>子任務 子節點</strong>都記錄下來，等做完同等級的之後，在往下把下一個等級的任務解掉，直到所有任務都做完。</p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p>運用迴圈的方式，從第一個點開始將鄰近的點加入佇列內部，等到點都加入完後，就往下推找佇列中的下個點，直到佇列的每個點都被探詢過。</p><h2 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h2><p>用於尋找<strong>兩個節點之間的最短路徑</strong>、查找各點之間<strong>所有相鄰的點</strong>，以及測試圖是<strong>否為二分圖</strong>等。</p><h2 id="例題-1"><a href="#例題-1" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="a982-迷宮問題-1"><a href="#a982-迷宮問題-1" class="headerlink" title="a982: 迷宮問題#1"></a>a982: 迷宮問題#1</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你一個NXN格的迷宮, 迷宮中以#代表障礙物, 以.代表路, 求包括起點和終點, 最少路徑的長度。</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Maze[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//紀錄最少步數</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point k,next;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N) &#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;point&gt; qu;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;N&amp;&amp;getchar();y++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;N;x++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;Maze[y][x]);</span><br><span class="line">                Maze[y][x]=(Maze[y][x]==<span class="string">&#x27;.&#x27;</span>?<span class="number">-1</span>:<span class="number">-2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        k.x=<span class="number">1</span>,k.y=<span class="number">1</span>;</span><br><span class="line">        qu.push(k);</span><br><span class="line">        Maze[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty()) &#123;</span><br><span class="line">            k = qu.front();qu.pop();</span><br><span class="line">            next.x=k.x<span class="number">-1</span>,next.y=k.y;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">            next.x=k.x+<span class="number">1</span>,next.y=k.y;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">            next.x=k.x,next.y=k.y<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">            next.x=k.x,next.y=k.y+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Maze[next.y][next.x]==<span class="number">-1</span>) </span><br><span class="line">                qu.push(next),Maze[next.y][next.x]=Maze[k.y][k.x]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Maze[N<span class="number">-2</span>][N<span class="number">-2</span>]&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Maze[N<span class="number">-2</span>][N<span class="number">-2</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No solution!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="d663-d663-11730-Number-Transformation"><a href="#d663-d663-11730-Number-Transformation" class="headerlink" title="d663: d663: 11730 - Number Transformation"></a>d663: d663: 11730 - Number Transformation</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你一個數字S，你可以將A轉換成B藉由加上一個X，X是一個A的質因數(1跟A不考慮進去)，現在你的工作就是找出最少需要轉換次數把S轉換成T</p><h3 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h3><p>使用BFS將所有S+X的狀況都加到佇列內部，並記錄下次數，直到找到T為止，記得，如果有記錄過S+X狀況的話，就不需要再紀錄一次!!</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> primes[<span class="number">1050</span>], pointer, S, T, minn, cases, buffer1, buffer2;</span><br><span class="line"><span class="keyword">bool</span> notprime[<span class="number">1050</span>] = &#123; <span class="literal">true</span>, <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">1050</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!notprime[i])</span><br><span class="line">primes[pointer++] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i * primes[j] &lt; <span class="number">1050</span> &amp;&amp; j &lt; pointer; j++)</span><br><span class="line">notprime[i * primes[j]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>); Initialize();</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; BFS, times;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; S &gt;&gt; T, S || T) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; ++cases &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (S == T) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">bool</span> have[<span class="number">1001</span>] = &#123;&#125;;</span><br><span class="line">BFS.push(S), times.push(<span class="number">1</span>), have[S] = <span class="literal">true</span>, minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">while</span> (!BFS.empty()) &#123;</span><br><span class="line">buffer1 = BFS.front(), buffer2 = <span class="built_in">sqrt</span>(buffer1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; primes[i] &lt; buffer1; i++)</span><br><span class="line"><span class="keyword">if</span> (!(buffer1 % primes[i])) &#123;</span><br><span class="line">buffer2 = buffer1 + primes[i];</span><br><span class="line"><span class="keyword">if</span> (buffer2 &lt; T &amp;&amp; !have[buffer2])</span><br><span class="line">BFS.push(buffer2), times.push(times.front() + <span class="number">1</span>), have[buffer2] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buffer2 == T &amp;&amp; times.front() &lt; minn)</span><br><span class="line">minn = times.front();</span><br><span class="line">&#125;</span><br><span class="line">BFS.pop(), times.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minn == <span class="number">2147483647</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">cout</span> &lt;&lt; minn &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="最短路徑"><a href="#最短路徑" class="headerlink" title="最短路徑"></a>最短路徑</h1><p>BFS可以求得短的路徑長，只不過呢，他只能就權值一樣的最短路，也就是說，每條路都一樣長的狀況才能用。<br>現在，給你一張地圖，且這張圖有了每條邊的長度不盡相同，不能再用BFS的話，就要嘗試接下來的演算法囉</p><h1 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h1><h2 id="想法-2"><a href="#想法-2" class="headerlink" title="想法"></a>想法</h2><p>Floyd-Warshall是尋找最短路徑的一種方式，算是超簡單有好用的一種，主要是處理<strong>全圖</strong>的最短(最長)路徑。<br>換句話說，用這個方法處理過一次就可以輕鬆取得任意兩點的距離了，甚至還可以處理負邊。<br>只不過…，他超慢就是了QQ</p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><p>作法也很簡單就是，<strong>抄捷徑</strong>而已，每次窮舉兩個點只要中間有一個點可以更符合題意的路徑，就更新為那個路徑。<br>如果是尋找最短路徑，式子大概長這樣 $dis[i][j] = min(dis[i][j],dis[i][k]+dis[k][j])$<br>相對的如果是尋找最長路徑的話，就會是$dis[i][j] = max(dis[i][j],dis[i][k]+dis[k][j]$<br>三層for迴圈就能輕鬆做到囉</p><h2 id="例題-2"><a href="#例題-2" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li><li class="tab"><button type="button" data-href="#例題-3">例題 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="d908-4-最佳路徑"><a href="#d908-4-最佳路徑" class="headerlink" title="d908: 4. 最佳路徑"></a>d908: 4. 最佳路徑</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你一個有向圖，輸出擁有最大權重總和的路徑之權重總和值。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>就是一題超基本的floyd-warshall而已</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> c;<span class="keyword">int</span> i, j;</span><br><span class="line">   <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;n)&#123;</span><br><span class="line">      <span class="keyword">int</span> w,m=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">char</span> a ,b;</span><br><span class="line">      <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class="line">            <span class="keyword">if</span>(w &gt; d[a-<span class="string">&#x27;A&#x27;</span>][b-<span class="string">&#x27;A&#x27;</span>]) d[a-<span class="string">&#x27;A&#x27;</span>][b-<span class="string">&#x27;A&#x27;</span>]=w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    <span class="keyword">if</span> ((d[i][k] * d[k][j] != <span class="number">0</span>) &amp;&amp; (i != j))</span><br><span class="line">                            d[i][j] = max(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)  m=max(m,d[c-<span class="string">&#x27;A&#x27;</span>][j]);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="a674-10048-Audiophobia"><a href="#a674-10048-Audiophobia" class="headerlink" title="a674: 10048 - Audiophobia"></a>a674: 10048 - Audiophobia</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>就是要你求A到B點途中的最小值</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一樣是窮舉兩點，找中間那點，只不過式子會變成這樣<br>$d[i][j] = d[j][i] = min(d[i][j],max(d[i][k],d[k][j]))$</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> c,s,q,idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;s&gt;&gt;q&amp;&amp;(c||s||q)&amp;&amp;++idx)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">26</span>;i++)d[i][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>,t;i&lt;s;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;t; d[x][y] = d[y][x] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k&lt;=<span class="number">100</span>;k++)<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=<span class="number">100</span>;j++)</span><br><span class="line">            d[i][j] = d[j][i] = min(d[i][j],max(d[i][k],d[k][j]));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case #&quot;</span>&lt;&lt;idx&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="keyword">if</span>(d[x][y]&gt;<span class="number">400000</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no path\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;d[x][y]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-3"><h2 id="c128-Heavy-Cargo"><a href="#c128-Heavy-Cargo" class="headerlink" title="c128: Heavy Cargo"></a>c128: Heavy Cargo</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>求A到B途中的最大值</p><h3 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h3><p>一樣是窮舉兩點，找中間那點，只不過式子會變成這樣<br>$d[i][j] = d[j][i] = max(d[i][j],min(d[i][k],d[k][j]))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> idx, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mp.count(str)) <span class="keyword">return</span> mp[str];</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        mp[str] = idx; idx++;</span><br><span class="line">        <span class="keyword">return</span> mp[str];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r&amp;&amp;++cnt)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        idx = <span class="number">0</span>; mp.clear();</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">-1</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">string</span> s1, s2;</span><br><span class="line">        <span class="keyword">int</span> temp, n1, n2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; temp;</span><br><span class="line">            n1 = getid(s1),n2 = getid(s2);</span><br><span class="line">            a[n1][n2] = a[n2][n1] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">        n1 = getid(s1); n2 = getid(s2);</span><br><span class="line">        <span class="comment">//Floyd-Warshall</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n<span class="number">-1</span>; j++)<span class="keyword">for</span> (<span class="keyword">int</span> k = j+<span class="number">1</span>; k &lt; n; k++)</span><br><span class="line">            a[j][k] = a[k][j] = max(a[j][k], min(a[j][i], a[i][k]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\n%d tons\n&quot;</span>, cnt, a[n1][n2]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><h2 id="想法-3"><a href="#想法-3" class="headerlink" title="想法"></a>想法</h2><p>是解決單源最短路問題(SSSP)問題的常用方式，<br>從一個指定的點開始向外拓張，連結的下一個點權重即為自己當前的權重加上路徑長<br>如果下一個點已經有標記權重了，就更新為比較小的那一個值，直到都跑完為止<br>其演示在此:<br><img src= "/img/loading.gif" data-lazy-src="https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif"></p><h2 id="作法-1"><a href="#作法-1" class="headerlink" title="作法"></a>作法</h2><ol><li>n-1次循環</li><li>找到偽標記的d最小點</li><li>標記，並鬆弛(更新)他的邊</li></ol><h2 id="heap優化"><a href="#heap優化" class="headerlink" title="heap優化"></a>heap優化</h2><p>用STL中的優先隊列(priority_queue)實現：</p><p>while(優先隊列非空){<br>  提出隊頭，鬆弛他的邊<br>  鬆弛了的&lt;新距離,點&gt;入隊<br>}</p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;PII,<span class="built_in">vector</span>&lt;PII&gt;,greater&lt;PII&gt; &gt; q;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;  </span><br><span class="line">    <span class="keyword">int</span> w=q.top().first, u=q.top().second;</span><br><span class="line">    q.pop();   </span><br><span class="line">    <span class="keyword">if</span>(b[u])<span class="keyword">continue</span>; b[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123; </span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[u]+e[i].w&lt;d[v])&#123;</span><br><span class="line">            d[v]=d[u]+e[i].w;</span><br><span class="line">            q.push(PII(d[v],v));  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例題-3"><a href="#例題-3" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="d793-acm-929-NumberMaze"><a href="#d793-acm-929-NumberMaze" class="headerlink" title="d793-acm-929-NumberMaze"></a>d793-acm-929-NumberMaze</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>數字迷宮為一個二維的數字 (0-9) 陣列。你可以用直角方向 (東、西、南、北) 在迷宮中尋訪。假設每一格的數字代表造訪該格的成本，那麼求出從入口走到出口所需的最小成本不見得很容易哦。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把這個二為陣列想像成一個無項圖，每個格子與四個方格連接。然後在實作Dijkstra就好了</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Map[MAX][MAX],dp[MAX][MAX],v[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> mv[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> x,y,dis;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; mynode) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mynode.dis &lt; dis);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ncase,n,m;</span><br><span class="line">    <span class="built_in">priority_queue</span> &lt;Node&gt; pq;</span><br><span class="line">    Node mynode;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ncase;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;ncase;m++)&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)  dp[i][j]=<span class="number">199999999</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)  <span class="built_in">cin</span> &gt;&gt; Map[i][j];</span><br><span class="line">        mynode.x=<span class="number">0</span>,mynode.y=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=mynode.dis=Map[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        pq.push(mynode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            mynode=pq.top(); pq.pop();</span><br><span class="line">            v[mynode.y][mynode.x]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                Node tmp;</span><br><span class="line">                <span class="keyword">int</span> nowx = mynode.x+mv[i][<span class="number">0</span>],nowy = mynode.y+mv[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ((nowx&lt;<span class="number">0</span>)||(nowx&gt;=m)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> ((nowy&lt;<span class="number">0</span>)||(nowy&gt;=n)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (v[nowy][nowx]==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[nowy][nowx]&gt;(dp[nowy][nowx]+Map[nowy][nowx])) &#123;</span><br><span class="line">                        dp[nowy][nowx]=dp[mynode.y][mynode.x]+Map[nowy][nowx];</span><br><span class="line">                        tmp.x=nowx,tmp.y=nowy;</span><br><span class="line">                        tmp.dis=dp[nowy][nowx];</span><br><span class="line">                        pq.push(tmp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; dp[n<span class="number">-1</span>][m<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><h3 id="想法-4"><a href="#想法-4" class="headerlink" title="想法"></a>想法</h3><p>一樣是求單源最短路問題(SSSP)的方法，是Bellman-Ford的優化，Bellman-Ford:每次對所有的邊鬆弛。可以計算出有負邊無負環的最短路，並且可以判斷是否存在負環。</p><h3 id="作法-2"><a href="#作法-2" class="headerlink" title="作法"></a>作法</h3><p>起點push到queue裡面</p><p>while(優先隊列非空){<br>  提出隊頭，鬆弛他的邊<br>  把所有被更新到的點都push到queue裡面<br>}</p><h3 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">    <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">    b[u]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[u]+e[i].w&lt;d[v])&#123;</span><br><span class="line">            d[v]=d[u]+e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(!b[v])b[v]=<span class="literal">true</span>,q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例題-4"><a href="#例題-4" class="headerlink" title="例題"></a>例題</h3><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="c125-00534-Frogger"><a href="#c125-00534-Frogger" class="headerlink" title="c125: 00534 - Frogger"></a>c125: 00534 - Frogger</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給你Freddy所在的石頭、Fiona所在的石頭，以及湖中所有其他石頭的座標，你的任務是算出介於Freddy和Fiona所在石頭間的蛙跳距離。</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>明顯是一個基本的SSSP問題，所以直接運用SPFA的方式解決吧!<br>從起點到終點的每條路都有一個石頭間最大距離，<br>在每條路的石頭間最大距離中，找最小值。<br>(也可以使用 Dijkstra解決喔~~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 201</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Coord</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getDistance</span><span class="params">(Coord&amp; a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - a.x)*(x - a.x) + (y - a.y)*(y - a.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;stone[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, Case = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="comment">//第 0 和 1 分別為起點和終點</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;stone[i].x, &amp;stone[i].y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\nFrog Distance = %.3f\n\n&quot;</span>, Case++, SPFA(n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> d[N] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">bool</span> inQ[<span class="number">101</span>] = &#123;&#125;;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)  d[i] = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line">    Q.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = Q.front(), Q.pop();</span><br><span class="line">        inQ[idx] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> max = max(d[idx], stone[idx].getDistance(stone[i]));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (max &lt; d[i]) &#123;</span><br><span class="line">                d[i] = max;</span><br><span class="line">                <span class="keyword">if</span> (!inQ[i]) Q.push(i), inQ[i] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="附註"><a href="#附註" class="headerlink" title="附註"></a>附註</h3><p>如果是稠密圖，Dijkstra+heap比SPFA快。<br>稀疏圖則SPFA更快。 SPFA可以有SLF和LLL兩種優化，SLF就是d比隊頭小就插入隊頭，否則插入隊尾。</p><h1 id="最小生成樹"><a href="#最小生成樹" class="headerlink" title="最小生成樹"></a>最小生成樹</h1><h2 id="生成樹"><a href="#生成樹" class="headerlink" title="生成樹"></a>生成樹</h2><p>生成樹條件:</p><ol><li>一棵包含圖上所有點的樹，稱作該圖的生成樹</li><li>一張圖的生成樹可能會有很多種</li><li>完全連通圖才有生成樹 (不連通時，則稱為生成森林)</li><li>生成樹的權重為樹上每條邊的權重總和</li></ol><p>至於<strong>最小生成樹</strong>就是權重和最小的生成樹<br>概念上就是這樣:<br><img src= "/img/loading.gif" data-lazy-src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Minimum_spanning_tree.svg/1024px-Minimum_spanning_tree.svg.png"></p><h2 id="作法-3"><a href="#作法-3" class="headerlink" title="作法"></a>作法</h2><ol><li>圖上每一個點，各自是一棵最小生成子樹MSS。</li><li>圖上所有邊，依照權重大小，由小到大排序。</li><li>嘗試圖上所有邊，作為最小生成樹（森林）的邊：<ol><li>兩端點分別位於兩棵MSS，也就是產生了橋：<ol><li>用這條邊連結兩棵MSS，合併成一棵MSS。</li><li>這條邊是最小生成樹（森林）上的邊。</li></ol></li><li>兩端點皆位於同一棵MSS，也就是產生了環：<ol><li>捨棄這條邊。</li></ol></li></ol></li></ol><p>-&gt;所以需要使用到<strong>並查集</strong>喔~~</p><h2 id="例題-5"><a href="#例題-5" class="headerlink" title="例題"></a>例題</h2><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="c125-00534-Frogger"><a href="#c125-00534-Frogger" class="headerlink" title="c125: 00534 - Frogger"></a>c125: 00534 - Frogger</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給定一個無向圖，求最小生成樹</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>這是一題最小生成樹的模板題，刻個幾次就熟了</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s,e,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Tree a)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w&gt;w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[a] == a) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p[a] = Find(p[a]);</span><br><span class="line">        <span class="keyword">return</span> p[a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    Tree dot[m];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) p[i]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;dot[i].s&gt;&gt;dot[i].e&gt;&gt;dot[i].w;</span><br><span class="line">    sort(dot,dot+m);</span><br><span class="line">    ll ans=<span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,x,y;i&lt;m;i++) &#123;</span><br><span class="line">        x = Find(dot[i].e);</span><br><span class="line">        y = Find(dot[i].s);</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p[y] = x;</span><br><span class="line">            ans +=dot[i].w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt;n&gt;&gt;m)</span><br><span class="line">        Kruskal(n,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="b181-2-網路設計"><a href="#b181-2-網路設計" class="headerlink" title="b181: 2. 網路設計"></a>b181: 2. 網路設計</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>給你一個字串形式的端點及路徑長，求出其的最小生成樹<br>第一行輸出需要以字串形式輸出連結的狀況<br>第二行輸出權重</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>難的部分就是如何處理其為字串的問題，一開始就將輸入的端點用兩個map對應:字串對數字，數字對字串，每加入一個邊時就兩個端點加入map中，再開一個陣列紀錄圖形，最後再用使用map跟陣列做轉換就好了</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> A,B,w,num;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(str a)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w&gt;w|| (a.w==w &amp;&amp; a.num&gt;num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; Map ;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; reMap ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">100</span>] ;</span><br><span class="line">str E[<span class="number">100</span>] ;</span><br><span class="line"><span class="keyword">int</span> Ans[<span class="number">100</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x)<span class="keyword">return</span> x ;</span><br><span class="line">    <span class="keyword">return</span> root(fa[x]) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> E[a].A&lt;E[b].A || (E[a].A==E[b].A &amp;&amp; E[a].B&lt;E[b].B) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N ,M ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N ,&amp;M ))&#123;</span><br><span class="line">        Map.clear() ;</span><br><span class="line">        reMap.clear() ;</span><br><span class="line">        <span class="comment">//input -------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> A[<span class="number">30</span>],B[<span class="number">30</span>] ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;M ;i++ )&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>,&amp;A ,&amp;B ,&amp;E[i].w ) ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Map[ (<span class="built_in">string</span>)A ]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> c ;<span class="keyword">int</span> in ;</span><br><span class="line">                <span class="built_in">sscanf</span>(A,<span class="string">&quot;%c%d&quot;</span>,&amp;c ,&amp;in ) ;</span><br><span class="line">                Map[(<span class="built_in">string</span>)A]=in ;</span><br><span class="line">                reMap[in]=(<span class="built_in">string</span>)A ;</span><br><span class="line">            &#125;</span><br><span class="line">            E[i].A=Map[(<span class="built_in">string</span>)A] ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Map[ (<span class="built_in">string</span>)B ]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> c ;<span class="keyword">int</span> in ;</span><br><span class="line">                <span class="built_in">sscanf</span>(B,<span class="string">&quot;%c%d&quot;</span>,&amp;c ,&amp;in) ;</span><br><span class="line">                Map[(<span class="built_in">string</span>)B]=in ;</span><br><span class="line">                reMap[in]=(<span class="built_in">string</span>)B ;</span><br><span class="line">            &#125;</span><br><span class="line">            E[i].B=Map[(<span class="built_in">string</span>)B] ;</span><br><span class="line">            E[i].num=i ;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(E,E+M) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MST ---------------</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span> ;i&lt;=N ;i++ )fa[i]=i ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Ansl=<span class="number">0</span> ,count=<span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;M ;i++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> a=root( E[i].A ) ;</span><br><span class="line">            <span class="keyword">int</span> b=root( E[i].B ) ;</span><br><span class="line">            <span class="keyword">if</span> (a==b)<span class="keyword">continue</span> ;</span><br><span class="line"></span><br><span class="line">            fa[b]=a ;</span><br><span class="line">            Ans[Ansl++]=i ;</span><br><span class="line">            count+=E[i].w ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//output ------------</span></span><br><span class="line">        sort(Ans,Ans+Ansl,cmp) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;Ansl ;i++ )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; reMap[ E[ Ans[i] ].A ] &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; reMap[ E[ Ans[i] ].B ] &lt;&lt;<span class="string">&quot;) &quot;</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d\n&quot;</span>,count) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><p>圖論基礎到結束囉~~</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圖片分割</title>
      <link href="/2020/06/12/AI-9/"/>
      <url>/2020/06/12/AI-9/</url>
      
        <content type="html"><![CDATA[<h1 id="圖片分割"><a href="#圖片分割" class="headerlink" title="圖片分割"></a>圖片分割</h1><h2 id="什麼是圖片分割"><a href="#什麼是圖片分割" class="headerlink" title="什麼是圖片分割"></a>什麼是圖片分割</h2><p>到目前為止，您已經看到了圖像分類，其中網絡的任務是為輸入圖像分配標籤或類。但是，假設您想知道對像在<strong>圖像中的位置</strong>，該<strong>對象的形狀</strong>，<strong>哪個像素屬於哪個對像</strong>等，在這種情況下，您將需要對圖像進行分段，即圖像的每個像素都是給一個標籤。因此，<strong>圖像分割</strong>的任務是訓練一個神經網絡，以輸出圖像的逐像素蒙版。這有助於以低得多的級別（即像素級別）理解圖像。圖像分割在醫學成像，自動駕駛汽車和衛星成像等領域有許多應用。<br>數據集由圖像，其相應的標籤和逐像素蒙版組成。遮罩基本上是每個像素的標籤。<br>每個像素都具有以下三種類別之一：<br>第1類：屬於<strong>寵物</strong>的像素。<br>第2類：<strong>像素與寵物接壤</strong>。<br>第3類：<strong>以上均不存在</strong>。</p><h1 id="載入tensorflow資料"><a href="#載入tensorflow資料" class="headerlink" title="載入tensorflow資料"></a>載入tensorflow資料</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!pip install git+https://github.com/tensorflow/examples.git</span><br><span class="line">!pip install -U tfds-nightly</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow_examples.models.pix2pix <span class="keyword">import</span> pix2pix</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow_datasets <span class="keyword">as</span> tfds</span><br><span class="line">tfds.disable_progress_bar()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> clear_output</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h2 id="下載Oxford-IIIT-Pets數據集"><a href="#下載Oxford-IIIT-Pets數據集" class="headerlink" title="下載Oxford-IIIT Pets數據集"></a>下載Oxford-IIIT Pets數據集</h2><p>該數據集已經包含在TensorFlow數據集中，只需下載即可。分割蒙版包含在3+版中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset, info = tfds.load(<span class="string">&#x27;oxford_iiit_pet:3.*.*&#x27;</span>, with_info=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>以下代碼對翻轉圖像進行了簡單的擴充。另外，<strong>圖像被標準化為[0,1]**。<br>最後，如上所述，分割蒙版中的像素被標記為 : {1，2，3}。<br>為了方便起見，讓我們從</strong>分段掩碼中減去1**，得到的標籤為：{0，1，2}。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">input_image, input_mask</span>):</span></span><br><span class="line">  input_image = tf.cast(input_image, tf.float32) / <span class="number">255.0</span></span><br><span class="line">  input_mask -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> input_image, input_mask</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image_train</span>(<span class="params">datapoint</span>):</span></span><br><span class="line">  input_image = tf.image.resize(datapoint[<span class="string">&#x27;image&#x27;</span>], (<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line">  input_mask = tf.image.resize(datapoint[<span class="string">&#x27;segmentation_mask&#x27;</span>], (<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> tf.random.uniform(()) &gt; <span class="number">0.5</span>:</span><br><span class="line">    input_image = tf.image.flip_left_right(input_image)</span><br><span class="line">    input_mask = tf.image.flip_left_right(input_mask)</span><br><span class="line"></span><br><span class="line">  input_image, input_mask = normalize(input_image, input_mask)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> input_image, input_mask</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image_test</span>(<span class="params">datapoint</span>):</span></span><br><span class="line">  input_image = tf.image.resize(datapoint[<span class="string">&#x27;image&#x27;</span>], (<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line">  input_mask = tf.image.resize(datapoint[<span class="string">&#x27;segmentation_mask&#x27;</span>], (<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">  input_image, input_mask = normalize(input_image, input_mask)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> input_image, input_mask</span><br></pre></td></tr></table></figure><p>數據集已經包含所需的測試和訓練拆分，因此讓我們繼續使用相同的拆分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TRAIN_LENGTH = info.splits[<span class="string">&#x27;train&#x27;</span>].num_examples</span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line">BUFFER_SIZE = <span class="number">1000</span></span><br><span class="line">STEPS_PER_EPOCH = TRAIN_LENGTH // BATCH_SIZE</span><br><span class="line"></span><br><span class="line">train = dataset[<span class="string">&#x27;train&#x27;</span>].map(load_image_train, num_parallel_calls=tf.data.experimental.AUTOTUNE)</span><br><span class="line">test = dataset[<span class="string">&#x27;test&#x27;</span>].map(load_image_test)</span><br><span class="line"></span><br><span class="line">train_dataset = train.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()</span><br><span class="line">train_dataset = train_dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)</span><br><span class="line">test_dataset = test.batch(BATCH_SIZE)</span><br></pre></td></tr></table></figure><p>讓我們來看一個圖像示例及其來自數據集中的相應蒙版。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">display_list</span>):</span></span><br><span class="line">  plt.figure(figsize=(<span class="number">15</span>, <span class="number">15</span>))</span><br><span class="line"></span><br><span class="line">  title = [<span class="string">&#x27;Input Image&#x27;</span>, <span class="string">&#x27;True Mask&#x27;</span>, <span class="string">&#x27;Predicted Mask&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(display_list)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, len(display_list), i+<span class="number">1</span>)</span><br><span class="line">    plt.title(title[i])</span><br><span class="line">    plt.imshow(tf.keras.preprocessing.image.array_to_img(display_list[i]))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image, mask <span class="keyword">in</span> train.take(<span class="number">1</span>):</span><br><span class="line">  sample_image, sample_mask = image, mask</span><br><span class="line">display([sample_image, sample_mask])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/3sOMzt2.png"></p><h2 id="定義模型"><a href="#定義模型" class="headerlink" title="定義模型"></a>定義模型</h2><p>此處使用的模型是經過修改的U-Net。一個<strong>U-Net</strong>由<strong>一個編碼器</strong>（下採樣器）和<strong>解碼器</strong>（上採樣器）組成。為了學習魯棒的功能並減少可訓練參數的數量，可以將預訓練模型用作編碼器。<br>因此，用於此任務的編碼器將是預訓練的MobileNetV2模型，將使用其中間輸出，而解碼器將是[Pix2pix教程]的TensorFlow示例中已經實現的上採樣塊。</p><p>輸出<strong>三個通道</strong>的原因是因為每個像素有三個可能的標籤。<br>可以將其視為多分類，其中<strong>每個像素都分為三類</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT_CHANNELS = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>如前所述，編碼器將是經過預訓練的MobileNetV2模型，該模型已經準備就緒，可以在tf.keras.applications中使用。<br>編碼器由模型中間層的特定輸出組成，在訓練過程中不會對編碼器進行訓練。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">base_model = tf.keras.applications.MobileNetV2(input_shape=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>], include_top=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用的層數</span></span><br><span class="line">layer_names = [</span><br><span class="line">    <span class="string">&#x27;block_1_expand_relu&#x27;</span>,   <span class="comment"># 64x64</span></span><br><span class="line">    <span class="string">&#x27;block_3_expand_relu&#x27;</span>,   <span class="comment"># 32x32</span></span><br><span class="line">    <span class="string">&#x27;block_6_expand_relu&#x27;</span>,   <span class="comment"># 16x16</span></span><br><span class="line">    <span class="string">&#x27;block_13_expand_relu&#x27;</span>,  <span class="comment"># 8x8</span></span><br><span class="line">    <span class="string">&#x27;block_16_project&#x27;</span>,      <span class="comment"># 4x4</span></span><br><span class="line">]</span><br><span class="line">layers = [base_model.get_layer(name).output <span class="keyword">for</span> name <span class="keyword">in</span> layer_names]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 創建特徵提取模型</span></span><br><span class="line">down_stack = tf.keras.Model(inputs=base_model.input, outputs=layers)</span><br><span class="line"></span><br><span class="line">down_stack.trainable = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解碼器/上採樣器只是在TensorFlow示例中實現的一系列上採樣塊。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">up_stack = [</span><br><span class="line">    pix2pix.upsample(<span class="number">512</span>, <span class="number">3</span>),  <span class="comment"># 4x4 -&gt; 8x8</span></span><br><span class="line">    pix2pix.upsample(<span class="number">256</span>, <span class="number">3</span>),  <span class="comment"># 8x8 -&gt; 16x16</span></span><br><span class="line">    pix2pix.upsample(<span class="number">128</span>, <span class="number">3</span>),  <span class="comment"># 16x16 -&gt; 32x32</span></span><br><span class="line">    pix2pix.upsample(<span class="number">64</span>, <span class="number">3</span>),   <span class="comment"># 32x32 -&gt; 64x64</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unet_model</span>(<span class="params">output_channels</span>):</span></span><br><span class="line">  inputs = tf.keras.layers.Input(shape=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>])</span><br><span class="line">  x = inputs</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 透過模型下採樣</span></span><br><span class="line">  skips = down_stack(x)</span><br><span class="line">  x = skips[<span class="number">-1</span>]</span><br><span class="line">  skips = reversed(skips[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 上採樣並建立跳過連結</span></span><br><span class="line">  <span class="keyword">for</span> up, skip <span class="keyword">in</span> zip(up_stack, skips):</span><br><span class="line">    x = up(x)</span><br><span class="line">    concat = tf.keras.layers.Concatenate()</span><br><span class="line">    x = concat([x, skip])</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 建立模型的最後一層</span></span><br><span class="line">  last = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">      output_channels, <span class="number">3</span>, strides=<span class="number">2</span>,</span><br><span class="line">      padding=<span class="string">&#x27;same&#x27;</span>)  <span class="comment">#64x64 -&gt; 128x128</span></span><br><span class="line"></span><br><span class="line">  x = last(x)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tf.keras.Model(inputs=inputs, outputs=x)</span><br></pre></td></tr></table></figure><h2 id="訓練模型"><a href="#訓練模型" class="headerlink" title="訓練模型"></a>訓練模型</h2><p>現在，剩下要做的就是編譯和訓練模型。<br>這裡使用的損失函數loss.SparseCategoricalCrossentropy（from_logits = True）。<br>使用此損失函數的原因是因為網絡正嘗試為每個像素分配一個標籤，就像多類別預測一樣。在真正的分割蒙版中，每個像素都有一個{0,1,2}。這裡的網絡正在輸出三個通道。<br>本質上，每個渠道都在嘗試學習預測類別和損失。對於這種情況使用SparseCategoricalCrossentropy（from_logits = True）作為損失。使用網絡的輸出，分配給像素的標籤是具有最高值的通道。<br>這就是create_mask函數正在執行的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = unet_model(OUTPUT_CHANNELS)</span><br><span class="line">model.compile(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="觀看一下流程圖"><a href="#觀看一下流程圖" class="headerlink" title="觀看一下流程圖"></a>觀看一下流程圖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.utils.plot_model(model, show_shapes=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/Vum8weX.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mask</span>(<span class="params">pred_mask</span>):</span></span><br><span class="line">  pred_mask = tf.argmax(pred_mask, axis=<span class="number">-1</span>)</span><br><span class="line">  pred_mask = pred_mask[..., tf.newaxis]</span><br><span class="line">  <span class="keyword">return</span> pred_mask[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_predictions</span>(<span class="params">dataset=None, num=<span class="number">1</span></span>):</span></span><br><span class="line">  <span class="keyword">if</span> dataset:</span><br><span class="line">    <span class="keyword">for</span> image, mask <span class="keyword">in</span> dataset.take(num):</span><br><span class="line">      pred_mask = model.predict(image)</span><br><span class="line">      display([image[<span class="number">0</span>], mask[<span class="number">0</span>], create_mask(pred_mask)])</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    display([sample_image, sample_mask,</span><br><span class="line">             create_mask(model.predict(sample_image[tf.newaxis, ...]))])</span><br><span class="line"></span><br><span class="line">show_predictions()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/f26bcvs.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayCallback</span>(<span class="params">tf.keras.callbacks.Callback</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on_epoch_end</span>(<span class="params">self, epoch, logs=None</span>):</span></span><br><span class="line">    clear_output(wait=<span class="literal">True</span>)</span><br><span class="line">    show_predictions()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&#x27;\nSample Prediction after epoch &#123;&#125;\n&#x27;</span>.format(epoch+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">EPOCHS = <span class="number">20</span></span><br><span class="line">VAL_SUBSPLITS = <span class="number">5</span></span><br><span class="line">VALIDATION_STEPS = info.splits[<span class="string">&#x27;test&#x27;</span>].num_examples//BATCH_SIZE//VAL_SUBSPLITS</span><br><span class="line"></span><br><span class="line">model_history = model.fit(train_dataset, epochs=EPOCHS,</span><br><span class="line">    steps_per_epoch=STEPS_PER_EPOCH,</span><br><span class="line">    validation_steps=VALIDATION_STEPS,</span><br><span class="line">    validation_data=test_dataset,</span><br><span class="line">    callbacks=[DisplayCallback()])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/cmCMEfsQ5AO7UzIP1H/giphy.gif" alt="我是狗狗喔"></p><h2 id="觀看訓練中的正確率"><a href="#觀看訓練中的正確率" class="headerlink" title="觀看訓練中的正確率"></a>觀看訓練中的正確率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">loss = model_history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = model_history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">epochs = range(EPOCHS)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(epochs, loss, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;Training loss&#x27;</span>)</span><br><span class="line">plt.plot(epochs, val_loss, <span class="string">&#x27;bo&#x27;</span>, label=<span class="string">&#x27;Validation loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss Value&#x27;</span>)</span><br><span class="line">plt.ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/0qUkWYv.png"></p><h2 id="查看預測結果"><a href="#查看預測結果" class="headerlink" title="查看預測結果"></a>查看預測結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_predictions(test_dataset, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/m7DWX2Y.png"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> tensorflow </tag>
            
            <tag> 實作AI </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考試囉!!!</title>
      <link href="/2020/06/10/hehe/"/>
      <url>/2020/06/10/hehe/</url>
      
        <content type="html"><![CDATA[<h1 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h1><p>電腦社竟然要舉辦比賽!!社長竟然做出了如此令我出乎意料的決定<br>然而，最出乎我想像的是…，我竟然接手了<strong>網管部份的出題者!!</strong><br><del>(好像是我自己提議的，也沒什麼好抱怨的</del></p><h1 id="經過"><a href="#經過" class="headerlink" title="經過"></a>經過</h1><p>這應該是我第一次出與<strong>網頁相關</strong>的題目，所以有一堆不知道如何拿捏的東西束縛著我</p><h2 id="尋找模板"><a href="#尋找模板" class="headerlink" title="尋找模板"></a>尋找模板</h2><p>光是尋找沒有太多附加檔案的模板就已經讓我崩潰，重點是自己又隨便立下了絕不考javascript的flag，害我幾乎出不了題<br>花了20分鐘找到一個沒有javascript的模板網站，但是內容物真的爛到乾脆全部都我自己寫都來得比較好<br>全部都是90年代的風格…，到底誰會用啊!!!</p><p>有花了整整一個小時，從一些奇怪的網站上才終於找到一個勉強可以被我改的題目…</p><h2 id="編輯題目"><a href="#編輯題目" class="headerlink" title="編輯題目"></a>編輯題目</h2><p>真的才是有夠痛苦，一方面是題目沒有什麼有鑑別度的題目，如果有那才叫可怕，因為鑑別度的差距真的太大<br>難的太難，簡單得太簡單，又因為要公平，所以我最後決定全部難題都刪掉…QQ<br>取而代之的，就是好多好多題目把他們玩爆就好啦!!!</p><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><p>自從開始做到完成總共花了約5小時才完成QQ<br><strong>真滴有夠累!!</strong> 希望他們是給我在時限內完成60%以上，不然我一定氣到跳腳!!!</p><h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><a href="https://hackmd.io/@FcMEi0nQSaqjsaBNOJZe8Q/S1FO8qt58">https://hackmd.io/@FcMEi0nQSaqjsaBNOJZe8Q/S1FO8qt58</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日記 </tag>
            
            <tag> 考試 </tag>
            
            <tag> 出題者 </tag>
            
            <tag> 電腦社 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分而治之，有點小討厭呢</title>
      <link href="/2020/06/07/dc/"/>
      <url>/2020/06/07/dc/</url>
      
        <content type="html"><![CDATA[<h1 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>什麼是<strong>分而治之法</strong>？</p><ol><li>針對一個有n筆輸入的問題，它的策略是把輸入分解成k(1&lt; k ≤ n) 個獨立的小集合，這導致<strong>原問題變成k個小問題</strong>。</li><li>小問題各自<strong>獨立地解決</strong>後產生各自的解，一共有k組解。</li><li>分而治之法最後必須將這k 組解<strong>有系統地合併</strong>以產生原問題的解。</li></ol><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li>如果要處理的資料量已經夠少，那麼用直接的方式解決，否則，把輸入資料分解成兩個獨立的小集合</li><li>求出每一個小問題的解；並且</li><li>把這兩個小問題的解組合起來，成為原來的大問題的解。</li></ol><p>以下有範例演示喔~~</p><h1 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h1><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li><li class="tab"><button type="button" data-href="#例題-3">例題 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="d219-00374-Big-Mod"><a href="#d219-00374-Big-Mod" class="headerlink" title="d219: 00374 - Big Mod"></a>d219: 00374 - Big Mod</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>計算 R = B^P^ mod M<br>對相當大的B、P、M請寫一個有效率的演算法來。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>$(A\ast B)%C=(A%C)\ast(B%C)\rightarrow B^P;%;M=(B^{P/2;}%;M)\ast(B^{P/2};%;M)$</p><p>不斷往下切的同時，請務必記住，如果<strong>P是奇數</strong>要再多<strong>乘一個B</strong>喔!!!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dc</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span>  p,<span class="keyword">long</span> <span class="keyword">long</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> b%m;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span>  half =dc ( b , p/<span class="number">2</span>, m);</span><br><span class="line">        <span class="keyword">if</span> (p%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> half * half % m;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span>  half * half  * b % m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span>  b,p,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; b &gt;&gt; p &gt;&gt; m)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dc(b,p,m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="a233-排序法-挑戰極限"><a href="#a233-排序法-挑戰極限" class="headerlink" title="a233: 排序法~ 挑戰極限"></a>a233: 排序法<del>~</del> 挑戰極限</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>排序，就對了</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>難得有機會，來用一下merge sort吧<br><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/fV7vw5K6HvCeBhlAZQ/giphy.gif" alt="排序囉"><br>如圖所示:</p><ol><li>申請空間，使其大小為兩個已經排序序列之和，該空間用來存放合併後的序列；</li><li>設定兩個指標，最初位置分別為兩個已經排序序列的起始位置；</li><li>比較兩個指標所指向的元素，選擇相對小的元素放入到合併空間，並移動指標到下一位置；</li><li>重複步驟 3 直到某一指標達到序列尾；</li><li>將另一序列剩下的所有元素直接複製到合併序列尾。<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="comment">// 合併時需要兩個子陣列 </span></span><br><span class="line"><span class="comment">// 第一個是紀錄arr[l..m] </span></span><br><span class="line"><span class="comment">// 第二個是紀錄arr[m+1..r] </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> i, j, k; </span><br><span class="line">    <span class="keyword">int</span> n1 = m - l + <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">int</span> n2 = r - m; </span><br><span class="line">    <span class="keyword">int</span> L[n1], R[n2]; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* 將數值複製過去 L[] and R[] */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) </span><br><span class="line">        L[i] = arr[l + i]; </span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++) </span><br><span class="line">        R[j] = arr[m + <span class="number">1</span> + j]; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* 合併這兩者到arr[l..r]中*/</span></span><br><span class="line">    i = <span class="number">0</span>; <span class="comment">// 定義第一個的index </span></span><br><span class="line">    j = <span class="number">0</span>; <span class="comment">// 定義第二個的index</span></span><br><span class="line">    k = l; <span class="comment">// 定義被合併的index</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123; </span><br><span class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123; </span><br><span class="line">            arr[k] = L[i]; </span><br><span class="line">            i++; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            arr[k] = R[j]; </span><br><span class="line">            j++; </span><br><span class="line">        &#125; </span><br><span class="line">        k++; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* 將剩餘的L[]複製過去*/</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) &#123; </span><br><span class="line">        arr[k] = L[i]; </span><br><span class="line">        i++; </span><br><span class="line">        k++; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* 將剩餘的R[]複製過去*/</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) &#123; </span><br><span class="line">        arr[k] = R[j]; </span><br><span class="line">        j++; </span><br><span class="line">        k++; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = l + (r - l) / <span class="number">2</span>; </span><br><span class="line">        <span class="comment">// 將排序分成二部分 </span></span><br><span class="line">        mergeSort(arr, l, m); </span><br><span class="line">        mergeSort(arr, m + <span class="number">1</span>, r); </span><br><span class="line">        <span class="comment">//整合</span></span><br><span class="line">        merge(arr, l, m, r); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> n;  <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    mergeSort(arr, <span class="number">0</span>, n<span class="number">-1</span>); </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-3"><h2 id="b373-福州19中-车厢重组"><a href="#b373-福州19中-车厢重组" class="headerlink" title="b373: [福州19中]车厢重组"></a>b373: [福州19中]车厢重组</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>在一个旧式的火车站旁边有一座桥，其桥面可以绕河中心的桥墩水平旋转。一个车站的职工发现桥的长度最多能容纳两节车厢，如果将桥旋转180度，则可以把相邻两节车厢的位置交换，用这种方法可以重新排列车厢的顺序。于是他就负责用这座桥将进站的车厢按车厢号从小到大排列。他退休后，火车站决定将这一工作自动化，其中一项重要的工作是编一个程序，输入初始的车厢顺序，计算最少用多少步就能将车厢排序。车厢编号从1开始。 </p><p>其實，就是指說: 給你一串數列，問最少交換幾次可以使號碼由小而大排好</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其實，它就是十分經典的問題之一喔~，稱作 – <strong>逆序數對數量計算</strong><br>對於一個陣列A中, 任取兩個元素, 順序不變, 如果<strong>前者大於後者</strong>， 則我們稱為<strong>逆序數對</strong><br>其解決方法有三，一為暴力法，二為分治法，三為BIT解法，在這就先用分治法吧</p><p>經過觀察會發現:<br><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/16.png"></p><ol><li>即使將左右兩部分排序, 這部分的數量依然相同<del>(廢話)</del><br><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/15.png"></li><li>經過排序以後窮舉<strong>左邊的每一項</strong>, 與它有關的逆序數對是<strong>原本右邊滿足的部分</strong>,加上往<strong>右找比它小的那些數值</strong></li></ol><h3 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h3><ol><li>以<strong>合併排序法</strong>為基礎</li><li>在合併前額外加上計算“<strong>橫跨左右部分的逆序數對數量</strong>”</li><li><strong>回傳三個部份的總和</strong>, 就是在<strong>處理範圍中的逆序數對數量</strong></li><li>順便也幫忙排序完成了!</li></ol><p>在此問題中，子問題的答案並不只有「該區間內逆序數對的數量」，也隱含了「該區間內排序過的結果」</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">int</span> data[N],tmp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mergecount</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L+<span class="number">1</span>==R) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//僅有單一元素</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>,M=(R-L)/<span class="number">2</span>+L;</span><br><span class="line">count+=mergecount(L,M); <span class="comment">//左</span></span><br><span class="line">count+=mergecount(M,R); <span class="comment">//右</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a=L,b=M,k=L,t=M<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=L,i&lt;M;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(t+<span class="number">1</span>&lt;R&amp;&amp;data[i]&gt;data[t+<span class="number">1</span>]) t++;</span><br><span class="line">count+=t-M+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*順便合併排序*/</span></span><br><span class="line"><span class="keyword">while</span>(a&lt;M||b&lt;R)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;M&amp;&amp;(b&gt;=R||data[a]&lt;data[b]))&#123; </span><br><span class="line">tmp[k++]=data[a++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">tmp[k++]=data[b++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=L,i&lt;R,i++) <span class="comment">//儲存合併排序的結果</span></span><br><span class="line">        data[i]=tmp[i];</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie();</span><br><span class="line"><span class="keyword">int</span> n,ans,t=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;data[i];</span><br><span class="line">ans=mergecount(<span class="number">0</span>,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模擬下去啦!</title>
      <link href="/2020/06/07/simulation/"/>
      <url>/2020/06/07/simulation/</url>
      
        <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>跟窮舉超像，就是設法<strong>模擬</strong>出答案的狀況<br>跟窮舉差別就在 -&gt; 狀況通常都比較複雜一點點，要再多考慮一下</p><h1 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h1><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li><li class="tab"><button type="button" data-href="#例題-3">例題 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="c006-10550-Combination-Lock"><a href="#c006-10550-Combination-Lock" class="headerlink" title="c006: 10550 - Combination Lock"></a>c006: 10550 - Combination Lock</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>你今天的任務需要來開一個鎖（如右圖）。在鎖上有一個轉盤，上面有40個刻度（0到39來代表）。開鎖的密碼由3個號碼組成，例如：15-25-8。要打開這種鎖要按照以下步驟：</p><ol><li>順時鐘方向轉轉盤2整圈</li><li>繼續順時鐘方向轉直到到達第一個號碼上</li><li>逆時鐘方向轉轉盤一整圈</li><li>繼續逆時鐘方向轉直到到達第二個號碼</li><li>順時鐘方向轉轉盤直到到達第三個號碼</li><li>拉開鎖頭就可以打開了<br>給你一開始時轉盤的位置，還有開鎖的密碼，請你算出總共要轉多少度（degree，一整圈為360度）才能打開鎖（順時鐘方向加逆時鐘方向）。<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3>記得一件事: <strong>轉盤順時針轉的時候數字是減少的</strong><br>先把轉幾圈整的加到答案裡<br>問題剩下從起點順時針轉到A，逆時針轉到B，順時針轉到C<br>起點順時針轉到A = ((s-(a-40))%40)*9<br>其中9是每一格的角度<br>逆時針到B = ((b+40)-a)%40) * 9<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;a&gt;&gt;b&gt;&gt;c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="number">0</span> &amp;&amp; a==<span class="number">0</span> &amp;&amp; b==<span class="number">0</span> &amp;&amp; c==<span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ans = <span class="number">1080</span>;</span><br><span class="line">            ans += ((s-(a<span class="number">-40</span>))%<span class="number">40</span>) * <span class="number">9</span>;</span><br><span class="line">            ans += (((b+<span class="number">40</span>)-a)%<span class="number">40</span>) * <span class="number">9</span>;</span><br><span class="line">            ans += ((b-(c<span class="number">-40</span>))%<span class="number">40</span>) * <span class="number">9</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="c292-APCS2017-0304-3數字龍捲風"><a href="#c292-APCS2017-0304-3數字龍捲風" class="headerlink" title="c292: APCS2017-0304-3數字龍捲風"></a>c292: APCS2017-0304-3數字龍捲風</h2><h3 id="內容"><a href="#內容" class="headerlink" title="內容"></a>內容</h3><p>給定一個二維陣列，依照題目需要從中間逆時針或順時針向外 輸出答案</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>就是很純的模擬<br>先從中間開始，把中間的那圈走完，再往外拓張，直到走完全圖</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, nxt;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; nxt;</span><br><span class="line">        <span class="keyword">int</span> a[N][N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 0代表左 、1代表上 、2代表右 、3代表下</span></span><br><span class="line">        <span class="keyword">int</span> direction[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> total_steps = N * N, steps = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> repeat = <span class="number">1</span>, repeat_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = N / <span class="number">2</span>, c = N / <span class="number">2</span>; <span class="comment">// 從中心點出發</span></span><br><span class="line"> </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[r][c];</span><br><span class="line">        <span class="keyword">while</span> (steps &lt; total_steps)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;repeat; i++)&#123;</span><br><span class="line">                r += direction[nxt][<span class="number">0</span>];</span><br><span class="line">                c += direction[nxt][<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; a[r][c];</span><br><span class="line">                steps++;</span><br><span class="line">                <span class="keyword">if</span> (steps == total_steps) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            repeat_cnt++;</span><br><span class="line">            <span class="keyword">if</span> (repeat_cnt % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                repeat++;</span><br><span class="line">            &#125;</span><br><span class="line">            nxt = (nxt + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-3"><h2 id="c297-APCS-2016-1029-4棒球遊戲"><a href="#c297-APCS-2016-1029-4棒球遊戲" class="headerlink" title="c297: APCS-2016-1029-4棒球遊戲"></a>c297: APCS-2016-1029-4棒球遊戲</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>有點長，所以只放<a href="https://zerojudge.tw/ShowProblem?problemid=c297">連結</a>喔~</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>安打時，除了原本在<strong>壘包上的人要移動</strong>外，還要加上一個從<strong>本壘</strong>走出來的人。例如2B：原本在壘上的人往前跑2個壘，而本壘的人跑到2壘。<br>打出<strong>2壘安打</strong>時，可以想成每個人都往前進<strong>一格兩次</strong><br>打出<strong>3壘安打</strong>時，可以想成每個人都往前進<strong>一格三次</strong><br><strong>全壘打</strong>時，跑4個壘就相當於<strong>原本壘上的所有人</strong>皆得分，還要外加<strong>本壘</strong>出來的人的分數。<br>在用queue模擬時，<strong>沒有人</strong>的地方可以假設為數字<strong>0</strong>，<strong>有人</strong>的地方假設為數字<strong>1</strong>（或其他數字）。<br>跑壘時讀到人（也就是數字1）=&gt; 得分</p><p>部分模擬的題目，也可以到很難喔~這可是APCS的第四題ㄟ</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; &gt; mp;<span class="comment">//紀錄用，也可以用二維陣列代替</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, target;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="built_in">queue</span> &lt;<span class="built_in">string</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            q.push(s);</span><br><span class="line">        &#125;</span><br><span class="line">        mp[i] = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>, num = <span class="number">-1</span>, score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b1 = <span class="number">0</span>, b2 = <span class="number">0</span>, b3 = <span class="number">0</span>, b4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> times = <span class="number">0</span>; <span class="comment">//跑壘數</span></span><br><span class="line">        num = (num + <span class="number">1</span>) % <span class="number">9</span>; <span class="comment">//打者號碼</span></span><br><span class="line">        <span class="built_in">string</span> hit = mp[num].front();</span><br><span class="line">        mp[num].pop();</span><br><span class="line">        <span class="keyword">if</span> (hit == <span class="string">&quot;SO&quot;</span> || hit == <span class="string">&quot;GO&quot;</span> || hit == <span class="string">&quot;FO&quot;</span>)&#123;</span><br><span class="line">            out += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (out == target) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (out % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                b1 = b2 = b3 = b4 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hit == <span class="string">&quot;HR&quot;</span>)&#123;</span><br><span class="line">            times = <span class="number">4</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            times = hit[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//跑壘</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=times; i++)&#123;</span><br><span class="line">            b4 = b3;</span><br><span class="line">            b3 = b2;</span><br><span class="line">            b2 = b1;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) b1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> b1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (b4 == <span class="number">1</span>) &#123;</span><br><span class="line">                score++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; score &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 思維類 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>並查集(dsu)</title>
      <link href="/2020/06/04/dsu/"/>
      <url>/2020/06/04/dsu/</url>
      
        <content type="html"><![CDATA[<h1 id="並查集-Disjoin-Set-Union"><a href="#並查集-Disjoin-Set-Union" class="headerlink" title="並查集 (Disjoin-Set Union)"></a>並查集 (Disjoin-Set Union)</h1><h2 id="基礎觀念"><a href="#基礎觀念" class="headerlink" title="基礎觀念"></a>基礎觀念</h2><p><strong>並查集</strong> 是一種<strong>樹形的資料結構</strong>，用於處理不交集的<strong>合併(union)**及</strong>查詢(find)**問題。</p><p>並查集 可用於<strong>查詢網路中兩個節點的狀態</strong>， 這裡的網路是一個抽象的概念， 不僅僅指網際網路中的網路， 也可以是人際關係的網路、交通網路等。</p><p>並查集 除了可以用於查詢 網路 中兩個節點的狀態， 還可以用於數學中集合相關的操作， 如求兩個集合的並集等。</p><p>並查集 對於查詢兩個節點的 <strong>連線狀態</strong> 非常高效。對於<strong>兩個節點是否相連</strong>，也可以通過求解<strong>查詢路徑</strong>來解決，也就是說如果兩個點的連線路徑都求出來了，自然也就知道兩個點是否相連了，但是如果僅僅想知道兩個點是否相連，使用<strong>路徑問題</strong>來處理效率會低一些，<strong>並查集</strong>就是一個很好的選擇。</p><h2 id="程式碼範例"><a href="#程式碼範例" class="headerlink" title="程式碼範例"></a>程式碼範例</h2><p>概念聽起來很複雜<br>但程式寫起來很容易喔</p><h3 id="1-找源頭"><a href="#1-找源頭" class="headerlink" title="1.找源頭"></a>1.找源頭</h3><p>不管要查哪台電腦的源頭<br>我都可以透過不斷地「找到他的老大」、「找到他老大的源頭」來找到他的源頭</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x]==x) <span class="keyword">return</span> x;  <span class="comment">//如果他自己就是他那群的源頭，就回報他自己的編號</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> root=find_root(father[x]); <span class="comment">//找出他老大的源頭</span></span><br><span class="line">    father[x]=root; <span class="comment">//把他的boss也改成終極boss(源頭)的編號</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-連接兩個群組"><a href="#2-連接兩個群組" class="headerlink" title="2.連接兩個群組"></a>2.連接兩個群組</h3><p>兩個不同的群組，有不同的源頭<br>要連接他們的話<br>我們要先把他們個別的源頭找出來<br>並且讓其中一個源頭「歸順」到另一個源頭</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_x=find_root(x); <span class="comment">//找到x的源頭</span></span><br><span class="line">    <span class="keyword">int</span> root_y=find_root(y); <span class="comment">//找到y的源頭</span></span><br><span class="line">    father[root_x]=root_y;   <span class="comment">//讓x的源頭歸順於y的源頭 (若要反過來也可以)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後就簡單啦</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++) father[i]=i;<span class="comment">//一開始大家的源頭都是自己</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;指令</span><br><span class="line">        <span class="keyword">if</span>(指令是連接a與b)&#123;</span><br><span class="line">            <span class="keyword">union</span>(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(指令是問a與b是否相連)&#123;</span><br><span class="line">            <span class="keyword">int</span> root_a=find_root(a);</span><br><span class="line">            <span class="keyword">int</span> root_b=find_root(b);</span><br><span class="line">            <span class="keyword">if</span>(root_a==root_b) <span class="built_in">cout</span>&lt;&lt;相連</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;不相連</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="d831-畢業旅行"><a href="#d831-畢業旅行" class="headerlink" title="d831: 畢業旅行"></a>d831: 畢業旅行</h2><h3 id="敘述"><a href="#敘述" class="headerlink" title="敘述"></a>敘述</h3><p>這幾天，班上同學們無時無刻都熱烈討論著畢業旅行的地點。<br>小明說，如果要去六福村，可以順便去小人國；<br>小美說，如果去了恆春的話，墾丁就在幾十公里外了，一定也要去玩；<br>小華表示，小鬼湖跟大鬼湖好像很近，似乎都是很有趣的地方。</p><p>身為班長，聽到同學這麼多「去了哪裡也可以去哪裡」的資訊後，<br>你決定要為班上的同學們，找到一個能玩最多景點的畢業旅行。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>先假設全部每個點的根都為-1</li><li>當合併的根小於0時，就把其中一格記成<strong>此根的最多連結數</strong>，另一個紀錄<strong>根的位置</strong><br><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/13.png" height = "450" alt="演示" align=center></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, mx, a, b;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] &lt; <span class="number">0</span>) <span class="keyword">return</span> x; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p[x] = find_root(p[x]); </span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            p[i] = <span class="number">-1</span>; <span class="comment">//初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">        mx = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a = find_root(a);</span><br><span class="line">            b = find_root(b);</span><br><span class="line">            <span class="keyword">if</span> (a != b)&#123; <span class="comment">//不同才能加</span></span><br><span class="line">                p[a] += p[b]; <span class="comment">//加總</span></span><br><span class="line">                mx = max(mx, -p[a]); <span class="comment">//順道紀錄最大值</span></span><br><span class="line">                p[b] = a; <span class="comment">//合併</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mx &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LSTM</title>
      <link href="/2020/05/21/AI-8/"/>
      <url>/2020/05/21/AI-8/</url>
      
        <content type="html"><![CDATA[<h1 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h1><h2 id="匯入所需模型"><a href="#匯入所需模型" class="headerlink" title="匯入所需模型"></a>匯入所需模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Dense, Dropout, Activation, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.layers.embding <span class="keyword">import</span> Embding</span><br><span class="line"><span class="keyword">from</span> keras.layers.recurrent <span class="keyword">import</span> SimpleRNN</span><br></pre></td></tr></table></figure><h2 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(Embding(output_dim=<span class="number">32</span>,input_dim=<span class="number">2000</span>,input_length=<span class="number">100</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.35</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(SimpleRNN(units = <span class="number">16</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(units =<span class="number">256</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.35</span>))</span><br><span class="line">model.add(Dense(units = <span class="number">1</span>,activation = <span class="string">&#x27;sigmoid&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h1><h2 id="匯入所需模型-1"><a href="#匯入所需模型-1" class="headerlink" title="匯入所需模型"></a>匯入所需模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Dense, Dropout, Activation, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.layers.embding <span class="keyword">import</span> Embding</span><br><span class="line"><span class="keyword">from</span> keras.layers.recurrent <span class="keyword">import</span> LSTM</span><br></pre></td></tr></table></figure><h2 id="建立模型-1"><a href="#建立模型-1" class="headerlink" title="建立模型"></a>建立模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(Embding(output_dim=<span class="number">32</span>,input_dim=<span class="number">3800</span>,input_length=<span class="number">380</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(LSTM(<span class="number">32</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(units =<span class="number">256</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.2</span>))</span><br><span class="line">model.add(Dense(units = <span class="number">1</span>,activation = <span class="string">&#x27;sigmoid&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 實作AI </tag>
            
            <tag> python </tag>
            
            <tag> keras </tag>
            
            <tag> 情緒分析 </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序演算法</title>
      <link href="/2020/05/10/sort/"/>
      <url>/2020/05/10/sort/</url>
      
        <content type="html"><![CDATA[<h1 id="氣泡排序"><a href="#氣泡排序" class="headerlink" title="氣泡排序"></a>氣泡排序</h1><p>氣泡排序（Bubble Sort）也是一種簡單直觀的排序演算法。它重複地走訪過要排序的數列，一次比較兩個元素，如果他們的順序錯誤就把他們交換過來。走訪數列的工作是重複地進行直到沒有再需要交換，也就是說該數列已經排序完成。這個演算法的名字由來是因為越小的元素會經由交換慢慢“浮”到數列的頂端。</p><p>作為最簡單的排序演算法之一，氣泡排序給我的感覺就像 Abandon 在單詞書裡出現的感覺一樣，每次都在第一頁第一位，所以最熟悉。氣泡排序還有一種優化演算法，就是立一個 flag，當在一趟序列遍歷中元素沒有發生交換，則證明該序列已經有序。但這種改進對於提升效能來說並沒有什麼太大作用。</p><h2 id="演算法步驟"><a href="#演算法步驟" class="headerlink" title="演算法步驟"></a>演算法步驟</h2><p>比較相鄰的元素。如果第一個比第二個大，就交換他們兩個。</p><p>對每一對相鄰元素作同樣的工作，從開始第一對到結尾的最後一對。這步做完後，最後的元素會是最大的數。</p><p>針對所有的元素重複以上的步驟，除了最後一個。</p><p>持續每次對越來越少的元素重複上面的步驟，直到沒有任何一對數字需要比較。</p><h2 id="動圖演示"><a href="#動圖演示" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/UWEg2VFsJRh326zDzu/giphy.gif" alt="氣泡排序法(葉致宏)"></p><h1 id="選擇排序"><a href="#選擇排序" class="headerlink" title="選擇排序"></a>選擇排序</h1><p>選擇排序是一種簡單直觀的排序演算法，無論什麼資料進去都是 O(n²) 的時間複雜度。所以用到它的時候，資料規模越小越好。唯一的好處可能就是不佔用額外的記憶體空間了吧。</p><h2 id="演算法步驟-1"><a href="#演算法步驟-1" class="headerlink" title="演算法步驟"></a>演算法步驟</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</p><p>再從剩餘未排序元素中繼續尋找最小（大）元素，然後放到已排序序列的末尾。</p><p>重複第二步，直到所有元素均排序完畢</p><h2 id="動圖演示-1"><a href="#動圖演示-1" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/Z9c9jj7yvVJrO48gu8/giphy.gif" alt="選擇排序法(葉致宏)"></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序的程式碼實現雖然沒有氣泡排序和選擇排序那麼簡單粗暴，但它的原理應該是最容易理解的了，因為只要打過撲克牌的人都應該能夠秒懂。插入排序是一種最簡單直觀的排序演算法，它的工作原理是通過構建有序序列，對於未排序資料，在已排序序列中從後向前掃描，找到相應位置並插入。</p><p>插入排序和氣泡排序一樣，也有一種優化演算法，叫做拆半插入。</p><h2 id="演算法步驟-2"><a href="#演算法步驟-2" class="headerlink" title="演算法步驟"></a>演算法步驟</h2><p>將第一待排序序列第一個元素看做一個有序序列，把第二個元素到最後一個元素當成是未排序序列。</p><p>從頭到尾依次掃描未排序序列，將掃描到的每個元素插入有序序列的適當位置。（如果待插入的元素與有序序列中的某個元素相等，則將待插入元素插入到相等元素的後面。）</p><h2 id="動圖演示-2"><a href="#動圖演示-2" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/jRl9CI39F2bwYJmpbm/giphy.gif" alt="插入排序法(葉致宏)"></p><h1 id="希爾排序"><a href="#希爾排序" class="headerlink" title="希爾排序"></a>希爾排序</h1><p>希爾排序，也稱遞減增量排序演算法，是插入排序的一種更高效的改進版本。但希爾排序是非穩定排序演算法。</p><p>希爾排序是基於插入排序的以下兩點性質而提出改進方法的：</p><p>插入排序在對幾乎已經排好序的資料操作時，效率高，即可以達到線性排序的效率；<br>但插入排序一般來說是低效的，因為插入排序每次只能將資料移動一位；<br>希爾排序的基本思想是：先將整個待排序的記錄序列分割成為若干子序列分別進行直接插入排序，待整個序列中的記錄“基本有序”時，再對全體記錄進行依次直接插入排序。</p><h2 id="演算法步驟-3"><a href="#演算法步驟-3" class="headerlink" title="演算法步驟"></a>演算法步驟</h2><p>選擇一個增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</p><p>按增量序列個數 k，對序列進行 k 趟排序；</p><p>每趟排序，根據對應的增量 ti，將待排序列分割成若干長度為 m 的子序列，分別對各子表進行直接插入排序。僅增量因子為 1 時，整個序列作為一個表來處理，表長度即為整個序列的長度。</p><h1 id="歸併排序"><a href="#歸併排序" class="headerlink" title="歸併排序"></a>歸併排序</h1><p>歸併排序（Merge sort）是建立在歸併操作上的一種有效的排序演算法。該演算法是採用分治法（Divide and Conquer）的一個非常典型的應用。</p><h2 id="演算法步驟-4"><a href="#演算法步驟-4" class="headerlink" title="演算法步驟"></a>演算法步驟</h2><p>申請空間，使其大小為兩個已經排序序列之和，該空間用來存放合併後的序列；</p><p>設定兩個指標，最初位置分別為兩個已經排序序列的起始位置；</p><p>比較兩個指標所指向的元素，選擇相對小的元素放入到合併空間，並移動指標到下一位置；</p><p>重複步驟 3 直到某一指標達到序列尾；</p><p>將另一序列剩下的所有元素直接複製到合併序列尾。</p><h2 id="動圖演示-3"><a href="#動圖演示-3" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/fV7vw5K6HvCeBhlAZQ/giphy.gif" alt="歸併排序法(葉致宏)"></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是由東尼·霍爾所發展的一種排序演算法。在平均狀況下，排序 n 個專案要 Ο(nlogn) 次比較。在最壞狀況下則需要 Ο(n2) 次比較，但這種狀況並不常見。事實上，快速排序通常明顯比其他 Ο(nlogn) 演算法更快，因為它的內部迴圈（inner loop）可以在大部分的架構上很有效率地被實現出來。</p><p>快速排序使用分治法（Divide and conquer）策略來把一個序列（list）分為兩個子序列（sub-lists）。</p><p>快速排序又是一種分而治之思想在排序演算法上的典型應用。本質上來看，快速排序應該算是在氣泡排序基礎上的遞迴分治法。</p><p>快速排序的名字起的是簡單粗暴，因為一聽到這個名字你就知道它存在的意義，就是快，而且效率高！它是處理大資料最快的排序演算法之一了。雖然 Worst Case 的時間複雜度達到了 O(n²)，但是人家就是優秀，在大多數情況下都比平均時間複雜度為 O(n logn) 的排序演算法表現要更好，可是這是為什麼呢? (嘗試自己猜猜看、想想看啦!!)</p><p>快速排序的最壞執行情況是 O(n²)，比如說順序數列的快排。但它的平攤期望時間是 O(nlogn)，且 O(nlogn) 記號中隱含的常數因子很小，比複雜度穩定等於 O(nlogn) 的歸併排序要小很多。所以，對絕大多數順序性較弱的隨機數列而言，快速排序總是優於歸併排序。</p><h2 id="演算法步驟-5"><a href="#演算法步驟-5" class="headerlink" title="演算法步驟"></a>演算法步驟</h2><p>從數列中挑出一個元素，稱為 “基準”（pivot）;</p><p>重新排序數列，所有元素比基準值小的擺放在基準前面，所有元素比基準值大的擺在基準的後面（相同的數可以到任一邊）。在這個分割槽退出之後，該基準就處於數列的中間位置。這個稱為分割槽（partition）操作；</p><p>遞迴地（recursive）把小於基準值元素的子數列和大於基準值元素的子數列排序；</p><p>遞迴的最底部情形，是數列的大小是零或一，也就是永遠都已經被排序好了。雖然一直遞迴下去，但是這個演算法總會退出，因為在每次的迭代（iteration）中，它至少會把一個元素擺到它最後的位置去。</p><h2 id="動圖演示-4"><a href="#動圖演示-4" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/Sttv7toKWYOeMV8cfA/giphy.gif" alt="快速排序法(葉致宏)"></p><h2 id="隨機快速排序"><a href="#隨機快速排序" class="headerlink" title="隨機快速排序"></a>隨機快速排序</h2><p>隨機快速排序是快速排序法的一種變形，流程跟快速排序的方式一樣，只是在挑選基準時，是隨機取的，所以，在排序上會比快速排序法快些</p><h2 id="動圖演示-5"><a href="#動圖演示-5" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/XHAgohSbcEDLNUouun/giphy.gif" alt="隨機快速排序法(葉致宏)"></p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆排序（Heapsort）是指利用堆這種資料結構所設計的一種排序演算法。堆積是一個近似完全二叉樹的結構，並同時滿足堆積的性質：即子結點的鍵值或索引總是小於（或者大於）它的父節點。堆排序可以說是一種利用堆的概念來排序的選擇排序。分為兩種方法：</p><p>大頂堆：每個節點的值都大於或等於其子節點的值，在堆排序演算法中用於升序排列；<br>小頂堆：每個節點的值都小於或等於其子節點的值，在堆排序演算法中用於降序排列；<br>堆排序的平均時間複雜度為 Ο(nlogn)。</p><h2 id="演算法步驟-6"><a href="#演算法步驟-6" class="headerlink" title="演算法步驟"></a>演算法步驟</h2><p>建立一個堆 H[0……n-1]；</p><p>把堆首（最大值）和堆尾互換；</p><p>把堆的尺寸縮小 1，並呼叫 shift_down(0)，目的是把新的陣列頂端資料調整到相應位置；</p><p>重複步驟 2，直到堆的尺寸為 1。</p><h2 id="動圖演示-6"><a href="#動圖演示-6" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://kuangzhenfeng.github.io/sort/res/heapSort.gif" alt="堆排序法(葉致宏)"></p><h1 id="計數排序"><a href="#計數排序" class="headerlink" title="計數排序"></a>計數排序</h1><p>計數排序的核心在於將輸入的資料值轉化為鍵儲存在額外開闢的陣列空間中。作為一種線性時間複雜度的排序，計數排序要求輸入的資料必須是有確定範圍的整數。</p><h2 id="動圖演示-7"><a href="#動圖演示-7" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media.giphy.com/media/Kbw6whdIkdEqS23rVC/giphy.gif" alt="計數排序法(葉致宏)"></p><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>桶排序是計數排序的升級版。它利用了函式的對映關係，高效與否的關鍵就在於這個對映函式的確定。為了使桶排序更加高效，我們需要做到這兩點：</p><p>在額外空間充足的情況下，儘量增大桶的數量<br>使用的對映函式能夠將輸入的 N 個數據均勻的分配到 K 個桶中<br>同時，對於桶中元素的排序，選擇何種比較排序演算法對於效能的影響至關重要。</p><p>什麼時候最快</p><p>當輸入的資料可以均勻的分配到每一個桶中。</p><p>什麼時候最慢</p><p>當輸入的資料被分配到了同一個桶中。</p><h1 id="基數排序"><a href="#基數排序" class="headerlink" title="基數排序"></a>基數排序</h1><p>基數排序是一種非比較型整數排序演算法，其原理是將整數按位數切割成不同的數字，然後按每個位數分別比較。由於整數也可以表達字串（比如名字或日期）和特定格式的浮點數，所以基數排序也不是隻能使用於整數。</p><p>基數排序 vs 計數排序 vs 桶排序</p><p>基數排序有兩種方法：</p><p>這三種排序演算法都利用了桶的概念，但對桶的使用方法上有明顯差異：</p><p>基數排序：根據鍵值的每位數字來分配桶；<br>計數排序：每個桶只儲存單一鍵值；<br>桶排序：每個桶儲存一定範圍的數值；</p><h2 id="動圖演示-8"><a href="#動圖演示-8" class="headerlink" title="動圖演示"></a>動圖演示</h2><p><img src= "/img/loading.gif" data-lazy-src="https://media0.giphy.com/media/d90dBePMlTYk3hErJX/giphy.gif" alt="基數排序法(葉致宏)"></p>]]></content>
      
      
      <categories>
          
          <category> 演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> 演算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>窮舉法(暴力搜索啦!!!)</title>
      <link href="/2020/05/10/brute/"/>
      <url>/2020/05/10/brute/</url>
      
        <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>窮舉法就是，直接暴力的把<strong>所有可能都列舉出來</strong>，把符合題意的輸出出來。<br>對，就是這麼的簡單、直接。<br>所以，題目真的很少，因為沒有鑑別度<br>真的會考列出的話，會傾向於考greedy和dfs，都是窮舉的強化</p><h1 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h1><div class="tabs" id="例題"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例題-1">例題 1</button></li><li class="tab"><button type="button" data-href="#例題-2">例題 2</button></li><li class="tab"><button type="button" data-href="#例題-3">例題 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例題-1"><h2 id="a364-2-神秘的進位問題"><a href="#a364-2-神秘的進位問題" class="headerlink" title="a364: 2. 神秘的進位問題"></a>a364: 2. 神秘的進位問題</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>$N = C(a,3) + C(b,2) + C(c,1)$，且當$m&lt;n$時，$C(m,n)=0$，限制$a&gt;b&gt;c&gt;=0$，<br>現在隨便輸入0~500隨便一個數，求abc的值為何?</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因為數字只到500而且又$a&gt;b&gt;c&gt;=0$，所以一開始從a=0開始下去跑，把所有的N值對應的情況直接記錄下來<br>之後，在依照題目的要求，查表輸出就好哩</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c, abc[<span class="number">501</span>][<span class="number">3</span>] = &#123;&#125;, ok[<span class="number">501</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(a = <span class="number">0</span>; a &lt; <span class="number">20</span>; a ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(b = <span class="number">0</span>; b &lt; a; b++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(c = <span class="number">0</span>; c &lt; b; c++) &#123;</span><br><span class="line">            <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(a &gt;= <span class="number">3</span>)  N += a*(a<span class="number">-1</span>)*(a<span class="number">-2</span>)/<span class="number">6</span>;</span><br><span class="line">            <span class="keyword">if</span>(b &gt;= <span class="number">2</span>)  N += b*(b<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(c &gt;= <span class="number">1</span>)  N += c;</span><br><span class="line">            <span class="keyword">if</span>(N &gt; <span class="number">500</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(ok[N] == <span class="number">0</span>) &#123;</span><br><span class="line">                ok[N] = <span class="number">1</span>;</span><br><span class="line">                abc[N][<span class="number">0</span>] = a, abc[N][<span class="number">1</span>] = b, abc[N][<span class="number">2</span>] = c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-2"><h2 id="a583-1-座位距離計算問題"><a href="#a583-1-座位距離計算問題" class="headerlink" title="a583: 1. 座位距離計算問題"></a>a583: 1. 座位距離計算問題</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>給你M組座標，求最相近的兩組座標的距離值為何?<br>一看就知道，水題…</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把所有點的距離都跑一遍，遇到有更小的就更新，然後輸出出來…<br>對，窮舉=無腦=暴力</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, x[<span class="number">20</span>], y[<span class="number">20</span>], i, j;</span><br><span class="line">    <span class="keyword">double</span> tmp, mn = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*d %d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, x+i, y+i);</span><br><span class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            tmp = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x[i]-x[j],<span class="number">2</span>)+<span class="built_in">pow</span>(y[i]-y[j],<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span>(tmp &lt; mn)    mn = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4lf\n&quot;</span>, mn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例題-3"><h2 id="c049-00356-Square-Pegs-And-Round-Holes"><a href="#c049-00356-Square-Pegs-And-Round-Holes" class="headerlink" title="c049: 00356 - Square Pegs And Round Holes"></a>c049: 00356 - Square Pegs And Round Holes</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>在一個邊長為2n的正方形棋盤中央畫一個直徑為2n-1的圓，以下的圖為n=3，<br><img src= "/img/loading.gif" data-lazy-src="https://zerojudge.tw/ShowImage?id=198"><br>寫一個程式判斷有多少個格子是一部份在圓中，以及有多少個格子是完全被包含在圓當中。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先去<strong>窮舉1/4圓</strong>的格子情形，再去<strong>乘4</strong><br>利用畢氏定理判斷格子的四個點是否<strong>都在</strong>圓內，或部分在園內<br><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/000.gif?raw=true"></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AllinRange r1&lt;=range&amp;&amp;r2&lt;=range&amp;&amp;r3&lt;=range&amp;&amp;r4&lt;=range</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PartinRange r1&lt;=range||r2&lt;=range||r3&lt;=range||r4&lt;=range</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> range = (<span class="number">2</span>*n<span class="number">-1</span>)*(<span class="number">2</span>*n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n+<span class="number">1</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">int</span> r1, r2, r3, r4;  <span class="comment">//左下 右下 左上 右上</span></span><br><span class="line">        r1 = <span class="number">4</span>*(i*i + j*j);</span><br><span class="line">        r2 = <span class="number">4</span>*((i+<span class="number">1</span>)*(i+<span class="number">1</span>) + j*j);</span><br><span class="line">        r3 = <span class="number">4</span>*(i*i + (j+<span class="number">1</span>)*(j+<span class="number">1</span>));</span><br><span class="line">        r4 = <span class="number">4</span>*((i+<span class="number">1</span>)*(i+<span class="number">1</span>) + (j+<span class="number">1</span>)*(j+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(AllinRange)</span><br><span class="line">            count_all++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(PartinRange)</span><br><span class="line">                count_part++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 思維類 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IMDb情緒分析</title>
      <link href="/2020/04/30/AI-7/"/>
      <url>/2020/04/30/AI-7/</url>
      
        <content type="html"><![CDATA[<h1 id="資料預處理"><a href="#資料預處理" class="headerlink" title="資料預處理"></a>資料預處理</h1><h2 id="匯入所需模型"><a href="#匯入所需模型" class="headerlink" title="匯入所需模型"></a>匯入所需模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> imdb</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.text <span class="keyword">import</span> Tokenizer</span><br></pre></td></tr></table></figure><h2 id="讀取資料"><a href="#讀取資料" class="headerlink" title="讀取資料"></a>讀取資料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#讀入訓練資料</span></span><br><span class="line">y_train,train_text = read_files(<span class="string">&quot;train&quot;</span>)</span><br><span class="line"><span class="comment">#讀入測試資料</span></span><br><span class="line">y_test,test_text = read_files(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="建立token"><a href="#建立token" class="headerlink" title="建立token"></a>建立token</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">token = Tokenizer(num_words = <span class="number">2000</span>)</span><br><span class="line">token.fit_on_texts(train_text)</span><br></pre></td></tr></table></figure><h2 id="將-文字-轉換成-數字list"><a href="#將-文字-轉換成-數字list" class="headerlink" title="將 文字 轉換成 數字list"></a>將 文字 轉換成 數字list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train_seq = token.texts_to_sequences(train_text)</span><br><span class="line">x_test_seq = token.texts_to_sequences(test_text)</span><br></pre></td></tr></table></figure><h2 id="使所有數字list長度都轉為100"><a href="#使所有數字list長度都轉為100" class="headerlink" title="使所有數字list長度都轉為100"></a>使所有數字list長度都轉為100</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train = sequence.pad_sequences(x_train_seq,maxlen=<span class="number">100</span>)</span><br><span class="line">x_test  = sequence.pad_sequences(x_test_seq ,maxlen=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="加入Embding層"><a href="#加入Embding層" class="headerlink" title="加入Embding層"></a>加入Embding層</h1><h2 id="匯入所需模型-1"><a href="#匯入所需模型-1" class="headerlink" title="匯入所需模型"></a>匯入所需模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.core <span class="keyword">import</span> Dense, Dropout, Activation, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.layers.embding <span class="keyword">import</span> Embding</span><br></pre></td></tr></table></figure><h2 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure><h2 id="將Embding層加入模型"><a href="#將Embding層加入模型" class="headerlink" title="將Embding層加入模型"></a>將Embding層加入模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(Embding(output_dim=<span class="number">32</span>,input_dim=<span class="number">2000</span>,input_length=<span class="number">100</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.2</span>))</span><br></pre></td></tr></table></figure><h1 id="建立多層感應模型"><a href="#建立多層感應模型" class="headerlink" title="建立多層感應模型"></a>建立多層感應模型</h1><h2 id="將Flatten層加入模型"><a href="#將Flatten層加入模型" class="headerlink" title="將Flatten層加入模型"></a>將Flatten層加入模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Flatten())</span><br></pre></td></tr></table></figure><h2 id="將隱藏、輸出層加入模型"><a href="#將隱藏、輸出層加入模型" class="headerlink" title="將隱藏、輸出層加入模型"></a>將隱藏、輸出層加入模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#將隱藏層加入模型</span></span><br><span class="line">model.add(Dense(units =<span class="number">256</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"><span class="comment">#Dropout</span></span><br><span class="line">model.add(Dropout(<span class="number">0.35</span>))</span><br><span class="line"><span class="comment">#將輸出層加入模型</span></span><br><span class="line">model.add(Dense(units = <span class="number">1</span>,activation = <span class="string">&#x27;sigmoid&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="訓練模型"><a href="#訓練模型" class="headerlink" title="訓練模型"></a>訓練模型</h1><h2 id="定義訓練方式"><a href="#定義訓練方式" class="headerlink" title="定義訓練方式"></a>定義訓練方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.compile(loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,optimizer = <span class="string">&#x27;adam&#x27;</span>,metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="開始訓練"><a href="#開始訓練" class="headerlink" title="開始訓練"></a>開始訓練</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_history = model.fit(x_train,y_train,batch_size = <span class="number">100</span>,epochs = <span class="number">10</span>,verbose = <span class="number">2</span>,validation_split = <span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><h1 id="進行預測"><a href="#進行預測" class="headerlink" title="進行預測"></a>進行預測</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict = model.predict_classes(x_test)</span><br></pre></td></tr></table></figure><h1 id="查看預測資料"><a href="#查看預測資料" class="headerlink" title="查看預測資料"></a>查看預測資料</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SentimentDict=&#123;<span class="number">1</span>:<span class="string">&#x27;正面的&#x27;</span>,<span class="number">0</span>:<span class="string">&#x27;負面的&#x27;</span>&#125;</span><br><span class="line">def display_test_Sentiment(i)&#123;</span><br><span class="line">    print(test_text[i])</span><br><span class="line">    print(<span class="string">&#x27;真實值為:&#x27;</span>,SentimentDict[y_test])</span><br><span class="line">    print(<span class="string">&#x27;預測結果為:&#x27;</span>,SentimentDict[predict_classes[i]])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 實作AI </tag>
            
            <tag> python </tag>
            
            <tag> keras </tag>
            
            <tag> 情緒分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN辨識物體</title>
      <link href="/2020/04/23/AI-6/"/>
      <url>/2020/04/23/AI-6/</url>
      
        <content type="html"><![CDATA[<h1 id="資料預處理"><a href="#資料預處理" class="headerlink" title="資料預處理"></a>資料預處理</h1><h2 id="匯入所需的模組"><a href="#匯入所需的模組" class="headerlink" title="匯入所需的模組"></a>匯入所需的模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> cifar10</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="讀取cifar10資料"><a href="#讀取cifar10資料" class="headerlink" title="讀取cifar10資料"></a>讀取cifar10資料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x_train,y_train), (x_test,y_test) = cifar10.load_data()</span><br></pre></td></tr></table></figure><h2 id="將feature標準化"><a href="#將feature標準化" class="headerlink" title="將feature標準化"></a>將feature標準化</h2><p>image的數字標準化，可以提高後續訓練模型的準確率，並更快速收斂。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train_normalize = x_train.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255</span></span><br><span class="line">x_test_normalize = x_test.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255</span></span><br></pre></td></tr></table></figure><h2 id="label以One-hot-encoding轉換"><a href="#label以One-hot-encoding轉換" class="headerlink" title="label以One-hot encoding轉換"></a>label以One-hot encoding轉換</h2><p>使用np_utils.to_categorical，將訓練資料與測試資料進行轉換。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_trainOneHot = np_utils.to_categorical(y_train)</span><br><span class="line">y_testOneHot = np_utils.to_categorical(y_test)</span><br></pre></td></tr></table></figure><h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><h2 id="匯入所需的模組-1"><a href="#匯入所需的模組-1" class="headerlink" title="匯入所需的模組"></a>匯入所需的模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout, Flatten,Conv2D,MaxPooling2D</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Activation,ZeroPadding2D</span><br></pre></td></tr></table></figure><h2 id="建立Sequential模型"><a href="#建立Sequential模型" class="headerlink" title="建立Sequential模型"></a>建立Sequential模型</h2><p>建立一個線性堆疊模型，以後只要用model.add()就能將神經網路層加入模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure><h2 id="建立卷積層1與池化層1"><a href="#建立卷積層1與池化層1" class="headerlink" title="建立卷積層1與池化層1"></a>建立卷積層1與池化層1</h2><h3 id="建立卷積層1"><a href="#建立卷積層1" class="headerlink" title="建立卷積層1"></a>建立卷積層1</h3><p>輸入的數字影像是32 × 32的大小，執行第1次卷積運算會產生16個影像，卷積運算不會改變影像大小，所以仍然是32 × 32的大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Conv2D(filters = <span class="number">32</span>,kernel_size = (<span class="number">3</span>,<span class="number">3</span>),padding = <span class="string">&#x27;same&#x27;</span>,input_shape = (<span class="number">32</span>,<span class="number">32</span>,<span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span> ))</span><br></pre></td></tr></table></figure><h3 id="建立池化層1"><a href="#建立池化層1" class="headerlink" title="建立池化層1"></a>建立池化層1</h3><p>輸入參數pool_size = (2,2)，執行一次減縮取樣後，將影像從32 × 32的影像，縮小至14 × 14的影像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(MaxPooling2D(pool_size = (<span class="number">2</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><h2 id="建立卷積層2與池化層2"><a href="#建立卷積層2與池化層2" class="headerlink" title="建立卷積層2與池化層2"></a>建立卷積層2與池化層2</h2><h3 id="建立卷積層2"><a href="#建立卷積層2" class="headerlink" title="建立卷積層2"></a>建立卷積層2</h3><p>輸入的數字影像是14 × 14的大小，執行第1次卷積運算會產生36個影像，卷積運算不會改變影像大小，所以仍然是14 × 14的大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Conv2D(filters = <span class="number">64</span>,kernel_size = (<span class="number">3</span>,<span class="number">3</span>),padding = <span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span> ))</span><br></pre></td></tr></table></figure><h3 id="建立池化層2"><a href="#建立池化層2" class="headerlink" title="建立池化層2"></a>建立池化層2</h3><p>輸入參數pool_size = (2,2)，執行一次減縮取樣後，將影像從14 × 14的影像，縮小至7 × 7的影像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(MaxPooling2D(pool_size = (<span class="number">2</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><h3 id="建立Dropout避免Overfitting"><a href="#建立Dropout避免Overfitting" class="headerlink" title="建立Dropout避免Overfitting"></a>建立Dropout避免Overfitting</h3><p>在每次迭代運算後隨機放棄25%的神經元，避免Overfitting</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br></pre></td></tr></table></figure><h2 id="建立神經網路"><a href="#建立神經網路" class="headerlink" title="建立神經網路"></a>建立神經網路</h2><h3 id="建立平坦層"><a href="#建立平坦層" class="headerlink" title="建立平坦層"></a>建立平坦層</h3><p>建立平坦層將36個7×7影像，轉換為1維向量，長度是36×7×7=1764，也就是1764個float數字，對應到1764個神經元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br></pre></td></tr></table></figure><h3 id="建立隱藏層"><a href="#建立隱藏層" class="headerlink" title="建立隱藏層"></a>建立隱藏層</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(<span class="number">1024</span>, activation =<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br></pre></td></tr></table></figure><h3 id="建立輸出層"><a href="#建立輸出層" class="headerlink" title="建立輸出層"></a>建立輸出層</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="查看模型摘要"><a href="#查看模型摘要" class="headerlink" title="查看模型摘要"></a>查看模型摘要</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure><h1 id="進行訓練"><a href="#進行訓練" class="headerlink" title="進行訓練"></a>進行訓練</h1><h2 id="定義訓練方式"><a href="#定義訓練方式" class="headerlink" title="定義訓練方式"></a>定義訓練方式</h2><p>在訓練之前，我們必須用compile對訓練的模型進行設定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.compile( loss = <span class="string">&#x27;categorical_crossentropy&#x27;</span> ,optimizer=<span class="string">&#x27;adam&#x27;</span>,metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>loss: 損失函數，在深度學習中使用cross_entropy訓練效果較好</li><li>optimizer: 訓練優化的方式，使用adam最優化方式，可以收斂得更快，並提高準確度</li><li>metrics: 設定評估模型的方式是accuracy準確率<h2 id="開始訓練"><a href="#開始訓練" class="headerlink" title="開始訓練"></a>開始訓練</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_history = model.fit( x_train_normalize,y_trainOneHot,</span><br><span class="line">                                             validation_split=<span class="number">0.2</span>,epochs=<span class="number">10</span>,</span><br><span class="line">                                             batch_size=<span class="number">128</span>,verbose=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><ol><li>輸入訓練資料<ul><li>x=x_train4D_normalize</li><li>y = y_trainOnehot</li></ul></li><li>設定訓練與驗證資料比例<ul><li>validation_split= 0.2<br>訓練之前Keras會自動將資料分成: 80%作為訓練、20%作為驗證<br>總共有50000筆資料，所以有40000訓練、10000筆做驗證</li></ul></li><li>設定epoch次數與每一批筆數<ul><li>epochs=10，執行10次訓練週期</li><li>batch_size=128，每一批次128筆資料</li></ul></li><li>顯示訓練過程</li></ol><p>loss、acc是<strong>訓練資料的</strong>偏差及準確，val_loss、val_acc則為<strong>驗證資料的</strong>偏差及準確<br>由上圖可得知，訓練次數越多，loss誤差就越小，準確率越高</p><h2 id="製作訓練過程圖表"><a href="#製作訓練過程圖表" class="headerlink" title="製作訓練過程圖表"></a>製作訓練過程圖表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_train_history</span>(<span class="params">train_history,train,validation</span>):</span></span><br><span class="line">    plt.plot(train_history.history[train])</span><br><span class="line">    plt.plot(train_history.history[validation])</span><br><span class="line">    plt.title(<span class="string">&#x27;Train History&#x27;</span>)</span><br><span class="line">    plt.ylabel(train)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">    plt.legend([<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;validation&#x27;</span>],loc = <span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="畫出accuracy執行結果"><a href="#畫出accuracy執行結果" class="headerlink" title="畫出accuracy執行結果"></a>畫出accuracy執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;acc&#x27;</span>,<span class="string">&#x27;val_acc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>訓練與驗證時的準確度會隨著訓練次數變多而增加</p><h2 id="畫出loss誤差執行結果"><a href="#畫出loss誤差執行結果" class="headerlink" title="畫出loss誤差執行結果"></a>畫出loss誤差執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;loss&#x27;</span>,<span class="string">&#x27;val_loss&#x27;</span>)</span><br></pre></td></tr></table></figure><p>訓練與驗證時的準確度會隨著訓練次數變多而減少</p><h1 id="評估模型準確率"><a href="#評估模型準確率" class="headerlink" title="評估模型準確率"></a>評估模型準確率</h1><p>使用test測試資料，評估模型準確度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scores = model.evaluate(x_test_normalize, y_testOneHot)</span><br><span class="line">scores[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="進行預測"><a href="#進行預測" class="headerlink" title="進行預測"></a>進行預測</h1><h2 id="執行預測"><a href="#執行預測" class="headerlink" title="執行預測"></a>執行預測</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = model.predict_classes(x_test_normalize)</span><br></pre></td></tr></table></figure><h2 id="預測結果"><a href="#預測結果" class="headerlink" title="預測結果"></a>預測結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立對應表</span></span><br><span class="line">label_dict = &#123;<span class="number">0</span>:<span class="string">&quot;airplane&quot;</span>,<span class="number">1</span>:<span class="string">&quot;automobile&quot;</span>,<span class="number">2</span>:<span class="string">&quot;bird&quot;</span>,<span class="number">3</span>:<span class="string">&quot;cat&quot;</span>,<span class="number">4</span>:<span class="string">&quot;deer&quot;</span>,</span><br><span class="line">                       <span class="number">5</span>:<span class="string">&quot;dog&quot;</span>,<span class="number">6</span>:<span class="string">&quot;frog&quot;</span>,<span class="number">7</span>:<span class="string">&quot;horse&quot;</span>,<span class="number">8</span>:<span class="string">&quot;ship&quot;</span>,<span class="number">9</span>:<span class="string">&quot;truck&quot;</span>&#125;</span><br><span class="line"><span class="comment">#視覺化函式</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_img_prediction</span>(<span class="params">images,labels,prediction,idx,num = <span class="number">10</span></span>):</span></span><br><span class="line">    fig = plt.gcf()</span><br><span class="line">    fig.set_size_inches(<span class="number">12</span>,<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">if</span> num&gt;<span class="number">25</span>: num = <span class="number">25</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,num):</span><br><span class="line">        ax = plt.subplot(<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>+i)</span><br><span class="line">        ax.imshow(images[idx],cmap=<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line">        title = str(i)+ <span class="string">&#x27;,&#x27;</span> + label_dict[labels[i][<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">if</span> len(prediction)&gt;<span class="number">0</span>:</span><br><span class="line">            title+=<span class="string">&#x27;=&gt;&#x27;</span>+label_dict[prediction[i]]</span><br><span class="line">        ax.set_title(title,fontsize = <span class="number">10</span>)</span><br><span class="line">        ax.set_xticks([]);ax.set_yticks([])</span><br><span class="line">        idx+=<span class="number">1</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0~10筆資料預覽</span></span><br><span class="line">plot_img_prediction(x_test,y_test,prediction,<span class="number">0</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/672N79w.png"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 實作AI </tag>
            
            <tag> python </tag>
            
            <tag> keras </tag>
            
            <tag> CNN </tag>
            
            <tag> 物體辨識 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++學習地圖</title>
      <link href="/2020/04/19/map/"/>
      <url>/2020/04/19/map/</url>
      
        <content type="html"><![CDATA[<div class='tip warning'><p><strong>warning</strong> 連結幾乎都是錯的，我會盡快補上的(´。＿。｀)<p></div><h1 id="基礎語法"><a href="#基礎語法" class="headerlink" title="基礎語法"></a>基礎語法</h1><h2 id="基礎輸入輸出"><a href="#基礎輸入輸出" class="headerlink" title="基礎輸入輸出"></a>基礎輸入輸出</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green right" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="運算子與基本結構"><a href="#運算子與基本結構" class="headerlink" title="運算子與基本結構"></a>運算子與基本結構</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="條件選擇"><a href="#條件選擇" class="headerlink" title="條件選擇"></a>條件選擇</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #5cb85c;">Code  </button><span class="hide-content">我不常單獨用，（；´д｀）ゞ</span></span><h1 id="比較進階的基礎"><a href="#比較進階的基礎" class="headerlink" title="比較進階的基礎"></a>比較進階的基礎</h1><h2 id="字串、stringstream"><a href="#字串、stringstream" class="headerlink" title="字串、stringstream"></a>字串、stringstream</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/07/12/string/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/tags/%E5%AD%97%E4%B8%B2/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><a class="btn-beautify button--animated red" href="https://zrn-coding.github.io/2020/03/20/STL/"   title="舊版筆記"><i class="far fa-hand-point-right fa-fw"></i><span>舊版筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/tags/STL/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h3 id="重製版"><a href="#重製版" class="headerlink" title="重製版"></a>重製版</h3><ol><li><code>vector</code> <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/08/19/vector/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li><code>queue</code> <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/08/21/queue/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li><code>stack</code> <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/08/21/stack/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li><code>map</code> <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/08/21/map2/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li><code>set</code> <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/08/21/set/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li><code>list</code> <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/08/21/list/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li>演算法 <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li></ol><h2 id="窮舉法"><a href="#窮舉法" class="headerlink" title="窮舉法"></a>窮舉法</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/05/10/sort/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="模擬"><a href="#模擬" class="headerlink" title="模擬"></a>模擬</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/06/07/simulation/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/06/07/dc/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="並查集"><a href="#並查集" class="headerlink" title="並查集"></a>並查集</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/06/04/dsu/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="hhttps://zrn-code.github.io/tags/%E4%B8%A6%E6%9F%A5%E9%9B%86/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="基礎圖論"><a href="#基礎圖論" class="headerlink" title="基礎圖論"></a>基礎圖論</h2><a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/06/16/graph/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/tags/%E5%9C%96%E8%AB%96/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><ol><li>DFS <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li>BFS <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li>最短路徑 <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li><li>最小生成樹 <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a></li></ol><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><h2 id="基礎數論"><a href="#基礎數論" class="headerlink" title="基礎數論"></a>基礎數論</h2>   <a class="btn-beautify button--animated blue" href="https://zrn-coding.github.io/2020/03/16/basic/"   title="筆記"><i class="far fa-hand-point-right fa-fw"></i><span>筆記</span></a> <a class="btn-beautify button--animated green" href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/"   title="Code"><i class="far fa-hand-point-right fa-fw"></i><span>Code</span></a><table><thead><tr><th align="center"></th><th align="center">名稱</th><th align="center">筆記</th><th align="center">題目列表</th><th align="center"></th><th align="center">名稱</th><th align="center">筆記</th><th align="center">題目列表</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">基礎語法</td><td align="center"><a href="https://zrn-coding.github.io/2020/03/16/basic/">連結</a></td><td align="center"><a href="https://zrn-code.github.io/categories/%E5%AD%B8%E6%A0%A1%E9%A1%8C%E5%96%AE/%E5%9F%BA%E7%A4%8E/">連結</a></td><td align="center">6</td><td align="center">分而治之</td><td align="center"><a href="https://zrn-coding.github.io/2020/06/07/dc/">連結</a></td><td align="center">連結</td></tr><tr><td align="center">2</td><td align="center">STL</td><td align="center"><a href="https://zrn-coding.github.io/2020/03/20/STL/">連結</a></td><td align="center"><a href="https://zrn-code.github.io/tags/STL/">連結</a></td><td align="center">7</td><td align="center">並查集</td><td align="center"><a href="https://zrn-coding.github.io/2020/06/04/dsu/">連結</a></td><td align="center">連結</td></tr><tr><td align="center">3</td><td align="center">窮舉法</td><td align="center"><a href="https://zrn-coding.github.io/2020/05/10/brute/">連結</a></td><td align="center"><a href="https://zrn-code.github.io/tags/%E7%AA%AE%E8%88%89%E6%B3%95/">連結</a></td><td align="center">8</td><td align="center">圖論</td><td align="center">連結</td><td align="center">連結</td></tr><tr><td align="center">4</td><td align="center">排序</td><td align="center"><a href="https://zrn-coding.github.io/2020/05/10/sort/">連結</a></td><td align="center"><a href="https://zrn-code.github.io/tags/%E6%8E%92%E5%BA%8F/">連結</a></td><td align="center">9</td><td align="center">DP</td><td align="center">連結</td><td align="center">連結</td></tr><tr><td align="center">5</td><td align="center">模擬</td><td align="center"><a href="https://zrn-coding.github.io/2020/06/07/simulation/">連結</a></td><td align="center"><a href="https://zrn-code.github.io/tags/%E6%A8%A1%E6%93%AC/">連結</a></td><td align="center">10</td><td align="center">數學</td><td align="center">連結</td><td align="center">連結</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 學習地圖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 學習歷程 </tag>
            
            <tag> 進化之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN手寫辨識</title>
      <link href="/2020/04/16/AI-5/"/>
      <url>/2020/04/16/AI-5/</url>
      
        <content type="html"><![CDATA[<h1 id="卷積神經網路簡介"><a href="#卷積神經網路簡介" class="headerlink" title="卷積神經網路簡介"></a>卷積神經網路簡介</h1><h2 id="卷積神經網路介紹"><a href="#卷積神經網路介紹" class="headerlink" title="卷積神經網路介紹"></a>卷積神經網路介紹</h2><h2 id="卷積運算"><a href="#卷積運算" class="headerlink" title="卷積運算"></a>卷積運算</h2><h2 id="使用單一filter-weight卷積運算產生影像"><a href="#使用單一filter-weight卷積運算產生影像" class="headerlink" title="使用單一filter weight卷積運算產生影像"></a>使用單一filter weight卷積運算產生影像</h2><h2 id="Max-Pool-運算說明"><a href="#Max-Pool-運算說明" class="headerlink" title="Max-Pool 運算說明"></a>Max-Pool 運算說明</h2><h2 id="使用Max-Pool-將手寫數字影像轉換"><a href="#使用Max-Pool-將手寫數字影像轉換" class="headerlink" title="使用Max-Pool 將手寫數字影像轉換"></a>使用Max-Pool 將手寫數字影像轉換</h2><p>使用Max-Pool進行縮減取樣，執行手寫數字辨識轉換，將16個28 × 28影像縮小為16個14 × 14的影像。影像數不會受到改變。<br>縮小的好處有: </p><ol><li><strong>減少需處理的資料點</strong>: 減少後續運算所需的時間</li><li><strong>讓影像位置差異變小</strong>: 例如手寫數字5，位置可能不同，但位置的不同可能會影響辨識，因此減少影像大小，位置差異也會減少</li><li><strong>參數的數量和計算量下降</strong>: 在意一定程度上可以控制Overfitting問題</li></ol><h1 id="資料預處理"><a href="#資料預處理" class="headerlink" title="資料預處理"></a>資料預處理</h1><h2 id="匯入所需的模組"><a href="#匯入所需的模組" class="headerlink" title="匯入所需的模組"></a>匯入所需的模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="讀取mnist資料"><a href="#讀取mnist資料" class="headerlink" title="讀取mnist資料"></a>讀取mnist資料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x_train,y_train), (x_test,y_test) = mnist.load_data()</span><br></pre></td></tr></table></figure><h2 id="將feature用reshape轉換"><a href="#將feature用reshape轉換" class="headerlink" title="將feature用reshape轉換"></a>將feature用reshape轉換</h2><p>將原本28×28的2為數字影像，以reshape轉換為6000 × 28 × 28 × 1的矩陣。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train4D = x_train.reshape(x_train.shape[<span class="number">0</span>],<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">x_test4D = x_test.reshape(x_test.shape[<span class="number">0</span>],<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="將feature標準化"><a href="#將feature標準化" class="headerlink" title="將feature標準化"></a>將feature標準化</h2><p>image的數字標準化，可以提高後續訓練模型的準確率，並更快速收斂。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train4D_normalize = x_train4D / <span class="number">255</span></span><br><span class="line">x_test4D_normalize = x_test4D / <span class="number">255</span></span><br></pre></td></tr></table></figure><h2 id="label以One-hot-encoding轉換"><a href="#label以One-hot-encoding轉換" class="headerlink" title="label以One-hot encoding轉換"></a>label以One-hot encoding轉換</h2><p>使用np_utils.to_categorical，將訓練資料與測試資料進行轉換。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_trainOneHot = np_utils.to_categorical(y_train)</span><br><span class="line">y_testOneHot = np_utils.to_categorical(y_test)</span><br></pre></td></tr></table></figure><h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><h2 id="匯入所需的模組-1"><a href="#匯入所需的模組-1" class="headerlink" title="匯入所需的模組"></a>匯入所需的模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout,Flatten, Conv2D,MaxPooling2D</span><br></pre></td></tr></table></figure><h2 id="建立Sequential模型"><a href="#建立Sequential模型" class="headerlink" title="建立Sequential模型"></a>建立Sequential模型</h2><p>建立一個線性堆疊模型，以後只要用model.add()就能將神經網路層加入模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure><h2 id="建立卷積層1與池化層1"><a href="#建立卷積層1與池化層1" class="headerlink" title="建立卷積層1與池化層1"></a>建立卷積層1與池化層1</h2><h3 id="建立卷積層1"><a href="#建立卷積層1" class="headerlink" title="建立卷積層1"></a>建立卷積層1</h3><p>輸入的數字影像是28 × 28的大小，執行第1次卷積運算會產生16個影像，卷積運算不會改變影像大小，所以仍然是28 × 28的大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Conv2D(filters = <span class="number">16</span>,kernel_size = (<span class="number">5</span>,<span class="number">5</span>),padding = <span class="string">&#x27;same&#x27;</span>,input_shape = (<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>), activation=<span class="string">&#x27;relu&#x27;</span> ))</span><br></pre></td></tr></table></figure><h3 id="建立池化層1"><a href="#建立池化層1" class="headerlink" title="建立池化層1"></a>建立池化層1</h3><p>輸入參數pool_size = (2,2)，執行一次減縮取樣後，將影像從28 × 28的影像，縮小至14 × 14的影像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(MaxPooling2D(pool_size = (<span class="number">2</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><h2 id="建立卷積層2與池化層2"><a href="#建立卷積層2與池化層2" class="headerlink" title="建立卷積層2與池化層2"></a>建立卷積層2與池化層2</h2><h3 id="建立卷積層2"><a href="#建立卷積層2" class="headerlink" title="建立卷積層2"></a>建立卷積層2</h3><p>輸入的數字影像是14 × 14的大小，執行第1次卷積運算會產生36個影像，卷積運算不會改變影像大小，所以仍然是14 × 14的大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Conv2D(filters = <span class="number">36</span>,kernel_size = (<span class="number">5</span>,<span class="number">5</span>),padding = <span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span> ))</span><br></pre></td></tr></table></figure><h3 id="建立池化層2"><a href="#建立池化層2" class="headerlink" title="建立池化層2"></a>建立池化層2</h3><p>輸入參數pool_size = (2,2)，執行一次減縮取樣後，將影像從14 × 14的影像，縮小至7 × 7的影像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(MaxPooling2D(pool_size = (<span class="number">2</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><h3 id="建立Dropout避免Overfitting"><a href="#建立Dropout避免Overfitting" class="headerlink" title="建立Dropout避免Overfitting"></a>建立Dropout避免Overfitting</h3><p>在每次蝶帶運算後隨機放棄25%的神經元，避免Overfitting</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br></pre></td></tr></table></figure><h2 id="建立神經網路"><a href="#建立神經網路" class="headerlink" title="建立神經網路"></a>建立神經網路</h2><h3 id="建立平坦層"><a href="#建立平坦層" class="headerlink" title="建立平坦層"></a>建立平坦層</h3><p>建立平坦層將36個7×7影像，轉換為1維向量，長度是36×7×7=1764，也就是1764個float數字，對應到1764個神經元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Flatten())</span><br></pre></td></tr></table></figure><h3 id="建立隱藏層"><a href="#建立隱藏層" class="headerlink" title="建立隱藏層"></a>建立隱藏層</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(<span class="number">128</span>, activation =<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><h3 id="建立輸出層"><a href="#建立輸出層" class="headerlink" title="建立輸出層"></a>建立輸出層</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="查看模型摘要"><a href="#查看模型摘要" class="headerlink" title="查看模型摘要"></a>查看模型摘要</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure><h1 id="進行訓練"><a href="#進行訓練" class="headerlink" title="進行訓練"></a>進行訓練</h1><h2 id="定義訓練方式"><a href="#定義訓練方式" class="headerlink" title="定義訓練方式"></a>定義訓練方式</h2><p>在訓練之前，我們必須用compile對訓練的模型進行設定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.compile( loss = <span class="string">&#x27;categorical_crossentropy&#x27;</span> ,optimizer=<span class="string">&#x27;adam&#x27;</span>,metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>loss: 損失函數，在深度學習中使用cross_entropy訓練效果較好</li><li>optimizer: 訓練優化的方式，使用adam最優化方式，可以收斂得更快，並提高準確度</li><li>metrics: 設定評估模型的方式是accuracy準確率<h2 id="開始訓練"><a href="#開始訓練" class="headerlink" title="開始訓練"></a>開始訓練</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_history = model.fit(x = x_train4D_normalize,y = y_trainOneHot,validation_split=<span class="number">0.2</span>,epochs=<span class="number">10</span>,batch_size=<span class="number">200</span>,verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><ol><li>輸入訓練資料<ul><li>x=x_train4D_normalize</li><li>y = y_trainOnehot</li></ul></li><li>設定訓練與驗證資料比例<ul><li>validation_split= 0.2<br>訓練之前Keras會自動將資料分成: 80%作為訓練、20%作為驗證<br>總共有60000筆資料，所以有48000訓練、12000筆做驗證</li></ul></li><li>設定epoch次數與每一批筆數<ul><li>epochs=10，執行10次訓練週期</li><li>batch_size=200，每一批次200筆資料</li></ul></li><li>顯示訓練過程</li></ol><p>loss、acc是<strong>訓練資料的</strong>偏差及準確，val_loss、val_acc則為<strong>驗證資料的</strong>偏差及準確<br>由上圖可得知，訓練次數越多，loss誤差就越小，準確率越高</p><h2 id="製作訓練過程圖表"><a href="#製作訓練過程圖表" class="headerlink" title="製作訓練過程圖表"></a>製作訓練過程圖表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_train_history</span>(<span class="params">train_history,train,validation</span>):</span></span><br><span class="line">    plt.plot(train_history.history[train])</span><br><span class="line">    plt.plot(train_history.history[validation])</span><br><span class="line">    plt.title(<span class="string">&#x27;Train History&#x27;</span>)</span><br><span class="line">    plt.ylabel(train)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">    plt.legend([<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;validation&#x27;</span>],loc = <span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="畫出accuracy執行結果"><a href="#畫出accuracy執行結果" class="headerlink" title="畫出accuracy執行結果"></a>畫出accuracy執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;acc&#x27;</span>,<span class="string">&#x27;val_acc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>訓練與驗證時的準確度會隨著訓練次數變多而增加</p><h2 id="畫出loss誤差執行結果"><a href="#畫出loss誤差執行結果" class="headerlink" title="畫出loss誤差執行結果"></a>畫出loss誤差執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;loss&#x27;</span>,<span class="string">&#x27;val_loss&#x27;</span>)</span><br></pre></td></tr></table></figure><p>訓練與驗證時的準確度會隨著訓練次數變多而減少</p><h1 id="評估模型準確率"><a href="#評估模型準確率" class="headerlink" title="評估模型準確率"></a>評估模型準確率</h1><p>使用test測試資料，評估模型準確度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = model.evaluate(x_test4D_normalize, y_testOneHot)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">&#x27;accuracy=&#x27;</span>,score[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h1 id="進行預測"><a href="#進行預測" class="headerlink" title="進行預測"></a>進行預測</h1><h2 id="執行預測"><a href="#執行預測" class="headerlink" title="執行預測"></a>執行預測</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = model.predict_classes(x_test)</span><br></pre></td></tr></table></figure><h2 id="預測結果"><a href="#預測結果" class="headerlink" title="預測結果"></a>預測結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction</span><br></pre></td></tr></table></figure><h1 id="顯示混淆矩陣"><a href="#顯示混淆矩陣" class="headerlink" title="顯示混淆矩陣"></a>顯示混淆矩陣</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.crosstab(y_test_label,prediction,rownames=[<span class="string">&#x27;label&#x27;</span>],colnames=[<span class="string">&#x27;predict&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 實作AI </tag>
            
            <tag> python </tag>
            
            <tag> 手寫辨識 </tag>
            
            <tag> keras </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras MLP辨識手寫數字</title>
      <link href="/2020/04/09/AI-4/"/>
      <url>/2020/04/09/AI-4/</url>
      
        <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><div class="mermaid">          graph LR;    1.資料預處理-->2.建立模型-->3.訓練模型-->4.評估模型準確率-->5.進行預測;          </div><h1 id="資料預處理"><a href="#資料預處理" class="headerlink" title="資料預處理"></a>資料預處理</h1><h2 id="匯入所需的模組"><a href="#匯入所需的模組" class="headerlink" title="匯入所需的模組"></a>匯入所需的模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="讀取mnist資料"><a href="#讀取mnist資料" class="headerlink" title="讀取mnist資料"></a>讀取mnist資料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line">(x_train_image,y_train_label),\</span><br><span class="line">(x_test_image,y_test_label)  =  mnist.load_data()</span><br></pre></td></tr></table></figure><h2 id="將feature用reshape轉換"><a href="#將feature用reshape轉換" class="headerlink" title="將feature用reshape轉換"></a>將feature用reshape轉換</h2><p>將原本28×28的2為數字影像，以reshape轉換為1維的向量，在使用astype轉換為float，共784個float。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train = x_train_image.reshape(<span class="number">60000</span>, <span class="number">784</span>).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">x_test  = x_test_image.reshape(<span class="number">10000</span>,<span class="number">784</span>).astype(<span class="string">&#x27;float32&#x27;</span>) </span><br></pre></td></tr></table></figure><p>執行完後，可以看到大部分的數字都是0，少部分有數字。數字都是由0至255，表示一點的灰階深淺。</p><h2 id="將feature標準化"><a href="#將feature標準化" class="headerlink" title="將feature標準化"></a>將feature標準化</h2><p>image的數字標準化，可以提高後續訓練模型的準確率，經標準化後數字都介於0至1之間。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train_normalize = x_train /<span class="number">255</span></span><br><span class="line">x_test_normalize = x_test /<span class="number">255</span></span><br></pre></td></tr></table></figure><h2 id="label以One-hot-encoding轉換"><a href="#label以One-hot-encoding轉換" class="headerlink" title="label以One-hot encoding轉換"></a>label以One-hot encoding轉換</h2><p>label欄位原本是0至9的數字，必須轉換為10個0與1的組合，分別對應到10個輸出神經元。<br>例如: 數字5經轉換後會是0000010000</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_train_onehot = np_utils.to_categorical(y_train_label)</span><br><span class="line">y_test_onehot = np_utils.to_categorical(y_test_label)</span><br></pre></td></tr></table></figure><h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><h2 id="匯入所需的模組-1"><a href="#匯入所需的模組-1" class="headerlink" title="匯入所需的模組"></a>匯入所需的模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br></pre></td></tr></table></figure><h2 id="建立Sequential模型"><a href="#建立Sequential模型" class="headerlink" title="建立Sequential模型"></a>建立Sequential模型</h2><p>建立一個線性堆疊模型，以後只要用model.add()就能將神經網路層加入模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure><h2 id="建立-輸入層-與-隱藏層"><a href="#建立-輸入層-與-隱藏層" class="headerlink" title="建立 輸入層 與 隱藏層"></a>建立 輸入層 與 隱藏層</h2><p>使用model.add()加入Dense神經網路層。Dense神經網路的特色是所有上一層與下一層的神經元，都完全連結。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(units = <span class="number">256</span>,input_dim  =<span class="number">784</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="建立輸出層"><a href="#建立輸出層" class="headerlink" title="建立輸出層"></a>建立輸出層</h2><p>使用model.add()加入Dense神經網路層，共有10個神經元，對應到0到9個數字。並使用softmax進行轉換，softmax可以將神經元的輸出轉化成預測每個數字的機率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(units = <span class="number">10</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="查看模型摘要"><a href="#查看模型摘要" class="headerlink" title="查看模型摘要"></a>查看模型摘要</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/summary.png?raw=true"><br>共有2個層:</p><ul><li>隱藏層: 共有256個神經元。輸入層與隱藏層共同建立所以沒有顯示輸入層</li><li>輸出層: 共有10個神經元</li></ul><p>每一層Param計算方式為: Param = (上一層神經元數量)×(本層神經元數量)+(本層神經元數量)</p><ul><li>隱藏層的Param是200960，就是因為 (784) × (256) + (256) = 200960</li><li>輸出層的Param是2570，就是因為 (256) × (10) + (10) = 2570</li></ul><p>全部需要訓練的超參數(Trainable params)，是每一層的總和: 200960+2570 = 203530<br>通常而言，Trainable params 越大， 訓練的時間越長</p><h1 id="進行訓練"><a href="#進行訓練" class="headerlink" title="進行訓練"></a>進行訓練</h1><h2 id="定義訓練方式"><a href="#定義訓練方式" class="headerlink" title="定義訓練方式"></a>定義訓練方式</h2><p>在訓練之前，我們必須用compile對訓練的模型進行設定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.compile( loss = <span class="string">&#x27;categorical_crossentropy&#x27;</span> ,optimizer=<span class="string">&#x27;adam&#x27;</span>,metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>loss: 損失函數，在深度學習中使用cross_entropy訓練效果較好</li><li>optimizer: 訓練優化的方式，使用adam最優化方式，可以收斂得更快，並提高準確度</li><li>metrics: 設定評估模型的方式是accuracy準確率<h2 id="開始訓練"><a href="#開始訓練" class="headerlink" title="開始訓練"></a>開始訓練</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_history =model.fit(x=x_train_normalize,y = y_train_onehot,validation_split=<span class="number">0.2</span>,epochs=<span class="number">10</span>,batch_size=<span class="number">200</span>,verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><ol><li>輸入訓練資料<ul><li>x=x_train_normalize</li><li>y = y_train_onehot</li></ul></li><li>設定訓練與驗證資料比例<ul><li>validation_split= 0.2<br>訓練之前Keras會自動將資料分成: 80%作為訓練、20%作為驗證<br>總共有60000筆資料，所以有48000訓練、12000筆做驗證</li></ul></li><li>設定epoch次數與每一批筆數<ul><li>epochs=10，執行10次訓練週期</li><li>batch_size=200，每一批次200筆資料</li></ul></li><li>顯示訓練過程<br><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/epoch.png"><br>loss、acc是<strong>訓練資料的</strong>偏差及準確，val_loss、val_acc則為<strong>驗證資料的</strong>偏差及準確<br>由上圖可得知，訓練次數越多，loss誤差就越小，準確率越高<h2 id="製作訓練過程圖表"><a href="#製作訓練過程圖表" class="headerlink" title="製作訓練過程圖表"></a>製作訓練過程圖表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_train_history</span>(<span class="params">train_history,train,validation</span>):</span></span><br><span class="line">    plt.plot(train_history.history[train])</span><br><span class="line">    plt.plot(train_history.history[validation])</span><br><span class="line">    plt.title(<span class="string">&#x27;Train History&#x27;</span>)</span><br><span class="line">    plt.ylabel(train)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">    plt.legend([<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;validation&#x27;</span>],loc = <span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="畫出accuracy執行結果"><a href="#畫出accuracy執行結果" class="headerlink" title="畫出accuracy執行結果"></a>畫出accuracy執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;acc&#x27;</span>,<span class="string">&#x27;val_acc&#x27;</span>)</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/train_acc.png"><br>上圖的，橘色為預測，藍色為訓練<br>由上圖可看出:</li><li>訓練與驗證時的準確度會隨著訓練次數變多而增加</li><li>訓練到了後期，<strong>訓練時的準確率</strong> 比 <strong>驗證時的準確率 高</strong></li></ol><p>為什麼會<strong>訓練時的準確率</strong> 比 <strong>驗證時的準確率 高</strong>呢? 這種現象被稱之為<strong>過度擬合Overfitting</strong><br><img src= "/img/loading.gif" data-lazy-src="https://ithelp.ithome.com.tw/upload/images/20181020/20112540PwCCbhGvkb.png"><br>簡單而言，就是<strong>訓練時的準確率太高</strong>經過太多次的訓練後，區分的線會漸漸的變形，變得太過扭曲，進而讓測資變得不準</p><h2 id="畫出loss誤差執行結果"><a href="#畫出loss誤差執行結果" class="headerlink" title="畫出loss誤差執行結果"></a>畫出loss誤差執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;loss&#x27;</span>,<span class="string">&#x27;val_loss&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/train_loss.png"><br>上圖的，橘色為預測，藍色為訓練<br>由上圖可看出:</p><ol><li>訓練與驗證時的準確度會隨著訓練次數變多而減少</li><li>訓練到了後期，<strong>訓練時的偏差</strong> 比 <strong>驗證時的偏差 低</strong><br>一樣有Overfitting的問題產生<h1 id="評估模型準確率"><a href="#評估模型準確率" class="headerlink" title="評估模型準確率"></a>評估模型準確率</h1>使用test測試資料，評估模型準確度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = model.evaluate(x_Test_normalize, y_Test_OneHot)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">&#x27;accuracy=&#x27;</span>,score[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ol><h1 id="進行預測"><a href="#進行預測" class="headerlink" title="進行預測"></a>進行預測</h1><h2 id="執行預測"><a href="#執行預測" class="headerlink" title="執行預測"></a>執行預測</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = model.predict_classes(x_test)</span><br></pre></td></tr></table></figure><h2 id="預測結果"><a href="#預測結果" class="headerlink" title="預測結果"></a>預測結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction</span><br></pre></td></tr></table></figure><h1 id="顯示混淆矩陣"><a href="#顯示混淆矩陣" class="headerlink" title="顯示混淆矩陣"></a>顯示混淆矩陣</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.crosstab(y_test_label,prediction,rownames=[<span class="string">&#x27;label&#x27;</span>],colnames=[<span class="string">&#x27;predict&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/confusion.png"><br>上排為預測出來的結果，左邊為真實的值，而對角線的數字代表預測正確的數量</p><h1 id="增加隱藏層的神經元"><a href="#增加隱藏層的神經元" class="headerlink" title="增加隱藏層的神經元"></a>增加隱藏層的神經元</h1><h2 id="增加神經元"><a href="#增加神經元" class="headerlink" title="增加神經元"></a>增加神經元</h2><p>我們將原本256個神經元(units)調整為1000個神經元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(units = <span class="number">1000</span>,input_dim  =<span class="number">784</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="查看模型"><a href="#查看模型" class="headerlink" title="查看模型"></a>查看模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/summary_2.png"></p><h2 id="開始訓練-1"><a href="#開始訓練-1" class="headerlink" title="開始訓練"></a>開始訓練</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_history =model.fit(x=x_train_normalize,y = y_train_onehot,validation_split=<span class="number">0.2</span>,epochs=<span class="number">10</span>,batch_size=<span class="number">200</span>,verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/epoch_2.png"></p><h2 id="畫出accuracy執行結果-1"><a href="#畫出accuracy執行結果-1" class="headerlink" title="畫出accuracy執行結果"></a>畫出accuracy執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;acc&#x27;</span>,<span class="string">&#x27;val_acc&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/train_acc_2.png"></p><p>上圖的，橘色為預測，藍色為訓練<br>由上圖可看出:</p><ol><li>訓練與驗證時的準確度會隨著訓練次數變多而增加</li><li>訓練到了後期，<strong>訓練時的準確率</strong> 比 <strong>驗證時的準確率 高</strong></li><li><strong>Overfitting問題</strong>比原本的<strong>更加嚴重</strong></li></ol><h1 id="解決Overfitting問題"><a href="#解決Overfitting問題" class="headerlink" title="解決Overfitting問題"></a>解決Overfitting問題</h1><p>為了解決Overfitting問題，會加入Dropout指令，意思是指每次做訓練時，會隨機拋棄部分神經元，以解決過度與數據擬合。</p><h2 id="在隱藏層中加入DropOut功能"><a href="#在隱藏層中加入DropOut功能" class="headerlink" title="在隱藏層中加入DropOut功能"></a>在隱藏層中加入DropOut功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line">+ <span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dropout</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment">#輸入層+隱藏層</span></span><br><span class="line">model.add(Dense(units = <span class="number">1000</span>,input_dim  =<span class="number">784</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">+ model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line"><span class="comment">#輸出層</span></span><br><span class="line">model.add(Dense(units = <span class="number">10</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="查看模型-1"><a href="#查看模型-1" class="headerlink" title="查看模型"></a>查看模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/summary_3.png"></p><h2 id="開始訓練-2"><a href="#開始訓練-2" class="headerlink" title="開始訓練"></a>開始訓練</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_history =model.fit(x=x_train_normalize,y = y_train_onehot,validation_split=<span class="number">0.2</span>,epochs=<span class="number">10</span>,batch_size=<span class="number">200</span>,verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/epoch_3.png"><br>在最後一次的數據中可以看出差距有變得更小了</p><h2 id="畫出accuracy執行結果-2"><a href="#畫出accuracy執行結果-2" class="headerlink" title="畫出accuracy執行結果"></a>畫出accuracy執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;acc&#x27;</span>,<span class="string">&#x27;val_acc&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/train_acc_3.png"></p><p>上圖的，橘色為預測，藍色為訓練<br>由上圖可看出:</p><ol><li>訓練與驗證時的準確度會隨著訓練次數變多而增加</li><li>訓練到了後期，<strong>訓練時的準確率</strong> 比 <strong>驗證時的準確率 高</strong></li><li>Overfitting的問題已經有減輕了些</li></ol><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>加入DropOut功能可以有效降低數據的過度擬合，甚至可以增加預測的成功率</p><h1 id="再加入一層隱藏層"><a href="#再加入一層隱藏層" class="headerlink" title="再加入一層隱藏層"></a>再加入一層隱藏層</h1><p>為了近一步的增加準確率，可以再增加一層的隱藏層</p><h2 id="建立隱藏層"><a href="#建立隱藏層" class="headerlink" title="建立隱藏層"></a>建立隱藏層</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line"><span class="comment">#輸入層+第一層隱藏層</span></span><br><span class="line">model.add(Dense(units = <span class="number">1000</span>,input_dim  =<span class="number">784</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line"><span class="comment">#第二層隱藏層</span></span><br><span class="line">+ model.add(Dense(units = <span class="number">1000</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">+ model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line"><span class="comment">#輸出層</span></span><br><span class="line">model.add(Dense(units = <span class="number">10</span>,kernel_initializer = <span class="string">&#x27;normal&#x27;</span>,activation = <span class="string">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="查看模型-2"><a href="#查看模型-2" class="headerlink" title="查看模型"></a>查看模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/summary_4.png"></p><h2 id="畫出accuracy執行結果-3"><a href="#畫出accuracy執行結果-3" class="headerlink" title="畫出accuracy執行結果"></a>畫出accuracy執行結果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_train_history(train_history,<span class="string">&#x27;acc&#x27;</span>,<span class="string">&#x27;val_acc&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/train_acc_4.png"></p><p>上圖的，橘色為預測，藍色為訓練<br>由上圖可看出:</p><ol><li>訓練與驗證時的準確度會隨著訓練次數變多而增加</li><li>訓練到了後期，<strong>訓練時的準確率</strong> 比 <strong>驗證時的準確率 高</strong></li><li>Overfitting的問題已經有減輕很多了，大致上已經解決了</li></ol><h2 id="小結-1"><a href="#小結-1" class="headerlink" title="小結"></a>小結</h2><p>再增加了一層的隱藏層對於預測準確率而言，已經沒有什麼明顯的提升了</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 實作AI </tag>
            
            <tag> python </tag>
            
            <tag> 手寫辨識 </tag>
            
            <tag> keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow與Keras介紹</title>
      <link href="/2020/03/24/AI-3/"/>
      <url>/2020/03/24/AI-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Tensorflow架構圖"><a href="#Tensorflow架構圖" class="headerlink" title="Tensorflow架構圖"></a>Tensorflow架構圖</h1><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/image045.jpg?raw=true"></p><h2 id="處理器"><a href="#處理器" class="headerlink" title="處理器"></a>處理器</h2><ul><li>CPU: 每一台電腦一定有中央處理器(CPU)，可以執行TensorFlow</li><li>GPU: 圖形處理器(顯卡)，GPU可以達到數千個小型且高效率的核心，可以發揮平行運算的強大功能</li><li>TPU: TPU是 google 為人工智慧所研發的專屬晶片，比GPU有更佳的執行性能<h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2></li><li>Windows: 個人電腦最常用的作業系統</li><li>Linux: TensorFlow可以在各種版本的Linux系統上使用</li><li>iOS: TensorFlow可以在iOS行動裝置或Mac OS上執行</li><li>Android: 在Android上運行TensorFlow，讓深度學習進入行動端，Android裝置的執行效能也開始提升，更適合TensorFlow的運行</li><li>Raspbarry Pi: 樹莓派可以開發物聯網或機器人，提供人工智慧的功能</li><li>雲端執行: 可以透過雲端的大量的伺服器，加速學習模型的訓練<h2 id="Tensorflow-Distributed-Execution-Engine"><a href="#Tensorflow-Distributed-Execution-Engine" class="headerlink" title="Tensorflow Distributed Execution Engine"></a>Tensorflow Distributed Execution Engine</h2>在深度學習中，最花時間的是模型上的訓練，尤其是大資料的訓練，TensorFlow具備分散式運算能力，可同時在數百台的機器上執行訓練模型，大幅減少訓練時間<h2 id="前端程式語言"><a href="#前端程式語言" class="headerlink" title="前端程式語言"></a>前端程式語言</h2>TensorFlow可由多種前端語言編寫，例如: Python、C++，但Python的支援最佳，又具備簡明、易學習、高生產力，物件導向、函數式的動態語言，應用非常廣泛。<h2 id="高階API"><a href="#高階API" class="headerlink" title="高階API"></a>高階API</h2>TensorFlow本身是較低階的API，所以設計模型時，需要自行設計，如: 張量乘積、卷積等底層操作，好處是可以自訂義自己想要的各種模型，缺點是需要大量時間開發。<br>開發社群以TensorFlow為基底，開發出了Keras、TF-Learn、TF-Slim等等。讓開發者使用起來更加的舒適、簡潔。<h1 id="TensorFlow簡介"><a href="#TensorFlow簡介" class="headerlink" title="TensorFlow簡介"></a>TensorFlow簡介</h1><h2 id="Tensor-張量"><a href="#Tensor-張量" class="headerlink" title="Tensor 張量"></a>Tensor 張量</h2>張量，是一種幾何實體，或是廣義上的<strong>數量</strong>，包含 <strong>純量、向量或矩陣</strong></li><li>*0維<strong>的張量為</strong>純量<strong>，</strong>1維<strong>的張量為</strong>向量<strong>，</strong>2維以上<strong>的為</strong>矩陣**<h2 id="Flow-資料流程"><a href="#Flow-資料流程" class="headerlink" title="Flow 資料流程"></a>Flow 資料流程</h2>為了讓不同的程式語言共通使用，所有的TensorFlow都要先建立起 <strong>計算圖</strong> ，這是<strong>張量運算</strong>及<strong>資料處理流程</strong>。<br><img src= "/img/loading.gif" data-lazy-src="https://www.tensorflow.org/images/tensors_flowing.gif"></li></ul><p>以上的計算圖中: 節點代表運算，而邊代表Tensor的資料流動，經過節點的運算後，轉換為<br>不同的資料。</p><h1 id="TensorFlow程式設計模式"><a href="#TensorFlow程式設計模式" class="headerlink" title="TensorFlow程式設計模式"></a>TensorFlow程式設計模式</h1><p>TensorFlow的核心是 <strong>計算圖</strong>，可以分成 建立 與 執行</p><h2 id="建立計算圖"><a href="#建立計算圖" class="headerlink" title="建立計算圖"></a>建立計算圖</h2><p>透過<strong>TensorFlow提供的模組</strong>，設計張量的運算流程，並建構起各種深度學習所需的模型</p><h2 id="執行計算圖"><a href="#執行計算圖" class="headerlink" title="執行計算圖"></a>執行計算圖</h2><p>建立好計算圖後，我們可以建立起<strong>Session</strong>執行計算圖。Session的作用是在用戶端及執行裝置間做連結。這個連結可以將計算圖在不同裝置中執行，後續的資料傳遞，都必須Session取得執行結果。</p><h1 id="keras介紹"><a href="#keras介紹" class="headerlink" title="keras介紹"></a>keras介紹</h1><h2 id="優點及特色"><a href="#優點及特色" class="headerlink" title="優點及特色"></a>優點及特色</h2><ol><li>Keras可以用最少的程式碼，就建立起深度學習的模型、訓練以及預測。</li><li>已內建各式樣的神經網路，例如: CNN、RNN</li><li>透過的後端引擎可在CPU、GPU上使用</li><li>淺顯易懂、可讀性、可維護性高，更具生產力<h2 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h2>Keras是一個model-level的深度學習程式庫，因此只處理模型的建立、訓練及預測。<br>Keras必須配合使用<strong>後端引擎</strong>進行<strong>運算</strong>，目前提供兩種後端引擎做使用: TensorFlow、Theano。<h1 id="Keras程式設計模式"><a href="#Keras程式設計模式" class="headerlink" title="Keras程式設計模式"></a>Keras程式設計模式</h1>模型就像是疊蛋糕一樣，可依據想要的內容，自訂義各層不同的神經元<br>流程如下: </li><li>建立線性堆疊</li><li>加入輸入層、隱藏層</li><li>加入輸出層</li><li>訓練、預測<br>十分的簡單輕鬆</li></ol><h1 id="TensorFlow與Keras比較"><a href="#TensorFlow與Keras比較" class="headerlink" title="TensorFlow與Keras比較"></a>TensorFlow與Keras比較</h1><table><thead><tr><th align="center"></th><th align="center">Keras</th><th align="center">TensorFlow</th></tr></thead><tbody><tr><td align="center">學習難易度</td><td align="center">簡單</td><td align="center">較困難</td></tr><tr><td align="center">使用彈性</td><td align="center">中等</td><td align="center">高</td></tr><tr><td align="center">開發生產力</td><td align="center">高</td><td align="center">中等</td></tr><tr><td align="center">執行效能</td><td align="center">高</td><td align="center">高</td></tr><tr><td align="center">適合使用者</td><td align="center">初學者</td><td align="center">進階使用者</td></tr><tr><td align="center">張量(矩陣)運算</td><td align="center">不必自行設計</td><td align="center">需自行設計</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 淺談AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度學習的原理</title>
      <link href="/2020/03/21/AI-2/"/>
      <url>/2020/03/21/AI-2/</url>
      
        <content type="html"><![CDATA[<h1 id="神經傳導原理"><a href="#神經傳導原理" class="headerlink" title="神經傳導原理"></a>神經傳導原理</h1><h2 id="數學公式模擬"><a href="#數學公式模擬" class="headerlink" title="數學公式模擬"></a>數學公式模擬</h2><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/mathdeep.jpg" alt="數學模擬"></p><p>$y = activation function(x_1<em>w_1+x_2</em>w_2+…+x_m*w_m +b)$<br>|               項目                  |                                                                            說明                                                                               |<br>|:——————————-:    |:———————————————————————————————————————————————————:    |<br>|              輸入X                  |                                                              X模擬輸入神經元，接收外部的資料                                                                  |<br>|              輸出Y                  |                                                                      Y模擬輸出神經元                                                                          |<br>|        權重W<br>(weight)            |                                                    權重W模擬軸突，連接輸入與輸出神經元，負責傳送訊息。                                                        |<br>|        偏差值b<br>(bias)            |                              偏差值b模擬突觸的結構，代表輸出神經元容易被活化的程度，<br>偏差值越高，越容易被活化並傳遞訊息。                                  |<br>| 激活函式<br>activation function     | 激活函數模擬神經傳導的運作方式，當輸出神經元接受刺激的總和<br>經過激活函式的運算大於臨界值時，會傳遞至下一個神經元。<br>常見的激活函數有: sigmoid 和 relu     |</p><h2 id="激活函數-activation-function"><a href="#激活函數-activation-function" class="headerlink" title="激活函數(activation function)"></a>激活函數(activation function)</h2><p>激活函數模擬神經傳導的運作方式，將上層的資料傳給下一層。激活函數通常為非線性函數。</p><h3 id="sigmoid激活函數"><a href="#sigmoid激活函數" class="headerlink" title="sigmoid激活函數"></a>sigmoid激活函數</h3><p>$f(x) = \tfrac{1}{1+e^{-x}}$</p><p>該函數的特性：當x趨近於負無窮時，y趨近於0；當趨近於正無窮時，y趨近於1；當x= 0時，y=0.5</p><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/20180719131152449.png" alt="sigmoid"></p><p>優點：</p><ol><li>Sigmoid函數的输出<strong>映射在(0,1)之間</strong>，單調連續，输出範圍有限，優化穩定，可以用作輸出層。</li><li>求導容易。</li></ol><p>缺點：</p><ol><li>由于其軟飽和性，容易產生梯度消失，導致訓練出時出現問題。</li><li>其輸出並不是以0為中心的。<h3 id="softmax激活函數"><a href="#softmax激活函數" class="headerlink" title="softmax激活函數"></a>softmax激活函數</h3>簡單的說，<strong>softmax 就是 sigmoid的延伸</strong><br>在二分類問題中，sigmoid 和 softmax 是一樣的，求的都是 cross entropy loss，而 softmax 可額外做延伸用在多分類問題上</li></ol><h3 id="relu激活函數"><a href="#relu激活函數" class="headerlink" title="relu激活函數"></a>relu激活函數</h3><p>$f(x) = max( 0 , x )$</p><p><img src= "/img/loading.gif" data-lazy-src="https://ml4a.github.io/images/figures/relu.png" alt="relu"><br>該函數特性: 當接受刺激的總和小於臨界值會忽略；當大於時，開始接受刺激<br>優點 :</p><ol><li>計算速度非常快，只需判斷是否大於0</li><li>收斂速度遠快於sigmoid</li><li>能有效克服梯度消失問題</li></ol><p>缺點 :</p><ol><li>訓練時很脆弱，一不小心就死了</li><li>如果learning rate很大，很可能會有40%的神經元死亡QQ<h1 id="矩陣模擬神經網路"><a href="#矩陣模擬神經網路" class="headerlink" title="矩陣模擬神經網路"></a>矩陣模擬神經網路</h1></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/%E9%81%8B%E7%AE%97.png"></p><p><strong>輸出與接收神經元的運作公式:</strong><br>$y_1 = activation function(x_1<em>w_{11}+x_2</em>w_{21}+x_3<em>w_{31}+b_1)$<br><br>$y_2 = activation function(x_1</em>w_{12}+x_2<em>w_{22}+x_3</em>w_{32}+b_2)$<br></p><p><strong>整合公式:</strong><br>$\begin{bmatrix}<br>y_1&amp;y_2<br>\end{bmatrix}$ = $activation( \begin{bmatrix}<br>x_1 &amp; x_2 &amp; x_3<br>\end{bmatrix} * \begin{bmatrix}<br>w_{11} &amp; w_{12} \<br>w_{21} &amp; w_{22} \<br>w_{31} &amp; w_{32}<br>\end{bmatrix}+\begin{bmatrix}<br>b_1&amp;b_2<br>\end{bmatrix})$<br></p><p><strong>另一種形式的矩陣公式:</strong><br>$Y = activation(X × W + b)$<br><strong>中文表示矩陣公式:</strong><br>輸出 = 激活函數(輸入 × 權重 + 偏差)</p><table><thead><tr><th align="center">項目</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">輸入X</td><td align="center">X模擬輸入神經元，接收外部的資料，如上圖共有3個輸入神經元x1,x2,x3</td></tr><tr><td align="center">接收Y</td><td align="center">Y模擬輸出神經元，如上圖共有2個接收神經元 y1,y2</td></tr><tr><td align="center">權重W<br>(weight)</td><td align="center">權重W模擬軸突，連接輸入與接收神經元，負責傳送訊息。<br>因為要完全連結，所以需要3輸入*2輸出=6個軸突。<br>w11,w21,w31要傳給y1<br>w12,w22,w32要傳給y2</td></tr><tr><td align="center">偏差值b<br>(bias)</td><td align="center">偏差值b模擬突觸的結構，代表輸出神經元容易被活化的程度，<br>偏差值越高，越容易被活化並傳遞訊息。<br>因為接收神經元有兩個，所以偏差值也需要2個b1,b2。</td></tr><tr><td align="center">激活函式<br>activation function</td><td align="center">激活函數模擬神經傳導的運作方式，當輸出神經元接受刺激的總和(x1×w11+x2×w21+x3×w31)<br>大於臨界值時，會傳遞至下一個神經元。</td></tr></tbody></table><h1 id="多層感知器模型-MLP"><a href="#多層感知器模型-MLP" class="headerlink" title="多層感知器模型(MLP)"></a>多層感知器模型(MLP)</h1><p>在1980年代，MLP是一種十分受歡迎的機械學習解決方式。<br>但在1990年代受到更簡單的模型SVM的競爭。到了近代，因為深度學習又重新獲得重視。<br><img src= "/img/loading.gif" data-lazy-src="https://4.bp.blogspot.com/-S_S7GDekwqQ/Wpk0PS18KbI/AAAAAAAAJpE/pkQqFCocTmg9RNqml9FqQhudirBQfR3rQCLcBGAs/s1600/keras_mnist_MLP_structure.jpg"></p><h2 id="建立輸入層與隱藏層的公式"><a href="#建立輸入層與隱藏層的公式" class="headerlink" title="建立輸入層與隱藏層的公式:"></a>建立輸入層與隱藏層的公式:</h2><p>$h1=relu(X × W1 + b1)$<br>|   項目   |                                                                                        說明                                                                                       |<br>|:——–:|:———————————————————————————————————————————————————————————:|<br>|  輸入層X |                                                               X模擬輸入神經元，接收外界傳送訊息，如上圖有784個神經元                                                              |<br>| 隱藏層h1 |                                                                    隱藏層h1模擬內部神經元，共有256個隱藏神經元                                                                    |<br>|  權重W1  | 權重模擬神經元的軸突，連結輸入及接收神經元，負責傳送訊息<br>為了讓二層的每一個神經元互相連結，總共需要784×256=200704個軸突<br>所以權重必須是784×256的矩陣，用來模擬這些軸突的功能 |<br>| 偏差值b1 |                                      偏差值模擬突觸的結構，代表接收神經元容易活化程度<br>因為隱藏層共有256個神經元，所以偏差值是長度256的向量                                     |<br>| 激活函數 |                      激活函數模擬神經網路的傳導方式，在此處使用relu函數，接收刺激的總和<br>(X×W1+b1)，經過激活函數運算，當刺激大於臨界值就會傳給下一個神經元                      |</p><h2 id="建立隱藏層與輸出層公式"><a href="#建立隱藏層與輸出層公式" class="headerlink" title="建立隱藏層與輸出層公式:"></a>建立隱藏層與輸出層公式:</h2><p>$y=softmax(h1 × W2 + b2)$<br>|   項目   |                                                                                      說明                                                                                     |<br>|:——–:|:—————————————————————————————————————————————————————————–:|<br>| 隱藏層h1 |                                                                  隱藏層h1模擬內部神經元，共有256個隱藏神經元                                                                  |<br>|  輸出層y |                                             模擬輸出神經元，就是輸出預測的結果，共有10個輸出神經元<br>就是對應到，從0到9的十個數字                                            |<br>|  權重W2  | 權重模擬神經元的軸突，連結輸入及接收神經元，負責傳送訊息<br>為了讓二層的每一個神經元互相連結，總共需要256×10=2560個軸突<br>所以權重必須是256×10的矩陣，用來模擬這些軸突的功能 |<br>| 偏差值b2 |                                     偏差值模擬突觸的結構，代表接收神經元容易活化程度<br>因為隱藏層共有10個神經元，所以偏差值是長度10的向量                                    |<br>| 激活函數 |           激活函數模擬神經網路的傳導方式，在此處使用softmax函數，<br>接收刺激的總和(h1×W2+b2)運算後輸出，是一個機率分布，共有10個輸出<br>輸出的數值越高，代表機率越高          |</p><h1 id="反向傳播演算法-Back-Propagation"><a href="#反向傳播演算法-Back-Propagation" class="headerlink" title="反向傳播演算法(Back Propagation)"></a>反向傳播演算法(Back Propagation)</h1><p>Back Propagation簡單來說就是「從錯誤中學習」。</p><p>進行訓練時，資料分為多個批次進行 Back Propagation，重複傳播和更新權重，直到誤差收斂</p><ul><li>傳播<ol><li>模型輸入特徵</li><li>模型輸出計算結果</li></ol></li><li>權重更新<ol><li>損失函數(loss function)計算誤差</li><li>最佳化方式(Optimizer)更新權重及偏差</li></ol></li></ul><h2 id="損失函數-loss-function"><a href="#損失函數-loss-function" class="headerlink" title="損失函數(loss function)"></a>損失函數(loss function)</h2><p>Back Propagation 簡單的說就是「反覆從錯誤中學習」，而損失函數是<strong>幫你計算誤差</strong><br><img src= "/img/loading.gif" data-lazy-src="https://zrn-coding.github.io/img/cross.png"><br>假設輸入的數字為8</p><ul><li>labels : 由0算起第9個數字是1，其餘皆為0</li><li>模型輸出 : 預測結果為0的機率為0.3，預測為1的機率為0.2。預測為8的機率是0.9，代表預測結果為數字8為90%的機率，其他的皆不高。</li></ul><h2 id="最佳化方法-Optimizer"><a href="#最佳化方法-Optimizer" class="headerlink" title="最佳化方法(Optimizer)"></a>最佳化方法(Optimizer)</h2><p>在神經網路中，不論是哪種網路，最後都是在找層和層之間的關係(參數，也就是層和層之間的權重)，而找參數的過程就稱為學習，所以神經網路的目的就是不斷的更新參數，去<strong>最小化損失函數的值</strong>，然後<strong>找到最佳解</strong>。</p><h2 id="SGD隨機梯度下降法"><a href="#SGD隨機梯度下降法" class="headerlink" title="SGD隨機梯度下降法"></a>SGD隨機梯度下降法</h2><p>假如我們要優化一個函數，即找到它的最小值，常用的方法叫做 Gradient Descent (GD)，也就是最速下降法。說起來很簡單, 就是每次沿著當前位置的導數方向走一小步，走啊走啊就能夠走到一個好地方了，而我們使用的是SGD，就像是喝醉酒一樣，雖然也會抵達目的地，走的路卻會是彎彎曲曲。</p><div class="note info">            <h2 id="深度的運算部分"><a href="#深度的運算部分" class="headerlink" title="深度的運算部分"></a>深度的運算部分</h2><p>正在努力撰寫中</p>          </div><h2 id="其他Optimizer-補充"><a href="#其他Optimizer-補充" class="headerlink" title="其他Optimizer 補充"></a>其他Optimizer 補充</h2><table><thead><tr><th align="center">Optimizer</th><th align="center">特色</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">SGD</td><td align="center">有機會跳出目前局部收斂 進而轉入另一個局部收斂得到最小值<br>需自行設定學習率，較難選擇到適合的學習率<br>會造成嚴重的震盪 ， 需要較長時間收斂至最小值</td><td align="center"><br>單純的往梯度下降方向走(酒醉)，且速度超慢</td></tr><tr><td align="center">Momentum</td><td align="center">能夠在相關方向加速SGD，抑制SGD的嚴重震盪，進而加快收斂<br>需自行設定學習率，有可能會使參數的方向偏移，進而導致收斂的沒那麼快</td><td align="center">就像是一顆球從山上滾下來，<br>在下坡的時候，速度越來越快，遇到上坡，速度下降</td></tr><tr><td align="center">AdaGrad</td><td align="center">能夠自動調整學習率，進而調整收斂<br>適合處理稀疏梯度<br>依然需要人工設置一個全局的學習率<br>後期，會使梯度趨近於0，使得訓練結束</td><td align="center"><br>在往梯度下降方向前進的同時會自適應並調整速度</td></tr><tr><td align="center">Adam</td><td align="center">結合了AdaGrad與Momentum的優點</td><td align="center">適用於大數據和高維度空間的資料<br>目前最常使用的Optimizer</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 淺談AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL(廢棄，因為寫太爛)</title>
      <link href="/2020/03/20/STL/"/>
      <url>/2020/03/20/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="常用容器-container"><a href="#常用容器-container" class="headerlink" title="常用容器 container"></a>常用容器 container</h1><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>簡單的講就是<strong>動態的陣列</strong>，大小可以是0到無限大</p><ol><li>標頭檔：&lt;vector&gt;</li><li>v[i]：v 的第 i 項</li><li>v.size()：回傳 v 目前的長度</li><li>v.push_back(T a)：在 v 的結尾加一個 a</li><li>v.pop_back()：刪除 v 的最末項，若 v 為空，會發生無法預期的結果</li><li>v.empty()：回傳一個 bool，表示 v 是否為空的</li><li>v.clear()：清空 v，但原本的空間不會被釋放掉。<h3 id="範例1"><a href="#範例1" class="headerlink" title="範例1"></a>範例1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v.push_back(<span class="number">10</span>);  <span class="comment">//[10]</span></span><br><span class="line">    v.push_back(<span class="number">20</span>);  <span class="comment">//[10 , 20]</span></span><br><span class="line">    v.push_back(<span class="number">30</span>);  <span class="comment">//[10 , 20 , 30]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = v.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length;i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//10 20 30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="範例2"><a href="#範例2" class="headerlink" title="範例2"></a>範例2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v.push_back(<span class="number">10</span>);  <span class="comment">//[10]</span></span><br><span class="line">    v.push_back(<span class="number">20</span>);  <span class="comment">//[10 , 20]</span></span><br><span class="line">    v.pop_back();     <span class="comment">//[10]</span></span><br><span class="line">    v.push_back(<span class="number">30</span>);  <span class="comment">//[10 , 30]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = v.size();  <span class="comment">// = 2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length;i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//10 20 30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><strong>另外，vector也可以像是array一樣，(預)開設一個固定的大小，用v()來控制</strong></p><h3 id="範例3"><a href="#範例3" class="headerlink" title="範例3"></a>範例3</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v(<span class="number">5</span>);  <span class="comment">// int v[5]=&#123; &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = v.size();  <span class="comment">// length = 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        v[i] = i * <span class="number">10</span>;   <span class="comment">// [ 0 , 10 , 20 , 30 , 40 ]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">// 0 10 20 30 40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><ol><li>位於 &lt;deque&gt; 標頭檔。</li><li>可視為可以在最前面加東西刪東西的 vector。</li><li>d.pop_front(): 刪掉最前面的東西</li><li>d.push_front(a): 在最前面加東西</li><li>d.pop_back(): 刪掉最後面的東西</li><li>d.push_back(a): 在最後面加東西</li><li>時間和空間複雜度很爛，沒事不要用 deque。<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2></li></ol><p><strong>Stack就像是疊盤子，最先放置的會壓在最下面，最先放的會先拿出，有First in,Last out的特性</strong></p><ol><li>標頭檔：&lt;stack&gt;</li><li>st.push(): 疊上一個盤子</li><li>st.pop(): 把最上方的盤子移除掉</li><li>st.top(): 取得最上面的值</li><li>st.size(): 目前的盤子數</li><li>st.empty(): 當沒有值的時候會true<h2 id="範例1-1"><a href="#範例1-1" class="headerlink" title="範例1"></a>範例1</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    st.push(<span class="number">10</span>);  <span class="comment">//| 30 |</span></span><br><span class="line">    st.push(<span class="number">20</span>);  <span class="comment">//| 20 |</span></span><br><span class="line">    st.push(<span class="number">30</span>);  <span class="comment">//|_10_|</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;st.top()&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">// 30 20 10</span></span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p><strong>Queue就像是排隊買東西，從尾巴進，前頭出來，有First in,First out的特性</strong></p><ol><li>標頭檔：&lt;queue&gt;</li><li>q.push(): 把一個值加到尾巴</li><li>q.pop(): 把第一個值移除掉</li><li>q.back(): 得到尾巴的值</li><li>q.front(): 得到頭的值</li><li>q.empty(): 當queue沒有值的時候會true</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        q.push(i*<span class="number">10</span>);  <span class="comment">//[0 , 10 , 20 , 30 , 40]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;q.front()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p><strong>priority_queue，就是queue的變種</strong>，內建了函式實現 binary heap 結構，<strong>可以維持最頂的元素永遠是最大(最小)的</strong></p><ol><li>標頭檔: &lt;queue&gt;</li><li>pq.push(a): 將a加入pq內部</li><li>pq.pop(): 將 pq 中最大 (最小) 的元素移除</li><li>pq.top(): 回傳 pq 中最大 (最小) 的元素</li><li>pq.empty(): 判斷還有沒有值在裡面</li></ol><h3 id="範例1-2"><a href="#範例1-2" class="headerlink" title="範例1"></a>範例1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">priority_queue</span> &lt;<span class="keyword">int</span>&gt; pq; <span class="comment">//由大到小排列(最大優先)</span></span><br><span class="line"><span class="comment">// priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt;pq;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pq.push(<span class="number">30</span>); <span class="comment">//[30]</span></span><br><span class="line">    pq.push(<span class="number">50</span>); <span class="comment">//[50 , 30]</span></span><br><span class="line">    pq.push(<span class="number">20</span>); <span class="comment">//[50 , 30 , 20]</span></span><br><span class="line">    pq.push(<span class="number">80</span>); <span class="comment">//[80 , 50 , 30 , 20]</span></span><br><span class="line">    pq.pop();    <span class="comment">//[50 , 30 , 20]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pq.top()&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">// 50 30 20</span></span><br><span class="line">        pq.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="範例2-1"><a href="#範例2-1" class="headerlink" title="範例2"></a>範例2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;pq;<span class="comment">//由小到大排列(最小優先)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pq.push(<span class="number">30</span>); <span class="comment">//[30]</span></span><br><span class="line">    pq.push(<span class="number">50</span>); <span class="comment">//[30 , 50]</span></span><br><span class="line">    pq.push(<span class="number">20</span>); <span class="comment">//[20 , 30 , 50]</span></span><br><span class="line">    pq.push(<span class="number">80</span>); <span class="comment">//[20 , 30 , 50 , 80]</span></span><br><span class="line">    pq.pop();    <span class="comment">//[30 , 50 , 80]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pq.top()&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">// 30 50 80</span></span><br><span class="line">        pq.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><strong>Map 就像是一個對應表，也就像是Python的字典</strong></p><ol><li>標頭檔：&lt;map&gt;</li><li>mp[]: 得到對應的值</li><li>mp.count(): 檢查某個值是否有對應值<h3 id="範例1-3"><a href="#範例1-3" class="headerlink" title="範例1"></a>範例1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mp;  <span class="comment">// string -&gt; int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mp[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mp.count(<span class="string">&quot;one&quot;</span>)&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//--&gt; 1(有對應)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mp.count(<span class="string">&quot;two&quot;</span>)&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//--&gt; 1(有對應)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mp.count(<span class="string">&quot;ten&quot;</span>)&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">// --&gt; 0(無對應)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="範例2-2"><a href="#範例2-2" class="headerlink" title="範例2"></a>範例2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mp;  <span class="comment">// string -&gt; int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mp[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">    mp[<span class="string">&quot;three&quot;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mp[<span class="string">&quot;two&quot;</span>]&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">// --&gt;2</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mp[<span class="string">&quot;ten&quot;</span>]&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">// --&gt;0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2></li></ol><p><strong>顧名思義，就只是個集合</strong></p><ol><li>標頭檔：&lt;set&gt;</li><li>s.insert(): 把一個數字放進集合</li><li>s.erase(): 把某個數字從集合中移除</li><li>s.count(): 檢查某個數是否有在集合中</li></ol><h3 id="範例1-4"><a href="#範例1-4" class="headerlink" title="範例1"></a>範例1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s.insert(<span class="number">20</span>);   <span class="comment">// s = &#123;20&#125;</span></span><br><span class="line">    s.insert(<span class="number">10</span>);   <span class="comment">// s = &#123;10, 20&#125;</span></span><br><span class="line">    s.insert(<span class="number">30</span>);   <span class="comment">// s = &#123;10, 20, 30&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.count(<span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">// 存在 -&gt; 1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.count(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 不存在 -&gt; 0</span></span><br><span class="line"></span><br><span class="line">    s.erase(<span class="number">20</span>);     <span class="comment">// s = &#123;10, 30&#125;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.count(<span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="multiset-multimap"><a href="#multiset-multimap" class="headerlink" title="multiset,multimap"></a>multiset,multimap</h2><p>在 &lt;set&gt;,&lt;map&gt; 中分別有 multiset 和 multimap，與前面的差不多，唯一的差別在於 multiset和 multimap 中鍵值<strong>可以重複出現</strong>。</p><h1 id="疊代器-iterator"><a href="#疊代器-iterator" class="headerlink" title="疊代器 iterator"></a>疊代器 iterator</h1><p>叠代器提供對一個容器中的對象的訪問方法。<strong>叠代器就如同一個指針</strong>，叠代器是一種檢查容器內元素並遍歷元素的數據類型。<br>　　標準庫為每一種標準容器（包括 vector）定義了一種叠代器類型。</p><h2 id="iterator-類型"><a href="#iterator-類型" class="headerlink" title="iterator 類型"></a>iterator 類型</h2><p>每個標準庫容器類型都定義了一個名為 iterator 的成員,用來定義自己的叠代器。如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br></pre></td></tr></table></figure><h2 id="begin-和-end-操作"><a href="#begin-和-end-操作" class="headerlink" title="begin 和 end 操作"></a>begin 和 end 操作</h2><p>每種容器都定義了一對命名為 begin 和 end 的函數，用於返回叠代器。如果容器中有元素的話，由 begin 返回的叠代器指向第一個元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = v.begin();</span><br></pre></td></tr></table></figure><p>把 iter 初始化為由名為 vector 操作返回的值。假設 vector 不空，初始化後，iter 即指該元素為 v[0]。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter2 = v.end()</span><br></pre></td></tr></table></figure><p>由 end 操作返回的叠代器指向 vector 的<strong>末端元素的下一個</strong>,被稱為超出末端叠代器。</p><h2 id="叠代器支持的其他方法"><a href="#叠代器支持的其他方法" class="headerlink" title="叠代器支持的其他方法"></a>叠代器支持的其他方法</h2><p>比較：用 <strong>== 或 !=</strong> 操作符來比較兩個叠代器，如果兩個叠代器對象指向同一個元素，則它們相等，否則就不相等。<br><strong>使用叠代器遍歷容器：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = v.begin()</span><br><span class="line"><span class="keyword">for</span> (; iter != v.end(); ++iter)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*iter&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; v.size();i++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="叠代器的算術操作"><a href="#叠代器的算術操作" class="headerlink" title="叠代器的算術操作"></a>叠代器的算術操作</h2><p>除了一次移動叠代器的一個元素的增量操作符外，vector 叠代器也支持其他的算術操作。包括：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iter + n</span><br><span class="line">iter - n</span><br><span class="line">iter1 - iter2</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator mid = v.begin() + v.size() / <span class="number">2</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 基礎之路 </tag>
            
            <tag> 資料結構 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智慧、機器學習以及深度學習!!?</title>
      <link href="/2020/03/18/AI-1/"/>
      <url>/2020/03/18/AI-1/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智慧"><a href="#人工智慧" class="headerlink" title="人工智慧"></a>人工智慧</h1><h2 id="AI的起源"><a href="#AI的起源" class="headerlink" title="AI的起源??"></a>AI的起源??</h2><p><strong>AI</strong> 這個詞彙首次出現是在<strong>1950 年</strong>，目標能讓電腦像人一樣思考與學習，那時離現代電腦的發明也不過幾年的時間，當時的人工智慧做的不過是跑一些寫好的邏輯程式、處理數學定理證明，應用其實並不廣；此外，由於當時<strong>電腦體積龐大、性能又有諸多限制</strong>，人工智慧發展很快就面臨到瓶頸了。</p><h2 id="AI的發展及突破"><a href="#AI的發展及突破" class="headerlink" title="AI的發展及突破"></a>AI的發展及突破</h2><p>沉寂一陣子後，在約二、三十年前，因為電腦儲存空間、運算性能的突破，AI 重新回歸主流技術發展重點，開始出現 <strong>「機器學習」</strong> 這塊領域，並得到了很好的成果，如發展出「支持向量機（SVM）」模型，能<strong>有效分類處理各種數據</strong>；到了最近幾年，又因為技術與演算法的進步，再度發展出<strong>深度學習</strong>這個領域，AI 的成長儼然已成為不可忽視的巨獸！ </p><p>1980年代翰瑟爾，提出對人工智慧的分類方式 :</p><ul><li><strong>Strong AI</strong> : 機器能具有與人類完全相同完整的認知能力</li><li><strong>Weak AI</strong> : 機器不需要具備完整的認知能力，只要設計得看起來有智慧即可</li></ul><h1 id="機械學習-Machine-Learning"><a href="#機械學習-Machine-Learning" class="headerlink" title="機械學習 (Machine Learning)"></a>機械學習 (Machine Learning)</h1><h2 id="機械學習是什麼"><a href="#機械學習是什麼" class="headerlink" title="機械學習是什麼??"></a>機械學習是什麼??</h2><p>機器學習是AI的分支，為了讓電腦透過自我學習的方式，去解析數據或做出問題判斷，不斷優化改進自身，而非單純寫好程式，僅處理單一特定問題，其中其實包含了許多學問，如統計、機率、演算法等多項領域。</p><p>傳統的機器學習結構：<strong>資料 → 特徵擷取 → 訓練 → 模型 → 預測 → 答案</strong></p><p>為了達到預測的效果，機器學習會不斷讓模型最佳化去擬合資料，然而在特徵擷取上，仍然需要透過<strong>手動去標記特徵</strong>，將特徵轉為<strong>編碼</strong>或<strong>向量形式</strong>後，再透過機器學習的模型去處理，最後得到預測結果。</p><h2 id="不同的訓練分式…"><a href="#不同的訓練分式…" class="headerlink" title="不同的訓練分式…"></a>不同的訓練分式…</h2><ul><li><p><strong>監督式學習</strong></p><ul><li>給予「有標籤」的資料，例如給機器各看1000張有標示貓和狗的照片，讓機器學會判斷照片中是貓還是狗。</li></ul></li><li><p><strong>非監督式學習</strong></p><ul><li>給予「無標籤」的資料，讓機器自行找出資料規律。</li></ul></li><li><p><strong>半監督式學習</strong></p><ul><li>少部分資料有標籤，大部分資料沒有標籤，以資料分群來說先以有標籤的資料切出一條分界線，再利用剩下沒標籤資料的整體分布調整分界線。</li></ul></li><li><p><strong>強化學習</strong></p><ul><li>使用未標記的資料，透過獎勵函數，讓機器知離正確答案越來越近還是遠。</li></ul></li></ul><h2 id="分類的統整一下"><a href="#分類的統整一下" class="headerlink" title="分類的統整一下"></a>分類的統整一下</h2><table><thead><tr><th align="center">分類</th><th align="center">細分類</th><th align="center">Feature<br>(特徵)</th><th align="center">Label<br>(預測目標)</th></tr></thead><tbody><tr><td align="center">監督式學習</td><td align="center">Binary Classification<br>二元分類</td><td align="center">濕度、風向、風速、<br>季節、氣壓…</td><td align="center">選項只有0 和 1( <strong>是非題</strong> )<br>0 : 不會下雨  1 : 會下雨</td></tr><tr><td align="center">監督式學習</td><td align="center">Muti-Class Classification<br>多元分類</td><td align="center">濕度、風向、風速、<br>季節、氣壓…</td><td align="center">有多個選項(<strong>選擇題</strong>)<br>1: 晴天 2: 雨天<br>3: 陰天 4: 下雪</td></tr><tr><td align="center">監督式學習</td><td align="center">Regression<br>回歸分析</td><td align="center">濕度、風向、風速、<br>季節、氣壓…</td><td align="center">值是數值(<strong>計算題</strong>)<br>溫度可能為-50~50間</td></tr><tr><td align="center">非監督式學習</td><td align="center">Clustering<br>群集</td><td align="center">濕度、風向、風速、<br>季節、氣壓…</td><td align="center">無Label。將資料依照特徵<br>分成幾個相異性最大的群組<br>群組內的相似程度高</td></tr><tr><td align="center">強化學習</td><td align="center">Q-Learning 、TD</td><td align="center"></td><td align="center">藉由定義動作、狀態、獎勵<br>不斷的訓練機器慢慢進步<br>常用於機器人控制及動態系統</td></tr></tbody></table><h2 id="機器學習能做什麼"><a href="#機器學習能做什麼" class="headerlink" title="機器學習能做什麼??"></a>機器學習能做什麼??</h2><p>機器學習的運用已相當的廣泛。例如 : 資料探勘、電腦視覺、自然語言處理、生物特徵辨識、搜尋引擎、醫學診斷、檢測信用卡欺詐、證券市場分析、DNA序列測序、語音和手寫辨識、戰略遊戲和機器人等領域。</p><h1 id="深度學習-Deep-Learning"><a href="#深度學習-Deep-Learning" class="headerlink" title="深度學習(Deep Learning)"></a>深度學習(Deep Learning)</h1><h2 id="什麼是深度學習？"><a href="#什麼是深度學習？" class="headerlink" title="什麼是深度學習？"></a>什麼是深度學習？</h2><p><strong>深度學習</strong>是<strong>機器學習</strong>的一個分支，希望把資料透過多個處理層中的線性或非線性轉換，自動抽取出足以代表資料特性的特徵。<br><br>深度學習具有<strong>自動抽取特徵</strong>的能力，也被視為是一種特徵學習，可以取代專家的特徵工程所花費的時間。帶著強大的自動特徵抽取的能力，深度學習在以往機器學習一直無法突破的應用，得到非常驚人的優異表現，使以往認為電腦無法做到的事，變成了可能。<br><br>雖然深度學習是如此的強大，但其實深度學習的觀念卻已經出現非常久了。</p><h2 id="開始與發展"><a href="#開始與發展" class="headerlink" title="開始與發展"></a>開始與發展</h2><p>在<strong>1980年到2010年</strong>這三十年間，雖然類神經網路並沒有突破性的成就，可是在資訊科學家不斷努力之下，開發出許多不同的類神經網路階層、架構和初始化的方式，如卷積神經網路、遞歸神經網路、受限玻爾茲曼機等，很多使用在<strong>深度學習的架構</strong>都是在這個時期就被開發出來的。<br><br><strong>2000年</strong>後，深度學習慢慢開始在影像識別、尤其是<strong>手寫數字辨識</strong>上嶄露頭角。如美國郵政的手寫郵遞區號辨識。<br><br>在2010年後，深度學習更是在MNIST這個手寫數字的資料集上得到空前的佳績，在測試資料中只有0.23%的錯誤率，比人類平均的錯誤率還要低。<br><br>此後幾年間，各種各樣的深度學習應用如雨後春筍，除了傳統機器學習的分類和回歸等問題，還可以應用在降維，甚至讓電腦自動產生語句及圖畫等等的應用。</p><h2 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h2><p><strong>視覺辨識</strong>、<strong>語音辨識</strong>、<strong>自然語言處理</strong>，以及<strong>生物醫學</strong>領域特別的出色</p><h2 id="那麼，深度學習是如何運作的呢"><a href="#那麼，深度學習是如何運作的呢" class="headerlink" title="那麼，深度學習是如何運作的呢??"></a>那麼，深度學習是如何運作的呢??</h2><div class="note default">            <p>請見下回筆記</p>          </div>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 淺談與實作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 深度學習 </tag>
            
            <tag> 機械學習 </tag>
            
            <tag> 淺談AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基礎</title>
      <link href="/2020/03/16/basic/"/>
      <url>/2020/03/16/basic/</url>
      
        <content type="html"><![CDATA[<h1 id="C-的基本知識"><a href="#C-的基本知識" class="headerlink" title="C++的基本知識"></a>C++的基本知識</h1><h2 id="必須注意的事"><a href="#必須注意的事" class="headerlink" title="必須注意的事"></a>必須注意的事</h2><ul><li><p>英文或阿拉伯數字需<strong>使用半形</strong>的字，<strong>不要使用全形</strong>。</p></li><li><p>英文字有<strong>大小寫</strong>的差別，輸入時務必小心。<br>例如: <strong>main</strong> 被打成<strong>Main</strong>或<strong>MAIN</strong>編譯時都會發生錯誤。</p></li><li><p>程式中有空白的地方，需用鍵盤上的空白鍵隔開。 </p></li><li><p>在一行或一組程式的<strong>結束</strong>後面切記加上 <strong>「;」</strong>，代表該行程式執行結束。</p></li><li><p><strong>{ } 、[ ] 、 ( )</strong> 和 <strong>“ “、’ ‘</strong> 的使用時機互不相同。</p></li><li><p>善用 *<em>/ /**、/</em> */註解功能幫助自己查核時，減少大量時間和心力的消耗。</p></li><li><p>需善用 <strong>Tab鍵 縮排 Enter鍵 換行</strong>，可使程式更簡單、易讀，這是撰寫程式需養成的習慣。 </p></li><li><p>如果括號內的程式只有<strong>一行</strong>，則括號可以<strong>省略</strong>。</p></li><li><p>若寫得程式很長可 <strong>分段做debug</strong> 動作，一步一步做出修正，避免最後整個錯亂掉。</p></li></ul><h2 id="程式碼的內容"><a href="#程式碼的內容" class="headerlink" title="程式碼的內容"></a>程式碼的內容</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;              //為了要使用 cout 而引入的標頭檔</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;             <span class="comment">//為了更方便使用 cout 的註明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                       <span class="comment">//main()函數的開始</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;初次嘗試C++\n&quot;</span>;      <span class="comment">//真正的程式從這樣一行開始</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;要好好加油喔！\n&quot;</span>;    <span class="comment">//接下來執行到這一行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                    <span class="comment">//main()函數的結束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常出現的編譯問題-CE"><a href="#常出現的編譯問題-CE" class="headerlink" title="常出現的編譯問題 (CE)"></a>常出現的編譯問題 <strong>(CE)</strong></h2><ul><li><p><strong>expected ‘ ; ’ before ‘ … ’ token</strong><br>解決方案：在錯誤出現處的行<strong>末尾</strong>加上 <strong>;</strong></p></li><li><p><strong>expected ‘ } ’ before ‘ … ’ token</strong><br>解決方案：檢查自己<strong>縮排</strong>的狀況，並找出遺漏的 }並補上</p></li><li><p><strong>“ 變數/常量/函式 ” was not declared in this scope</strong><br>解決方案：<br> 1.檢查<strong>變數</strong>是否在使用前被<strong>宣告</strong>，若無則就宣告它 。<br> 2.確認使用的<strong>預設函式</strong>其<strong>標頭檔</strong>是否已被宣告，若無則宣告它。</p></li></ul><h1 id="常數、變數與資料"><a href="#常數、變數與資料" class="headerlink" title="常數、變數與資料"></a>常數、變數與資料</h1><h2 id="資料型態-data-type"><a href="#資料型態-data-type" class="headerlink" title="資料型態 (data type)"></a>資料型態 <strong>(data type)</strong></h2><table><thead><tr><th align="center">常用型態</th><th align="center">意義</th><th align="center">資料範圍</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">整數</td><td align="center">-2147483648~2147483647</td></tr><tr><td align="center">long long int</td><td align="center">長整數</td><td align="center">-2<sup>63</sup>~2<sup>63</sup>-1</td></tr><tr><td align="center">float</td><td align="center">單經度浮點數</td><td align="center">±3.4x 10^−38^ ~ ±3.4x10<sup>38</sup></td></tr><tr><td align="center">double</td><td align="center">雙經度浮點數</td><td align="center">±1.7×10^−308^~ ±1.7×10<sup>308</sup></td></tr><tr><td align="center">string</td><td align="center">字串</td><td align="center">“World”</td></tr><tr><td align="center">char</td><td align="center">字元</td><td align="center">‘A’</td></tr><tr><td align="center">bool</td><td align="center">布林</td><td align="center">true(1)或false(0)</td></tr></tbody></table><h2 id="變數名稱-variable"><a href="#變數名稱-variable" class="headerlink" title="變數名稱(variable)"></a>變數名稱(variable)</h2><ul><li>用來做為<strong>變數的名稱</strong>，需注意的事，如下：<ul><li>使用英文字母、阿拉伯數字、底線連接（_）等，不能使用特殊的符號，例如: sum-1</li><li>已保留的<strong>關鍵字</strong>（keyword)不可為變數名稱。例如: return、break…</li><li>不能用<strong>阿拉伯數字作為開頭</strong>。例如: 12a、555…</li><li>英文字母的大小寫有區別。</li></ul></li></ul><h2 id="變數宣告-declaration"><a href="#變數宣告-declaration" class="headerlink" title="變數宣告(declaration)"></a>變數宣告(declaration)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int num;                   &#x2F;&#x2F; 資料型態 變數名稱;</span><br><span class="line">char a &#x3D; &#39;A&#39;;              &#x2F;&#x2F; 資料型態 變數名稱 &#x3D; 初值;</span><br><span class="line">int sum, ave, rank, ...;   &#x2F;&#x2F; 資料型態 變數名稱1, 變數名稱2, 變數名稱3,...;</span><br></pre></td></tr></table></figure><h3 id="宣告常數-const"><a href="#宣告常數-const" class="headerlink" title="宣告常數(const)"></a>宣告常數(const)</h3><p>利用常數給予一個定值可使數值被固定，如果後來再改變它，將發生錯誤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const double pi &#x3D; 3.141592;    &#x2F;&#x2F;const 資料型態 變數名稱 &#x3D; 特定資料 ;</span><br><span class="line">&#x2F;&#x2F;此後，pi值不會再被改變</span><br></pre></td></tr></table></figure><h1 id="運算子與基本結構"><a href="#運算子與基本結構" class="headerlink" title="運算子與基本結構"></a>運算子與基本結構</h1><h2 id="算術運算子"><a href="#算術運算子" class="headerlink" title="算術運算子"></a>算術運算子</h2><table><thead><tr><th align="center">符號</th><th align="center">功能</th><th align="center">範例</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加號</td><td align="center">a = x + y</td><td align="center"></td></tr><tr><td align="center">-</td><td align="center">減號</td><td align="center">a = x - y</td><td align="center"></td></tr><tr><td align="center">*</td><td align="center">乘號</td><td align="center">a = x * y</td><td align="center"></td></tr><tr><td align="center">/</td><td align="center">除號</td><td align="center">a = x / y</td><td align="center"></td></tr><tr><td align="center">%</td><td align="center">取餘數</td><td align="center">a = x % y</td><td align="center"></td></tr><tr><td align="center">++x</td><td align="center">運算前增量</td><td align="center">a = ++x + y</td><td align="center">x=x+1, a=x+y</td></tr><tr><td align="center">x++</td><td align="center">運算後增量</td><td align="center">a = x++ + y</td><td align="center">a=x+y,  x=x+1</td></tr><tr><td align="center">–x</td><td align="center">運算前減量</td><td align="center">a = –x + y</td><td align="center">x=x-1, a=x+y</td></tr><tr><td align="center">x–</td><td align="center">運算後減量</td><td align="center">a = x– + y</td><td align="center">a=x+y, x=x-1</td></tr><tr><td align="center">-x</td><td align="center">負號</td><td align="center">a = -x</td><td align="center"></td></tr><tr><td align="center">+x</td><td align="center">正號</td><td align="center">a = +x</td><td align="center"></td></tr></tbody></table><div class="note info">            <p><strong>整數</strong>除<strong>整數</strong>，結果為<strong>整數</strong>。 <strong>浮點數</strong>除<strong>浮點數</strong>，結果為<strong>浮點數</strong><br>例: 8 / 5 = <strong>1</strong> || 8.0 / 5.0 = <strong>1.6</strong></p>          </div><h2 id="關係與邏輯運算子"><a href="#關係與邏輯運算子" class="headerlink" title="關係與邏輯運算子"></a>關係與邏輯運算子</h2><table><thead><tr><th align="center">符號</th><th align="center">功能</th><th align="center">範例</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大於</td><td align="center">a&gt;b</td><td align="center">若a&gt;b則結果為真</td></tr><tr><td align="center">&gt;=</td><td align="center">大於等於</td><td align="center">a&gt;=b</td><td align="center">若a≧b則結果為真</td></tr><tr><td align="center">&lt;</td><td align="center">小於</td><td align="center">a&lt;b</td><td align="center">若a＜b則結果為真</td></tr><tr><td align="center">&lt;=</td><td align="center">小於等於</td><td align="center">a&lt;=b</td><td align="center">若a≦b則結果為真</td></tr><tr><td align="center">==</td><td align="center">等於</td><td align="center">a==b</td><td align="center">若a=b則結果為真</td></tr><tr><td align="center">!=</td><td align="center">不等於</td><td align="center">a!=b</td><td align="center">若a≠b則結果為真</td></tr><tr><td align="center">!</td><td align="center">邏輯NOT</td><td align="center">!(a==1)</td><td align="center">若a≠1則結果為真</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">邏輯AND</td><td align="center">a&gt;2&amp;&amp;a&lt;9</td><td align="center">若2&lt;a&lt;9則結果為真</td></tr><tr><td align="center">||</td><td align="center">邏輯OR</td><td align="center">a&lt;2 || a&gt;9</td><td align="center">若a&lt;2或a&gt;9則為真</td></tr></tbody></table><h2 id="複合指定運算子"><a href="#複合指定運算子" class="headerlink" title="複合指定運算子"></a>複合指定運算子</h2><table><thead><tr><th align="center">符號</th><th align="center">功能</th><th align="center">範例</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">簡單指定</td><td align="center">x = y</td><td align="center">令 x = y</td></tr><tr><td align="center">+=</td><td align="center">加法指定</td><td align="center">x += y</td><td align="center">令 x = x + y</td></tr><tr><td align="center">-=</td><td align="center">減法指定</td><td align="center">x -= y</td><td align="center">令 x = x - y</td></tr><tr><td align="center">*=</td><td align="center">乘法指定</td><td align="center">x *= y</td><td align="center">令 x = x * y</td></tr><tr><td align="center">/=</td><td align="center">除法指定</td><td align="center">x /= y</td><td align="center">令 x = x / y</td></tr><tr><td align="center">%=</td><td align="center">餘數指定</td><td align="center">x %= y</td><td align="center">令 x = x % y</td></tr></tbody></table><div class="note warning">            <p>指定值x=y之後，<strong>變數x</strong>原來的值<strong>被覆蓋</strong>，而<strong>y值不變</strong><br><strong>善用</strong>可以使程式碼變得<strong>更精簡</strong>，不善使用則…會很困擾</p>          </div><div class="note primary">            <h2 id="Bouns-01"><a href="#Bouns-01" class="headerlink" title="Bouns 01"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Bouns-01">Bouns 01</a></h2><p>在寫程式時，如果想要交換變數的話，不能直接寫x=y,y=x;（會出問題）那要如何完成呢?<br>那要如何在不宣告第三個變數的情況下進行交換呢?–&gt;多多去思考此問題</p>          </div><h2 id="運算符號的優先順序"><a href="#運算符號的優先順序" class="headerlink" title="運算符號的優先順序"></a>運算符號的優先順序</h2><table><thead><tr><th align="center">運算符號</th><th align="center">優先順序</th></tr></thead><tbody><tr><td align="center">( )</td><td align="center">1</td></tr><tr><td align="center">* , / , %</td><td align="center">2</td></tr><tr><td align="center">+ , -</td><td align="center">3</td></tr><tr><td align="center">==, &lt;, &gt;, &lt;=, &gt;=, !=</td><td align="center">4</td></tr></tbody></table><div class="note warning">            <p>若優先順序並列，則程式會<strong>由左至右</strong>依序執行<br>記得<strong>先加減後乘除</strong>的觀念，善用<strong>括號</strong><br>記得<strong>乘號</strong>在語言的世界裡，<strong>不能省略</strong></p>          </div><div class="note primary">            <h2 id="Ex-01-面積01"><a href="#Ex-01-面積01" class="headerlink" title="Ex.01 面積01:"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex01">Ex.01 面積01:</a></h2><p> 利用海龍公式計算三角形面積(不討論是否能夠成三角形)<br> $s=\frac{a+b+c}{2}$，$area=\sqrt{(s(s-a)(s-b)(s-c))}$</p>          </div><div class="note primary">            <h2 id="Ex-02-距離"><a href="#Ex-02-距離" class="headerlink" title="Ex.02 距離:"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex02">Ex.02 距離:</a></h2><p> 輸入四個浮點數 $x1,y1,x2,y2$，計算坐標系上$(x1,y1)$到$(x2,y2)$的距離<br> 距離公式: $distance=\sqrt{((x1-x2)^2+(y1-y2)^2)}$</p>          </div><h2 id="循序式結構-sequence-structure"><a href="#循序式結構-sequence-structure" class="headerlink" title="循序式結構 (sequence structure)"></a>循序式結構 (sequence structure)</h2><p>程式依序從第一個敘述執行至最後一個敘述</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循序式結構</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name;                          <span class="comment">//第1步</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;name;                            <span class="comment">//第2步</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello, &quot;</span>&lt;&lt;name&lt;&lt;<span class="built_in">endl</span>;          <span class="comment">//第3步</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                             <span class="comment">//第4步</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="選擇式結構-selection-structure"><a href="#選擇式結構-selection-structure" class="headerlink" title="選擇式結構(selection structure)"></a>選擇式結構(selection structure)</h2><p> 程式運行到條件敘述，當條件成立(運算式值為1)時，<strong>重複</strong>執行重複區的敘述。<br> 反之，當條件不成立時(運算式值為0)，則結束重複結構。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//選擇式結構</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;                              <span class="comment">//第1步</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;請輸入一個數字&quot;</span>;                 <span class="comment">//第2步</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;                             <span class="comment">//第3步</span></span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;                         <span class="comment">//第4步</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;你輸入的是偶數&quot;</span>;             <span class="comment">//if運算值為1時的第5步</span></span><br><span class="line">    &#125;                                     <span class="comment">//if運算值為0省略第5步</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                             <span class="comment">//第6步</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重複式結構-repetition-structure"><a href="#重複式結構-repetition-structure" class="headerlink" title="重複式結構(repetition structure)"></a>重複式結構(repetition structure)</h2><p>  程式運行到重複敘述，當條件成立(運算式值為1)時，<strong>重複</strong>執行重複區敘述。<br>反之，當條件不成立時(運算式值為0)，則結束重複結構。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,sum=<span class="number">0</span>;                          <span class="comment">//第1步</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;                               <span class="comment">//第2步</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)                 <span class="comment">//第3步判斷</span></span><br><span class="line">        sum+=i;                             <span class="comment">//第4步，若執行完i++後，仍小於num不斷重複</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;從1加到num的總和為:&quot;</span>&lt;&lt;sum;         <span class="comment">//第5步</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                <span class="comment">//第6步</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="條件選擇"><a href="#條件選擇" class="headerlink" title="條件選擇"></a>條件選擇</h1><h2 id="邏輯運算"><a href="#邏輯運算" class="headerlink" title="邏輯運算"></a>邏輯運算</h2><h3 id="邏輯運算子"><a href="#邏輯運算子" class="headerlink" title="邏輯運算子"></a>邏輯運算子</h3><table><thead><tr><th align="center">符號</th><th align="center">功能</th><th align="center">範例</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">!</td><td align="center">邏輯NOT</td><td align="center">!(a==1)</td><td align="center">若a≠1則結果為真</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">邏輯AND</td><td align="center">a&gt;2&amp;&amp;a&lt;9</td><td align="center">若2&lt;a&lt;9則結果為真</td></tr><tr><td align="center">||</td><td align="center">邏輯OR</td><td align="center">a&lt;2 || a&gt;9</td><td align="center">若a&lt;2或a&gt;9則為真</td></tr></tbody></table><h3 id="邏輯AND與OR運算真值表"><a href="#邏輯AND與OR運算真值表" class="headerlink" title="邏輯AND與OR運算真值表"></a>邏輯AND與OR運算真值表</h3><table><thead><tr><th align="center">運算式A</th><th align="center">運算式B</th><th align="center">A &amp;&amp; B</th><th align="center">A || B</th></tr></thead><tbody><tr><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td></tr><tr><td align="center">false</td><td align="center">true</td><td align="center">false</td><td align="center">true</td></tr><tr><td align="center">true</td><td align="center">false</td><td align="center">false</td><td align="center">true</td></tr><tr><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td></tr></tbody></table><h3 id="邏輯NOT運算真值表"><a href="#邏輯NOT運算真值表" class="headerlink" title="邏輯NOT運算真值表"></a>邏輯NOT運算真值表</h3><table><thead><tr><th align="center">A</th><th align="center">!A</th></tr></thead><tbody><tr><td align="center">true</td><td align="center">false</td></tr><tr><td align="center">false</td><td align="center">true</td></tr></tbody></table><h3 id="邏輯運算式值"><a href="#邏輯運算式值" class="headerlink" title="邏輯運算式值"></a>邏輯運算式值</h3><table><thead><tr><th align="center">邏輯運算式</th><th align="center">邏輯運算值</th></tr></thead><tbody><tr><td align="center">(4.3&gt;3.7) &amp;&amp; (7==4+3)</td><td align="center">true(1)</td></tr><tr><td align="center">(9/2==4.5) || (5&gt;3.2)</td><td align="center">true(1)</td></tr><tr><td align="center">!(1.5 * 5 &gt;= 2)</td><td align="center">false(0)</td></tr></tbody></table><div class="note primary">            <h2 id="Bouns-02-推算下列混合運算式的值-true-false"><a href="#Bouns-02-推算下列混合運算式的值-true-false" class="headerlink" title="Bouns 02 推算下列混合運算式的值(true || false)"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Bouns-02">Bouns 02 推算下列混合運算式的值(true || false)</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> !(<span class="number">4.3</span> &gt; <span class="number">3.7</span>) &amp;&amp; (<span class="number">7</span> == <span class="number">5</span> + <span class="number">2</span>) || (<span class="number">15</span> / <span class="number">3</span> &lt; <span class="number">5</span>)</span><br><span class="line"><span class="number">2.</span> (<span class="number">8.2</span> &lt; <span class="number">7.3</span> * <span class="number">2</span>) || !(<span class="number">1</span> + <span class="number">3</span> * <span class="number">2</span> &lt; <span class="number">5</span>)</span><br><span class="line"><span class="number">3.</span> (<span class="number">96</span> / <span class="number">4</span> + <span class="number">2</span> &gt; <span class="number">20</span>) &amp;&amp; !(<span class="number">6</span> - <span class="number">2</span> * <span class="number">9</span> &gt; <span class="number">72</span> / <span class="number">9</span>)</span><br></pre></td></tr></table></figure>          </div><h2 id="條件選擇-1"><a href="#條件選擇-1" class="headerlink" title="條件選擇"></a>條件選擇</h2><h2 id="if敘述"><a href="#if敘述" class="headerlink" title="if敘述"></a><strong>if敘述</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件式)</span><br><span class="line">&#123;</span><br><span class="line">    條件「成立」時的敘述;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning">            <p><strong>if(條件式) 後面沒有；</strong></p>          </div><p><img src= "/img/loading.gif" data-lazy-src="https://github.com/For-cpp/-/blob/master/if.png?raw=true" alt="made by 葉致宏"></p><h2 id="例1-判斷正數"><a href="#例1-判斷正數" class="headerlink" title="例1: 判斷正數"></a>例1: 判斷正數</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;請輸入一個整數:&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;是正數&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-else敘述"><a href="#if-else敘述" class="headerlink" title="if-else敘述"></a><strong>if-else敘述</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件式)</span><br><span class="line">&#123;</span><br><span class="line">    條件「成立」時，敘述<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    條件「不成立」時，敘述<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://github.com/For-cpp/-/blob/master/if-else.png?raw=true" alt="made by 葉致宏"></p><div class="note primary">            <h2 id="Ex-03-面積02"><a href="#Ex-03-面積02" class="headerlink" title="Ex.03 :面積02"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex03">Ex.03 :面積02</a></h2><p> 繼Ex.01 加上if先判斷是否能構成三角形</p>          </div><h2 id="if-else-if敘述"><a href="#if-else-if敘述" class="headerlink" title="if-else if敘述"></a><strong>if-else if敘述</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    條件<span class="number">1</span>「成立」時程式碼區塊;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(條件<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    條件<span class="number">1</span>「不成立」，且條件<span class="number">2</span>「成立」時的程式碼;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(條件<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    條件<span class="number">1</span>、<span class="number">2</span>「不成立」，且條件<span class="number">3</span>「成立」時的程式碼;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    上述條件都「不成立」時的程式碼;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://github.com/For-cpp/-/blob/master/else-if.png?raw=true" alt="image alt"></p><h2 id="例2-區分分數等級"><a href="#例2-區分分數等級" class="headerlink" title="例2:區分分數等級"></a>例2:區分分數等級</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;請輸入成績 (0 - 100)：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; number;                <span class="comment">//輸入數值並存入number</span></span><br><span class="line">    <span class="keyword">if</span> (number &gt;= <span class="number">90</span>)                <span class="comment">//若90&lt;=number，則</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成績甲等\n&quot;</span>;        <span class="comment">//輸出甲等並結束 if</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (number &gt;= <span class="number">80</span>)          <span class="comment">//其餘若80&lt;=number，則</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成績乙等\n&quot;</span>;         <span class="comment">//輸出乙等並結束 if</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (number &gt;= <span class="number">70</span> )         <span class="comment">//其餘若70&lt;=number，則</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成績丙等\n&quot;</span>;        <span class="comment">//輸出丙等並結束 if</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (number &gt;= <span class="number">60</span> )            <span class="comment">//若60&lt;=number，則</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成績丁等\n&quot;</span>;           <span class="comment">//輸出丁等並結束 if</span></span><br><span class="line">    <span class="keyword">else</span>                               <span class="comment">//全部皆不成立，則</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成績戊等\n&quot;</span>            <span class="comment">//輸出戊等並結束 if</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary">            <h2 id="Ex-04-判斷一元二次方程式的根"><a href="#Ex-04-判斷一元二次方程式的根" class="headerlink" title="Ex.04 判斷一元二次方程式的根"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex04">Ex.04 判斷一元二次方程式的根</a></h2><p> <strong>由鍵盤輸入方程式ax^2^+bx+c=0的a,b,c，判斷方程式根的狀態</strong></p><ul><li>若b^2^-4ac&gt;0，則表示方程式具有二個實根</li><li>若b^2^-4ac=0，則表示方程式具有一個實根</li><li>若b^2^-4ac&lt;0，則表示方程式具有二個虛根</li></ul>          </div><div class="note primary">            <h2 id="Ex-05-計算折扣價"><a href="#Ex-05-計算折扣價" class="headerlink" title="Ex.05 計算折扣價"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex05">Ex.05 計算折扣價</a></h2><p> 假設一台電腦單價為$39,999元，由鍵盤輸入購買數量，計算並顯示總價<br> 其採購量與折扣對應表如下:</p><table><thead><tr><th align="center">數量</th><th align="center">10~19</th><th align="center">20~49</th><th align="center">50~99</th><th align="center">100以上</th></tr></thead><tbody><tr><td align="center"><strong>折扣</strong></td><td align="center">10%</td><td align="center">20%</td><td align="center">30%</td><td align="center">40%</td></tr></tbody></table>          </div><h2 id="巢狀if敘述"><a href="#巢狀if敘述" class="headerlink" title="巢狀if敘述"></a><strong>巢狀if敘述</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(條件<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        條件<span class="number">1</span>「成立」，且條件<span class="number">2</span>「成立」時的程式碼A</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        條件<span class="number">1</span>「成立」，且條件<span class="number">2</span>「不成立」時的程式碼B</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    條件<span class="number">1</span>「不成立」時程式碼C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://github.com/For-cpp/-/blob/master/%E5%B7%A2%E7%8B%80if.png?raw=true" alt="image alt"></p><h2 id="例3-用巢狀if判斷閏年年分"><a href="#例3-用巢狀if判斷閏年年分" class="headerlink" title="例3:用巢狀if判斷閏年年分"></a>例3:用巢狀if判斷閏年年分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; year;</span><br><span class="line">    <span class="keyword">if</span>(year % <span class="number">4</span> !=<span class="number">0</span> )                    <span class="comment">//如果不是4的倍數</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; year &lt;&lt;<span class="string">&quot;不是閏年&quot;</span>;        <span class="comment">//則輸出不是閏年</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(year % <span class="number">100</span> ==<span class="number">0</span>)&#123;             <span class="comment">//其中如果是100的倍數</span></span><br><span class="line">        <span class="keyword">if</span>(year % <span class="number">400</span> ==<span class="number">0</span>)               <span class="comment">//如果又是400的倍數</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; year &lt;&lt;<span class="string">&quot;是閏年&quot;</span>;      <span class="comment">//則輸出是閏年</span></span><br><span class="line">        <span class="keyword">else</span>                             <span class="comment">//只是100的倍數</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; year &lt;&lt; <span class="string">&quot;不是閏年&quot;</span>;   <span class="comment">//則輸出不是閏年</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                 <span class="comment">//只能被4整除</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; year &lt;&lt; <span class="string">&quot;是閏年&quot;</span>;         <span class="comment">//則輸出是閏年</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch敘述"><a href="#switch敘述" class="headerlink" title="switch敘述"></a><strong>switch敘述</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (條件運算式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 數值<span class="number">1</span>:</span><br><span class="line">        數值<span class="number">1</span>「成立」的敘述區<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//中斷 switch</span></span><br><span class="line">    <span class="keyword">case</span> 數值<span class="number">2</span>:</span><br><span class="line">        數值<span class="number">2</span>「成立」的敘述區<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//中斷 switch</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        以上條件皆「不成立」敘述區n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://github.com/For-cpp/-/blob/master/switch.png?raw=true" alt="image alt"></p><h2 id="例4-按-鍵，執行-運算"><a href="#例4-按-鍵，執行-運算" class="headerlink" title="例4:按+ - * / 鍵，執行  + - * /運算"></a>例4:按+ - * / 鍵，執行  + - * /運算</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> letter;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">90</span>, num2 = <span class="number">15</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;num1 = 90,num2 = 15\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;從鍵盤上輸入+, -, *, / :&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;letter;</span><br><span class="line">    <span class="keyword">switch</span> (letter)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;num1 + num2 =&quot;</span>&lt;&lt; num1 + num2 &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;num1 - num2 =&quot;</span>&lt;&lt; num1 - num2 &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;num1 * num2 =&quot;</span>&lt;&lt; num1 * num2 &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;num1 / num2 =&quot;</span>&lt;&lt; num1 / num2 &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h1><h2 id="for迴圈"><a href="#for迴圈" class="headerlink" title="for迴圈"></a>for迴圈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(變數初值;條件判斷;改變量)</span><br><span class="line">&#123;</span><br><span class="line">    程式碼</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info">            <p><strong>for(  )後面也沒有 ；</strong><br>for語句的三個部分都是可以省略的</p>          </div><h2 id="例5-計算n-的值"><a href="#例5-計算n-的值" class="headerlink" title="例5: 計算n!的值"></a>例5: 計算n!的值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,sum=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;請輸入n：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)   <span class="comment">// 讓 i 從 1~n</span></span><br><span class="line">        sum*=i;              <span class="comment">// 每次迴圈 sum=sum*i</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="巢狀迴圈"><a href="#巢狀迴圈" class="headerlink" title="巢狀迴圈"></a>巢狀迴圈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(變數<span class="number">1</span>初值;條件<span class="number">1</span>判斷;改變量)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(變數<span class="number">2</span>初值;條件<span class="number">2</span>判斷;改變量)</span><br><span class="line">    &#123;</span><br><span class="line">        程式碼</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例6-印出n層金字塔"><a href="#例6-印出n層金字塔" class="headerlink" title="例6: 印出n層金字塔"></a>例6: 印出n層金字塔</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n-i;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*i<span class="number">-1</span>;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;*&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n-i;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary">            <h2 id="Ex-06-倒三角形"><a href="#Ex-06-倒三角形" class="headerlink" title="Ex.06: 倒三角形"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex06">Ex.06: 倒三角形</a></h2><p> 印出一個高為10的顛倒金字塔<br><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/2fKHDNH.jpg=1000x1000" alt="我只是個三角形"></p>          </div><h2 id="while迴圈"><a href="#while迴圈" class="headerlink" title="while迴圈"></a>while迴圈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(條件判斷)    <span class="comment">// 條件為「真」的時候繼續執行</span></span><br><span class="line">&#123;</span><br><span class="line">    程式碼</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例7-把數字反轉"><a href="#例7-把數字反轉" class="headerlink" title="例7: 把數字反轉"></a>例7: 把數字反轉</h2><p>(若數字為100，顛倒後的數表示為1，不是001)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n%<span class="number">10</span>==<span class="number">0</span> &amp;&amp; n&gt;<span class="number">0</span>)</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(n%<span class="number">10</span>!=<span class="number">0</span>||n&gt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;n%<span class="number">10</span>;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…while迴圈"><a href="#do…while迴圈" class="headerlink" title="do…while迴圈"></a>do…while迴圈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    程式碼</span><br><span class="line">&#125;<span class="keyword">while</span>(條件判斷);  <span class="comment">// 條件為「真」的時候繼續執行</span></span><br></pre></td></tr></table></figure><div class="note warning">            <p><strong>do…while</strong>與<strong>while</strong>的差別在於<strong>do…while至少會做一次</strong><br><strong>do…while後面要加分號</strong>，表示結束</p>          </div><h2 id="例8-小算盤開根號-以牛頓法實作"><a href="#例8-小算盤開根號-以牛頓法實作" class="headerlink" title="例8: 小算盤開根號(以牛頓法實作)"></a>例8: 小算盤開根號(<a href="http://mathcenter.ck.tp.edu.tw/Resources/Ctrl/ePaper/ePaperOpenFileX.ashx?autoKey=55">以牛頓法實作</a>)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    a = n;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        a = (a*a+n)/(<span class="number">2</span>*a);    <span class="comment">//挑出的第1個近似值a之後，作一切線，切線和x軸的交點</span></span><br><span class="line">    &#125; <span class="keyword">while</span> ( a*a-n&gt;<span class="number">1e-13</span> );  <span class="comment">//當a*a和n的誤差&gt;1e-13時，繼續逼進</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="陣列、字串"><a href="#陣列、字串" class="headerlink" title="陣列、字串"></a>陣列、字串</h1><h2 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h2><p><strong>陣列</strong>（Array），是由相同類型的元素的集合所組成的資料結構，分配一塊<strong>連續</strong>的記憶體來儲存。利用元素的索引(index)可以計算出該元素對應的儲存位址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];                      <span class="comment">// 宣告一個大小為5的int陣列</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">80</span>;                       <span class="comment">// 陣列的索引值由0開始</span></span><br><span class="line">arr[<span class="number">5</span>]=<span class="number">90</span>;                       <span class="comment">// 索引值0~4</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] =  &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;; <span class="comment">// 宣告陣列時設定初值</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] =  &#123; <span class="number">1</span> &#125;;             <span class="comment">// arr[0]初值1，其餘預設為0</span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;   <span class="comment">// 陣列大小依初值自動計算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr2D[<span class="number">4</span>][<span class="number">2</span>];                 <span class="comment">// 宣告二維陣列(多維陣列)</span></span><br><span class="line"><span class="keyword">int</span> arr2D[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125;, &#123; <span class="number">5</span>, <span class="number">6</span> &#125;, &#123; <span class="number">7</span>, <span class="number">8</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><div class="note info">            <p>如果陣列要用的<strong>比較大</strong>一些，它就要在<strong>全域宣告</strong>喔</p>          </div><h2 id="例9-利用泡沫排序法-bubble-sort"><a href="#例9-利用泡沫排序法-bubble-sort" class="headerlink" title="例9:利用泡沫排序法(bubble sort)"></a>例9:利用泡沫排序法(<a href="https://medium.com/@mingjunlu/understanding-bubble-sort-7aa4567986ae">bubble sort</a>)</h2><p>將{3,2,4,8,9,1,7}由小至大排列，並依序輸出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">7</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>&#125;,t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    t=a[j];</span><br><span class="line">                    a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">                    a[j+<span class="number">1</span>]=t;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary">            <h2 id="Ex-07-成績單"><a href="#Ex-07-成績單" class="headerlink" title="Ex.07 成績單:"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex07">Ex.07 成績單:</a></h2><p>3年21班前五號的學測成績如下:</p><table><thead><tr><th align="center">座號</th><th align="center">國文</th><th align="center">數學</th><th align="center">英文</th><th align="center">自然</th><th align="center">社會</th><th align="center">總分</th><th align="center">平均</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">10</td><td align="center">12</td><td align="center">9</td><td align="center">11</td><td align="center">7</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">9</td><td align="center">10</td><td align="center">8</td><td align="center">9</td><td align="center">11</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">13</td><td align="center">8</td><td align="center">11</td><td align="center">7</td><td align="center">14</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">8</td><td align="center">14</td><td align="center">13</td><td align="center">14</td><td align="center">9</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">12</td><td align="center">10</td><td align="center">9</td><td align="center">10</td><td align="center">9</td><td align="center"></td><td align="center"></td></tr></tbody></table><p> 請利用多維陣列完成表格並完整的印出表格</p>          </div><h2 id="字串"><a href="#字串" class="headerlink" title="字串"></a>字串</h2><p><strong>字串</strong>實例可以使用 [] 指定索引來存取相對應位置的<strong>字元</strong>，就有如<strong>字元陣列</strong>的操作一般</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str1;                 &#x2F;&#x2F; 內容為空字串</span><br><span class="line">string str2 &#x3D; &quot;sololearn&quot;;   &#x2F;&#x2F; 內容為指定的字串常量</span><br></pre></td></tr></table></figure><p>可使用 <strong>str.length()</strong> 或 <strong>str.size()**得知</strong>字串大小**</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s=<span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s長度為&lt;&lt;s.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">輸出--&gt;s長度為<span class="number">11</span></span><br><span class="line">    --&gt;Hello World</span><br></pre></td></tr></table></figure><div class="note warning">            <p>從字串上的<strong>數字</strong>，僅是<strong>字元</strong>。若直接進行運算，計算的依據將為<a href="%5Bhttps%5D(https://zh.wikipedia.org/wiki/ASCII)"><strong>ASCII碼</strong></a>，結果會錯誤<br>若需要進行運算，則必須<strong>先減去’0’才行</strong></p>          </div><h2 id="例10-判別一個數字N是否為3的倍數-N-gt-1020"><a href="#例10-判別一個數字N是否為3的倍數-N-gt-1020" class="headerlink" title="例10:判別一個數字N是否為3的倍數(N&gt;1020)"></a>例10:判別一個數字N是否為3的倍數(N&gt;10<sup>20</sup>)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        sum+=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;是3的倍數&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot;不是3的倍數&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary">            <h2 id="Ex-08-字串應用"><a href="#Ex-08-字串應用" class="headerlink" title="Ex.08 字串應用:"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex08">Ex.08 字串應用:</a></h2><p> 判別一個數字N是否為11的倍數(N&gt;10^20^)</p>          </div><h1 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h1><h2 id="自訂函式"><a href="#自訂函式" class="headerlink" title="自訂函式"></a>自訂函式</h2><p>有某些程式碼會經常使用，對於程式中出現兩次以上被重覆使用的程式片段，可以將之定義為<strong>函式</strong>以便<strong>重覆呼叫</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">回傳值的型態 函式名稱(變數型態 參數<span class="number">1</span>，變數型態 參數<span class="number">2</span>，...)</span><br><span class="line">&#123;</span><br><span class="line">    程式碼</span><br><span class="line">    <span class="keyword">return</span> 回傳值或運算式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例11-寫一函式可以計算n-，並以之求-C-n-k-frac-n-n-k-×-k"><a href="#例11-寫一函式可以計算n-，並以之求-C-n-k-frac-n-n-k-×-k" class="headerlink" title="例11:寫一函式可以計算n!，並以之求 $C(n,k)=\frac{n!}{(n-k)! × k!}$"></a>例11:寫一函式可以計算n!，並以之求 $C(n,k)=\frac{n!}{(n-k)! × k!}$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        sum*=i;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f(n)/((f(n-k)*f(k))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary">            <h2 id="Ex-09-gcd-01"><a href="#Ex-09-gcd-01" class="headerlink" title="Ex.09 gcd 01:"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex09">Ex.09 gcd 01:</a></h2><p> 寫一個函式計算兩數的最大公因數</p>          </div><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>如果呼叫函式<strong>不傳回</strong>任何值，則宣告為<strong>void</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> 函式名稱(變數型態 參數<span class="number">1</span>，變數型態 參數<span class="number">2</span>，...)</span><br><span class="line">&#123;</span><br><span class="line">    程式碼</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遞迴"><a href="#遞迴" class="headerlink" title="遞迴"></a>遞迴</h2><p><strong>遞迴</strong>（Recursion），是指在函式中<strong>使用函式自身</strong>的方法。</p><div class="note warning">            <p>遞迴函式必須有<strong>終止條件</strong>，才能被計算。</p>          </div><h2 id="例12-利用遞迴函式費氏數列的第n項"><a href="#例12-利用遞迴函式費氏數列的第n項" class="headerlink" title="例12:利用遞迴函式費氏數列的第n項"></a>例12:利用遞迴函式<a href="https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E5%BE%9E%E8%B2%BB%E6%B0%8F%E6%95%B8%E5%88%97%E8%AA%8D%E8%AD%98%E4%BD%95%E8%AC%82%E9%81%9E%E8%BF%B4-dea15d2808a3">費氏數列</a>的第n項</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)                 <span class="comment">// n==0時終止，回傳0。if後只有一行，可省略&#123;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)            <span class="comment">// n==1時終止，回傳1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> f(n<span class="number">-1</span>)+f(n<span class="number">-2</span>)    <span class="comment">// 遞迴呼叫</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fib(n);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例13-利用遞迴函式求ab的值"><a href="#例13-利用遞迴函式求ab的值" class="headerlink" title="例13:利用遞迴函式求ab的值"></a>例13:利用遞迴函式求a<sup>b</sup>的值</h2><p><img src= "/img/loading.gif" data-lazy-src="https://www.csie.ntu.edu.tw/~b98902112/cpp_and_algo/cpp02/recursion_exponentiation_def.png" alt="made by 葉致宏"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( b &gt;= <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> a * f(a,b<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(a,b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary">            <h2 id="Ex-10-gcd-02"><a href="#Ex-10-gcd-02" class="headerlink" title="Ex.10 gcd 02"></a><a href="https://hackmd.io/xn9xTEwoSmqHXX9O4uRAuQ?view#Ex10">Ex.10 gcd 02</a></h2><p> 繼Ex.09運用遞迴函式求兩數的最大公因數</p>          </div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 超基礎之道 </tag>
            
            <tag> 語法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇開始</title>
      <link href="/2020/03/14/hello/"/>
      <url>/2020/03/14/hello/</url>
      
        <content type="html"><![CDATA[<h1 id="我來了"><a href="#我來了" class="headerlink" title="我來了"></a>我來了</h1><h2 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h2><p>最近，周遭的人越來越多該使架設起自己的Blog，就連自己的電腦社都要有自己的社網了，所以就開始了我連夜的瘋狂製作。</p><h2 id="嘗試"><a href="#嘗試" class="headerlink" title="嘗試"></a>嘗試</h2><p>一開始，想說要有<strong>自己的風格</strong>，就堅持從頭就只能用自己的努力，HTML、CSS以及javascript都由自己來寫，連續努力了整整二個禮拜的午夜，果然還是比不上網路現有的模板來的方便以及好看，最終我選擇放棄了，那份嘗試我看以後，有時間了再試試看吧。 （我絕不會放棄的</p><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul><li>用這份筆記<ul><li>把所寫好的程式碼貼到這裡分享</li><li>把所學會的演算法和心得</li><li>製作完一份高中三年的學習歷程</li></ul></li><li>自己的目標<ul><li>把課業搞得更好</li><li>把社團弄得更豐富</li><li>成功做出一份純本人手工的網頁</li><li>生活過得更精彩</li></ul></li></ul><h2 id="心得及想法"><a href="#心得及想法" class="headerlink" title="心得及想法"></a>心得及想法</h2><p>既然，現在的我穩定下自己的方向，就算是需要多次嘗試、努力甚至是犧牲，我也終究不後悔選擇了這條路，因為 我熱衷於此。</p><p>我的座右銘:<br><br><strong>“The secret of success is constancy to purpose.”</strong><br><strong>「成功的祕密是對目的堅貞不移。」– 班傑明‧迪斯雷利 (英國首相)</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日記 </tag>
            
            <tag> 心得 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
